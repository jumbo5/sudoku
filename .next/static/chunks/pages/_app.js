/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/_app"],{

/***/ "./node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ isPropValid; }\n/* harmony export */ });\n/* harmony import */ var _emotion_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/memoize */ \"./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js\");\n\n\nvar reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23\n\nvar isPropValid = /* #__PURE__ */(0,_emotion_memoize__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(function (prop) {\n  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111\n  /* o */\n  && prop.charCodeAt(1) === 110\n  /* n */\n  && prop.charCodeAt(2) < 91;\n}\n/* Z+1 */\n);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaXMtcHJvcC12YWxpZC9kaXN0L2Vtb3Rpb24taXMtcHJvcC12YWxpZC5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUM7O0FBRXZDLDIrSEFBMitIOztBQUUzK0gsaUNBQWlDLDREQUFPO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmVzbS5qcz9kYzc5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgcmVhY3RQcm9wc1JlZ2V4ID0gL14oKGNoaWxkcmVufGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfGtleXxyZWZ8YXV0b0ZvY3VzfGRlZmF1bHRWYWx1ZXxkZWZhdWx0Q2hlY2tlZHxpbm5lckhUTUx8c3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nfHN1cHByZXNzSHlkcmF0aW9uV2FybmluZ3x2YWx1ZUxpbmt8YWJicnxhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxlbnRlcktleUhpbnR8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9hZGluZ3xsb29wfGxvd3xtYXJnaW5IZWlnaHR8bWFyZ2luV2lkdGh8bWF4fG1heExlbmd0aHxtZWRpYXxtZWRpYUdyb3VwfG1ldGhvZHxtaW58bWluTGVuZ3RofG11bHRpcGxlfG11dGVkfG5hbWV8bm9uY2V8bm9WYWxpZGF0ZXxvcGVufG9wdGltdW18cGF0dGVybnxwbGFjZWhvbGRlcnxwbGF5c0lubGluZXxwb3N0ZXJ8cHJlbG9hZHxwcm9maWxlfHJhZGlvR3JvdXB8cmVhZE9ubHl8cmVmZXJyZXJQb2xpY3l8cmVsfHJlcXVpcmVkfHJldmVyc2VkfHJvbGV8cm93c3xyb3dTcGFufHNhbmRib3h8c2NvcGV8c2NvcGVkfHNjcm9sbGluZ3xzZWFtbGVzc3xzZWxlY3RlZHxzaGFwZXxzaXplfHNpemVzfHNsb3R8c3BhbnxzcGVsbENoZWNrfHNyY3xzcmNEb2N8c3JjTGFuZ3xzcmNTZXR8c3RhcnR8c3RlcHxzdHlsZXxzdW1tYXJ5fHRhYkluZGV4fHRhcmdldHx0aXRsZXx0cmFuc2xhdGV8dHlwZXx1c2VNYXB8dmFsdWV8d2lkdGh8d21vZGV8d3JhcHxhYm91dHxkYXRhdHlwZXxpbmxpc3R8cHJlZml4fHByb3BlcnR5fHJlc291cmNlfHR5cGVvZnx2b2NhYnxhdXRvQ2FwaXRhbGl6ZXxhdXRvQ29ycmVjdHxhdXRvU2F2ZXxjb2xvcnxpbmNyZW1lbnRhbHxmYWxsYmFja3xpbmVydHxpdGVtUHJvcHxpdGVtU2NvcGV8aXRlbVR5cGV8aXRlbUlEfGl0ZW1SZWZ8b258b3B0aW9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGlzUHJvcFZhbGlkID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgeyBpc1Byb3BWYWxpZCBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js\n"));

/***/ }),

/***/ "./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ memoize; }\n/* harmony export */ });\nfunction memoize(fn) {\n  var cache = Object.create(null);\n  return function (arg) {\n    if (cache[arg] === undefined) cache[arg] = fn(arg);\n    return cache[arg];\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L2Vtb3Rpb24tbWVtb2l6ZS5lc20uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU4QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L2Vtb3Rpb24tbWVtb2l6ZS5lc20uanM/Mzg0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCB7IG1lbW9pemUgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js\n"));

/***/ }),

/***/ "./node_modules/@emotion/stylis/dist/stylis.browser.esm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@emotion/stylis/dist/stylis.browser.esm.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nfunction stylis_min (W) {\n  function M(d, c, e, h, a) {\n    for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {\n      g = e.charCodeAt(l);\n      l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);\n\n      if (0 === b + n + v + m) {\n        if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {\n          switch (g) {\n            case 32:\n            case 9:\n            case 59:\n            case 13:\n            case 10:\n              break;\n\n            default:\n              f += e.charAt(l);\n          }\n\n          g = 59;\n        }\n\n        switch (g) {\n          case 123:\n            f = f.trim();\n            q = f.charCodeAt(0);\n            k = 1;\n\n            for (t = ++l; l < B;) {\n              switch (g = e.charCodeAt(l)) {\n                case 123:\n                  k++;\n                  break;\n\n                case 125:\n                  k--;\n                  break;\n\n                case 47:\n                  switch (g = e.charCodeAt(l + 1)) {\n                    case 42:\n                    case 47:\n                      a: {\n                        for (u = l + 1; u < J; ++u) {\n                          switch (e.charCodeAt(u)) {\n                            case 47:\n                              if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {\n                                l = u + 1;\n                                break a;\n                              }\n\n                              break;\n\n                            case 10:\n                              if (47 === g) {\n                                l = u + 1;\n                                break a;\n                              }\n\n                          }\n                        }\n\n                        l = u;\n                      }\n\n                  }\n\n                  break;\n\n                case 91:\n                  g++;\n\n                case 40:\n                  g++;\n\n                case 34:\n                case 39:\n                  for (; l++ < J && e.charCodeAt(l) !== g;) {\n                  }\n\n              }\n\n              if (0 === k) break;\n              l++;\n            }\n\n            k = e.substring(t, l);\n            0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));\n\n            switch (q) {\n              case 64:\n                0 < r && (f = f.replace(N, ''));\n                g = f.charCodeAt(1);\n\n                switch (g) {\n                  case 100:\n                  case 109:\n                  case 115:\n                  case 45:\n                    r = c;\n                    break;\n\n                  default:\n                    r = O;\n                }\n\n                k = M(c, r, k, g, a + 1);\n                t = k.length;\n                0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));\n                if (0 < t) switch (g) {\n                  case 115:\n                    f = f.replace(da, ea);\n\n                  case 100:\n                  case 109:\n                  case 45:\n                    k = f + '{' + k + '}';\n                    break;\n\n                  case 107:\n                    f = f.replace(fa, '$1 $2');\n                    k = f + '{' + k + '}';\n                    k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;\n                    break;\n\n                  default:\n                    k = f + k, 112 === h && (k = (p += k, ''));\n                } else k = '';\n                break;\n\n              default:\n                k = M(c, X(c, f, I), k, h, a + 1);\n            }\n\n            F += k;\n            k = I = r = u = q = 0;\n            f = '';\n            g = e.charCodeAt(++l);\n            break;\n\n          case 125:\n          case 59:\n            f = (0 < r ? f.replace(N, '') : f).trim();\n            if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\\x00\\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {\n              case 0:\n                break;\n\n              case 64:\n                if (105 === g || 99 === g) {\n                  G += f + e.charAt(l);\n                  break;\n                }\n\n              default:\n                58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));\n            }\n            I = r = u = q = 0;\n            f = '';\n            g = e.charCodeAt(++l);\n        }\n      }\n\n      switch (g) {\n        case 13:\n        case 10:\n          47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\\x00');\n          0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);\n          z = 1;\n          D++;\n          break;\n\n        case 59:\n        case 125:\n          if (0 === b + n + v + m) {\n            z++;\n            break;\n          }\n\n        default:\n          z++;\n          y = e.charAt(l);\n\n          switch (g) {\n            case 9:\n            case 32:\n              if (0 === n + m + b) switch (x) {\n                case 44:\n                case 58:\n                case 9:\n                case 32:\n                  y = '';\n                  break;\n\n                default:\n                  32 !== g && (y = ' ');\n              }\n              break;\n\n            case 0:\n              y = '\\\\0';\n              break;\n\n            case 12:\n              y = '\\\\f';\n              break;\n\n            case 11:\n              y = '\\\\v';\n              break;\n\n            case 38:\n              0 === n + b + m && (r = I = 1, y = '\\f' + y);\n              break;\n\n            case 108:\n              if (0 === n + b + m + E && 0 < u) switch (l - u) {\n                case 2:\n                  112 === x && 58 === e.charCodeAt(l - 3) && (E = x);\n\n                case 8:\n                  111 === K && (E = K);\n              }\n              break;\n\n            case 58:\n              0 === n + b + m && (u = l);\n              break;\n\n            case 44:\n              0 === b + v + n + m && (r = 1, y += '\\r');\n              break;\n\n            case 34:\n            case 39:\n              0 === b && (n = n === g ? 0 : 0 === n ? g : n);\n              break;\n\n            case 91:\n              0 === n + b + v && m++;\n              break;\n\n            case 93:\n              0 === n + b + v && m--;\n              break;\n\n            case 41:\n              0 === n + b + m && v--;\n              break;\n\n            case 40:\n              if (0 === n + b + m) {\n                if (0 === q) switch (2 * x + 3 * K) {\n                  case 533:\n                    break;\n\n                  default:\n                    q = 1;\n                }\n                v++;\n              }\n\n              break;\n\n            case 64:\n              0 === b + v + n + m + u + k && (k = 1);\n              break;\n\n            case 42:\n            case 47:\n              if (!(0 < n + m + v)) switch (b) {\n                case 0:\n                  switch (2 * g + 3 * e.charCodeAt(l + 1)) {\n                    case 235:\n                      b = 47;\n                      break;\n\n                    case 220:\n                      t = l, b = 42;\n                  }\n\n                  break;\n\n                case 42:\n                  47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);\n              }\n          }\n\n          0 === b && (f += y);\n      }\n\n      K = x;\n      x = g;\n      l++;\n    }\n\n    t = p.length;\n\n    if (0 < t) {\n      r = c;\n      if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;\n      p = r.join(',') + '{' + p + '}';\n\n      if (0 !== w * E) {\n        2 !== w || L(p, 2) || (E = 0);\n\n        switch (E) {\n          case 111:\n            p = p.replace(ha, ':-moz-$1') + p;\n            break;\n\n          case 112:\n            p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;\n        }\n\n        E = 0;\n      }\n    }\n\n    return G + p + F;\n  }\n\n  function X(d, c, e) {\n    var h = c.trim().split(ia);\n    c = h;\n    var a = h.length,\n        m = d.length;\n\n    switch (m) {\n      case 0:\n      case 1:\n        var b = 0;\n\n        for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {\n          c[b] = Z(d, c[b], e).trim();\n        }\n\n        break;\n\n      default:\n        var v = b = 0;\n\n        for (c = []; b < a; ++b) {\n          for (var n = 0; n < m; ++n) {\n            c[v++] = Z(d[n] + ' ', h[b], e).trim();\n          }\n        }\n\n    }\n\n    return c;\n  }\n\n  function Z(d, c, e) {\n    var h = c.charCodeAt(0);\n    33 > h && (h = (c = c.trim()).charCodeAt(0));\n\n    switch (h) {\n      case 38:\n        return c.replace(F, '$1' + d.trim());\n\n      case 58:\n        return d.trim() + c.replace(F, '$1' + d.trim());\n\n      default:\n        if (0 < 1 * e && 0 < c.indexOf('\\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());\n    }\n\n    return d + c;\n  }\n\n  function P(d, c, e, h) {\n    var a = d + ';',\n        m = 2 * c + 3 * e + 4 * h;\n\n    if (944 === m) {\n      d = a.indexOf(':', 9) + 1;\n      var b = a.substring(d, a.length - 1).trim();\n      b = a.substring(0, d).trim() + b + ';';\n      return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;\n    }\n\n    if (0 === w || 2 === w && !L(a, 1)) return a;\n\n    switch (m) {\n      case 1015:\n        return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;\n\n      case 951:\n        return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;\n\n      case 963:\n        return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;\n\n      case 1009:\n        if (100 !== a.charCodeAt(4)) break;\n\n      case 969:\n      case 942:\n        return '-webkit-' + a + a;\n\n      case 978:\n        return '-webkit-' + a + '-moz-' + a + a;\n\n      case 1019:\n      case 983:\n        return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;\n\n      case 883:\n        if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;\n        if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;\n        break;\n\n      case 932:\n        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {\n          case 103:\n            return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;\n\n          case 115:\n            return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;\n\n          case 98:\n            return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;\n        }\n        return '-webkit-' + a + '-ms-' + a + a;\n\n      case 964:\n        return '-webkit-' + a + '-ms-flex-' + a + a;\n\n      case 1023:\n        if (99 !== a.charCodeAt(8)) break;\n        b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');\n        return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;\n\n      case 1005:\n        return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;\n\n      case 1e3:\n        b = a.substring(13).trim();\n        c = b.indexOf('-') + 1;\n\n        switch (b.charCodeAt(0) + b.charCodeAt(c)) {\n          case 226:\n            b = a.replace(G, 'tb');\n            break;\n\n          case 232:\n            b = a.replace(G, 'tb-rl');\n            break;\n\n          case 220:\n            b = a.replace(G, 'lr');\n            break;\n\n          default:\n            return a;\n        }\n\n        return '-webkit-' + a + '-ms-' + b + a;\n\n      case 1017:\n        if (-1 === a.indexOf('sticky', 9)) break;\n\n      case 975:\n        c = (a = d).length - 10;\n        b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();\n\n        switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {\n          case 203:\n            if (111 > b.charCodeAt(8)) break;\n\n          case 115:\n            a = a.replace(b, '-webkit-' + b) + ';' + a;\n            break;\n\n          case 207:\n          case 102:\n            a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;\n        }\n\n        return a + ';';\n\n      case 938:\n        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {\n          case 105:\n            return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;\n\n          case 115:\n            return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;\n\n          default:\n            return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;\n        }\n        break;\n\n      case 973:\n      case 989:\n        if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;\n\n      case 931:\n      case 953:\n        if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;\n        break;\n\n      case 962:\n        if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;\n    }\n\n    return a;\n  }\n\n  function L(d, c) {\n    var e = d.indexOf(1 === c ? ':' : '{'),\n        h = d.substring(0, 3 !== c ? e : 10);\n    e = d.substring(e + 1, d.length - 1);\n    return R(2 !== c ? h : h.replace(na, '$1'), e, c);\n  }\n\n  function ea(d, c) {\n    var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));\n    return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';\n  }\n\n  function H(d, c, e, h, a, m, b, v, n, q) {\n    for (var g = 0, x = c, w; g < A; ++g) {\n      switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {\n        case void 0:\n        case !1:\n        case !0:\n        case null:\n          break;\n\n        default:\n          x = w;\n      }\n    }\n\n    if (x !== c) return x;\n  }\n\n  function T(d) {\n    switch (d) {\n      case void 0:\n      case null:\n        A = S.length = 0;\n        break;\n\n      default:\n        if ('function' === typeof d) S[A++] = d;else if ('object' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {\n          T(d[c]);\n        } else Y = !!d | 0;\n    }\n\n    return T;\n  }\n\n  function U(d) {\n    d = d.prefix;\n    void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);\n    return U;\n  }\n\n  function B(d, c) {\n    var e = d;\n    33 > e.charCodeAt(0) && (e = e.trim());\n    V = e;\n    e = [V];\n\n    if (0 < A) {\n      var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);\n      void 0 !== h && 'string' === typeof h && (c = h);\n    }\n\n    var a = M(O, e, c, 0, 0);\n    0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));\n    V = '';\n    E = 0;\n    z = D = 1;\n    return a;\n  }\n\n  var ca = /^\\0+/g,\n      N = /[\\0\\r\\f]/g,\n      aa = /: */g,\n      ka = /zoo|gra/,\n      ma = /([,: ])(transform)/g,\n      ia = /,\\r+?/g,\n      F = /([\\t\\r\\n ])*\\f?&/g,\n      fa = /@(k\\w+)\\s*(\\S*)\\s*/,\n      Q = /::(place)/g,\n      ha = /:(read-only)/g,\n      G = /[svh]\\w+-[tblr]{2}/,\n      da = /\\(\\s*(.*)\\s*\\)/g,\n      oa = /([\\s\\S]*?);/g,\n      ba = /-self|flex-/g,\n      na = /[^]*?(:[rp][el]a[\\w-]+)[^]*/,\n      la = /stretch|:\\s*\\w+\\-(?:conte|avail)/,\n      ja = /([^-])(image-set\\()/,\n      z = 1,\n      D = 1,\n      E = 0,\n      w = 1,\n      O = [],\n      S = [],\n      A = 0,\n      R = null,\n      Y = 0,\n      V = '';\n  B.use = T;\n  B.set = U;\n  void 0 !== W && U(W);\n  return B;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (stylis_min);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@emotion/stylis/dist/stylis.browser.esm.js\n"));

/***/ }),

/***/ "./node_modules/@emotion/unitless/dist/unitless.browser.esm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@emotion/unitless/dist/unitless.browser.esm.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nvar unitlessKeys = {\n  animationIterationCount: 1,\n  borderImageOutset: 1,\n  borderImageSlice: 1,\n  borderImageWidth: 1,\n  boxFlex: 1,\n  boxFlexGroup: 1,\n  boxOrdinalGroup: 1,\n  columnCount: 1,\n  columns: 1,\n  flex: 1,\n  flexGrow: 1,\n  flexPositive: 1,\n  flexShrink: 1,\n  flexNegative: 1,\n  flexOrder: 1,\n  gridRow: 1,\n  gridRowEnd: 1,\n  gridRowSpan: 1,\n  gridRowStart: 1,\n  gridColumn: 1,\n  gridColumnEnd: 1,\n  gridColumnSpan: 1,\n  gridColumnStart: 1,\n  msGridRow: 1,\n  msGridRowSpan: 1,\n  msGridColumn: 1,\n  msGridColumnSpan: 1,\n  fontWeight: 1,\n  lineHeight: 1,\n  opacity: 1,\n  order: 1,\n  orphans: 1,\n  tabSize: 1,\n  widows: 1,\n  zIndex: 1,\n  zoom: 1,\n  WebkitLineClamp: 1,\n  // SVG-related properties\n  fillOpacity: 1,\n  floodOpacity: 1,\n  stopOpacity: 1,\n  strokeDasharray: 1,\n  strokeDashoffset: 1,\n  strokeMiterlimit: 1,\n  strokeOpacity: 1,\n  strokeWidth: 1\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (unitlessKeys);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC91bml0bGVzcy5icm93c2VyLmVzbS5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtEQUFlLFlBQVksRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC91bml0bGVzcy5icm93c2VyLmVzbS5qcz8yNWMyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBib3JkZXJJbWFnZU91dHNldDogMSxcbiAgYm9yZGVySW1hZ2VTbGljZTogMSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogMSxcbiAgYm94RmxleDogMSxcbiAgYm94RmxleEdyb3VwOiAxLFxuICBib3hPcmRpbmFsR3JvdXA6IDEsXG4gIGNvbHVtbkNvdW50OiAxLFxuICBjb2x1bW5zOiAxLFxuICBmbGV4OiAxLFxuICBmbGV4R3JvdzogMSxcbiAgZmxleFBvc2l0aXZlOiAxLFxuICBmbGV4U2hyaW5rOiAxLFxuICBmbGV4TmVnYXRpdmU6IDEsXG4gIGZsZXhPcmRlcjogMSxcbiAgZ3JpZFJvdzogMSxcbiAgZ3JpZFJvd0VuZDogMSxcbiAgZ3JpZFJvd1NwYW46IDEsXG4gIGdyaWRSb3dTdGFydDogMSxcbiAgZ3JpZENvbHVtbjogMSxcbiAgZ3JpZENvbHVtbkVuZDogMSxcbiAgZ3JpZENvbHVtblNwYW46IDEsXG4gIGdyaWRDb2x1bW5TdGFydDogMSxcbiAgbXNHcmlkUm93OiAxLFxuICBtc0dyaWRSb3dTcGFuOiAxLFxuICBtc0dyaWRDb2x1bW46IDEsXG4gIG1zR3JpZENvbHVtblNwYW46IDEsXG4gIGZvbnRXZWlnaHQ6IDEsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG9wYWNpdHk6IDEsXG4gIG9yZGVyOiAxLFxuICBvcnBoYW5zOiAxLFxuICB0YWJTaXplOiAxLFxuICB3aWRvd3M6IDEsXG4gIHpJbmRleDogMSxcbiAgem9vbTogMSxcbiAgV2Via2l0TGluZUNsYW1wOiAxLFxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiAxLFxuICBmbG9vZE9wYWNpdHk6IDEsXG4gIHN0b3BPcGFjaXR5OiAxLFxuICBzdHJva2VEYXNoYXJyYXk6IDEsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IDEsXG4gIHN0cm9rZU1pdGVybGltaXQ6IDEsXG4gIHN0cm9rZU9wYWNpdHk6IDEsXG4gIHN0cm9rZVdpZHRoOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCB1bml0bGVzc0tleXM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@emotion/unitless/dist/unitless.browser.esm.js\n"));

/***/ }),

/***/ "./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js ***!
  \**********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar reactIs = __webpack_require__(/*! react-is */ \"./node_modules/react-is/index.js\");\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLGtEQUFVOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7O0FBR0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG9CQUFvQixpQkFBaUI7QUFDckM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzPzkxZGIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\n"));

/***/ }),

/***/ "./node_modules/mobx-react-lite/es/ObserverComponent.js":
/*!**************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/ObserverComponent.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Observer: function() { return /* binding */ ObserverComponent; }\n/* harmony export */ });\n/* harmony import */ var _useObserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useObserver */ \"./node_modules/mobx-react-lite/es/useObserver.js\");\n\nfunction ObserverComponent(_a) {\n    var children = _a.children, render = _a.render;\n    var component = children || render;\n    if (typeof component !== \"function\") {\n        return null;\n    }\n    return (0,_useObserver__WEBPACK_IMPORTED_MODULE_0__.useObserver)(component);\n}\nif (true) {\n    ObserverComponent.propTypes = {\n        children: ObserverPropsCheck,\n        render: ObserverPropsCheck\n    };\n}\nObserverComponent.displayName = \"Observer\";\n\nfunction ObserverPropsCheck(props, key, componentName, location, propFullName) {\n    var extraKey = key === \"children\" ? \"render\" : \"children\";\n    var hasProp = typeof props[key] === \"function\";\n    var hasExtraProp = typeof props[extraKey] === \"function\";\n    if (hasProp && hasExtraProp) {\n        return new Error(\"MobX Observer: Do not use children and render in the same time in`\" + componentName);\n    }\n    if (hasProp || hasExtraProp) {\n        return null;\n    }\n    return new Error(\"Invalid prop `\" +\n        propFullName +\n        \"` of type `\" +\n        typeof props[key] +\n        \"` supplied to\" +\n        \" `\" +\n        componentName +\n        \"`, expected `function`.\");\n}\n//# sourceMappingURL=ObserverComponent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL09ic2VydmVyQ29tcG9uZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcseURBQVc7QUFDdEI7QUFDQSxJQUFJLElBQXFDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tb2J4LXJlYWN0LWxpdGUvZXMvT2JzZXJ2ZXJDb21wb25lbnQuanM/MGYwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VPYnNlcnZlciB9IGZyb20gXCIuL3VzZU9ic2VydmVyXCI7XG5mdW5jdGlvbiBPYnNlcnZlckNvbXBvbmVudChfYSkge1xuICAgIHZhciBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCByZW5kZXIgPSBfYS5yZW5kZXI7XG4gICAgdmFyIGNvbXBvbmVudCA9IGNoaWxkcmVuIHx8IHJlbmRlcjtcbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdXNlT2JzZXJ2ZXIoY29tcG9uZW50KTtcbn1cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICBPYnNlcnZlckNvbXBvbmVudC5wcm9wVHlwZXMgPSB7XG4gICAgICAgIGNoaWxkcmVuOiBPYnNlcnZlclByb3BzQ2hlY2ssXG4gICAgICAgIHJlbmRlcjogT2JzZXJ2ZXJQcm9wc0NoZWNrXG4gICAgfTtcbn1cbk9ic2VydmVyQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gXCJPYnNlcnZlclwiO1xuZXhwb3J0IHsgT2JzZXJ2ZXJDb21wb25lbnQgYXMgT2JzZXJ2ZXIgfTtcbmZ1bmN0aW9uIE9ic2VydmVyUHJvcHNDaGVjayhwcm9wcywga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIGV4dHJhS2V5ID0ga2V5ID09PSBcImNoaWxkcmVuXCIgPyBcInJlbmRlclwiIDogXCJjaGlsZHJlblwiO1xuICAgIHZhciBoYXNQcm9wID0gdHlwZW9mIHByb3BzW2tleV0gPT09IFwiZnVuY3Rpb25cIjtcbiAgICB2YXIgaGFzRXh0cmFQcm9wID0gdHlwZW9mIHByb3BzW2V4dHJhS2V5XSA9PT0gXCJmdW5jdGlvblwiO1xuICAgIGlmIChoYXNQcm9wICYmIGhhc0V4dHJhUHJvcCkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiTW9iWCBPYnNlcnZlcjogRG8gbm90IHVzZSBjaGlsZHJlbiBhbmQgcmVuZGVyIGluIHRoZSBzYW1lIHRpbWUgaW5gXCIgKyBjb21wb25lbnROYW1lKTtcbiAgICB9XG4gICAgaWYgKGhhc1Byb3AgfHwgaGFzRXh0cmFQcm9wKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wIGBcIiArXG4gICAgICAgIHByb3BGdWxsTmFtZSArXG4gICAgICAgIFwiYCBvZiB0eXBlIGBcIiArXG4gICAgICAgIHR5cGVvZiBwcm9wc1trZXldICtcbiAgICAgICAgXCJgIHN1cHBsaWVkIHRvXCIgK1xuICAgICAgICBcIiBgXCIgK1xuICAgICAgICBjb21wb25lbnROYW1lICtcbiAgICAgICAgXCJgLCBleHBlY3RlZCBgZnVuY3Rpb25gLlwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmVyQ29tcG9uZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/mobx-react-lite/es/ObserverComponent.js\n"));

/***/ }),

/***/ "./node_modules/mobx-react-lite/es/index.js":
/*!**************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Observer: function() { return /* reexport safe */ _ObserverComponent__WEBPACK_IMPORTED_MODULE_8__.Observer; },\n/* harmony export */   clearTimers: function() { return /* binding */ clearTimers; },\n/* harmony export */   enableStaticRendering: function() { return /* reexport safe */ _staticRendering__WEBPACK_IMPORTED_MODULE_5__.enableStaticRendering; },\n/* harmony export */   isObserverBatched: function() { return /* reexport safe */ _utils_observerBatching__WEBPACK_IMPORTED_MODULE_2__.isObserverBatched; },\n/* harmony export */   isUsingStaticRendering: function() { return /* reexport safe */ _staticRendering__WEBPACK_IMPORTED_MODULE_5__.isUsingStaticRendering; },\n/* harmony export */   observer: function() { return /* reexport safe */ _observer__WEBPACK_IMPORTED_MODULE_7__.observer; },\n/* harmony export */   observerBatching: function() { return /* reexport safe */ _utils_observerBatching__WEBPACK_IMPORTED_MODULE_2__.observerBatching; },\n/* harmony export */   useAsObservableSource: function() { return /* reexport safe */ _useAsObservableSource__WEBPACK_IMPORTED_MODULE_11__.useAsObservableSource; },\n/* harmony export */   useLocalObservable: function() { return /* reexport safe */ _useLocalObservable__WEBPACK_IMPORTED_MODULE_9__.useLocalObservable; },\n/* harmony export */   useLocalStore: function() { return /* reexport safe */ _useLocalStore__WEBPACK_IMPORTED_MODULE_10__.useLocalStore; },\n/* harmony export */   useObserver: function() { return /* binding */ useObserver; },\n/* harmony export */   useStaticRendering: function() { return /* binding */ useStaticRendering; }\n/* harmony export */ });\n/* harmony import */ var _utils_assertEnvironment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/assertEnvironment */ \"./node_modules/mobx-react-lite/es/utils/assertEnvironment.js\");\n/* harmony import */ var _utils_reactBatchedUpdates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/reactBatchedUpdates */ \"./node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js\");\n/* harmony import */ var _utils_observerBatching__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/observerBatching */ \"./node_modules/mobx-react-lite/es/utils/observerBatching.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/utils */ \"./node_modules/mobx-react-lite/es/utils/utils.js\");\n/* harmony import */ var _useObserver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useObserver */ \"./node_modules/mobx-react-lite/es/useObserver.js\");\n/* harmony import */ var _staticRendering__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./staticRendering */ \"./node_modules/mobx-react-lite/es/staticRendering.js\");\n/* harmony import */ var _utils_observerFinalizationRegistry__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/observerFinalizationRegistry */ \"./node_modules/mobx-react-lite/es/utils/observerFinalizationRegistry.js\");\n/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./observer */ \"./node_modules/mobx-react-lite/es/observer.js\");\n/* harmony import */ var _ObserverComponent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ObserverComponent */ \"./node_modules/mobx-react-lite/es/ObserverComponent.js\");\n/* harmony import */ var _useLocalObservable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./useLocalObservable */ \"./node_modules/mobx-react-lite/es/useLocalObservable.js\");\n/* harmony import */ var _useLocalStore__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./useLocalStore */ \"./node_modules/mobx-react-lite/es/useLocalStore.js\");\n/* harmony import */ var _useAsObservableSource__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./useAsObservableSource */ \"./node_modules/mobx-react-lite/es/useAsObservableSource.js\");\nvar _a;\n\n\n\n\n\n\n\n(0,_utils_observerBatching__WEBPACK_IMPORTED_MODULE_2__.observerBatching)(_utils_reactBatchedUpdates__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates);\n\n\n\n\n\n\nvar clearTimers = (_a = _utils_observerFinalizationRegistry__WEBPACK_IMPORTED_MODULE_6__.observerFinalizationRegistry[\"finalizeAllImmediately\"]) !== null && _a !== void 0 ? _a : (function () { });\nfunction useObserver(fn, baseComponentName) {\n    if (baseComponentName === void 0) { baseComponentName = \"observed\"; }\n    if (true) {\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.useDeprecated)(\"[mobx-react-lite] 'useObserver(fn)' is deprecated. Use `<Observer>{fn}</Observer>` instead, or wrap the entire component in `observer`.\");\n    }\n    return (0,_useObserver__WEBPACK_IMPORTED_MODULE_4__.useObserver)(fn, baseComponentName);\n}\n\nfunction useStaticRendering(enable) {\n    if (true) {\n        console.warn(\"[mobx-react-lite] 'useStaticRendering' is deprecated, use 'enableStaticRendering' instead\");\n    }\n    (0,_staticRendering__WEBPACK_IMPORTED_MODULE_5__.enableStaticRendering)(enable);\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ21DO0FBQzRDO0FBQ25CO0FBQ2Q7QUFDcUI7QUFDVDtBQUMwQjtBQUNwRix5RUFBZ0IsQ0FBQywrRUFBSztBQUM0RDtBQUM1QztBQUNTO0FBQ1c7QUFDVjtBQUNnQjtBQUN6RCx3QkFBd0IsNkZBQTRCLDZFQUE2RTtBQUNqSTtBQUNQLHdDQUF3QztBQUN4QyxRQUFRLElBQXFDO0FBQzdDLFFBQVEsMkRBQWEscUVBQXFFLEdBQUc7QUFDN0Y7QUFDQSxXQUFXLHlEQUFtQjtBQUM5QjtBQUMrRTtBQUN4RTtBQUNQLFFBQVEsSUFBcUM7QUFDN0M7QUFDQTtBQUNBLElBQUksdUVBQXFCO0FBQ3pCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21vYngtcmVhY3QtbGl0ZS9lcy9pbmRleC5qcz81NzM4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfYTtcbmltcG9ydCBcIi4vdXRpbHMvYXNzZXJ0RW52aXJvbm1lbnRcIjtcbmltcG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIGFzIGJhdGNoIH0gZnJvbSBcIi4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlc1wiO1xuaW1wb3J0IHsgb2JzZXJ2ZXJCYXRjaGluZyB9IGZyb20gXCIuL3V0aWxzL29ic2VydmVyQmF0Y2hpbmdcIjtcbmltcG9ydCB7IHVzZURlcHJlY2F0ZWQgfSBmcm9tIFwiLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IHsgdXNlT2JzZXJ2ZXIgYXMgdXNlT2JzZXJ2ZXJPcmlnaW5hbCB9IGZyb20gXCIuL3VzZU9ic2VydmVyXCI7XG5pbXBvcnQgeyBlbmFibGVTdGF0aWNSZW5kZXJpbmcgfSBmcm9tIFwiLi9zdGF0aWNSZW5kZXJpbmdcIjtcbmltcG9ydCB7IG9ic2VydmVyRmluYWxpemF0aW9uUmVnaXN0cnkgfSBmcm9tIFwiLi91dGlscy9vYnNlcnZlckZpbmFsaXphdGlvblJlZ2lzdHJ5XCI7XG5vYnNlcnZlckJhdGNoaW5nKGJhdGNoKTtcbmV4cG9ydCB7IGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcsIGVuYWJsZVN0YXRpY1JlbmRlcmluZyB9IGZyb20gXCIuL3N0YXRpY1JlbmRlcmluZ1wiO1xuZXhwb3J0IHsgb2JzZXJ2ZXIgfSBmcm9tIFwiLi9vYnNlcnZlclwiO1xuZXhwb3J0IHsgT2JzZXJ2ZXIgfSBmcm9tIFwiLi9PYnNlcnZlckNvbXBvbmVudFwiO1xuZXhwb3J0IHsgdXNlTG9jYWxPYnNlcnZhYmxlIH0gZnJvbSBcIi4vdXNlTG9jYWxPYnNlcnZhYmxlXCI7XG5leHBvcnQgeyB1c2VMb2NhbFN0b3JlIH0gZnJvbSBcIi4vdXNlTG9jYWxTdG9yZVwiO1xuZXhwb3J0IHsgdXNlQXNPYnNlcnZhYmxlU291cmNlIH0gZnJvbSBcIi4vdXNlQXNPYnNlcnZhYmxlU291cmNlXCI7XG5leHBvcnQgdmFyIGNsZWFyVGltZXJzID0gKF9hID0gb2JzZXJ2ZXJGaW5hbGl6YXRpb25SZWdpc3RyeVtcImZpbmFsaXplQWxsSW1tZWRpYXRlbHlcIl0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChmdW5jdGlvbiAoKSB7IH0pO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU9ic2VydmVyKGZuLCBiYXNlQ29tcG9uZW50TmFtZSkge1xuICAgIGlmIChiYXNlQ29tcG9uZW50TmFtZSA9PT0gdm9pZCAwKSB7IGJhc2VDb21wb25lbnROYW1lID0gXCJvYnNlcnZlZFwiOyB9XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICB1c2VEZXByZWNhdGVkKFwiW21vYngtcmVhY3QtbGl0ZV0gJ3VzZU9ic2VydmVyKGZuKScgaXMgZGVwcmVjYXRlZC4gVXNlIGA8T2JzZXJ2ZXI+e2ZufTwvT2JzZXJ2ZXI+YCBpbnN0ZWFkLCBvciB3cmFwIHRoZSBlbnRpcmUgY29tcG9uZW50IGluIGBvYnNlcnZlcmAuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdXNlT2JzZXJ2ZXJPcmlnaW5hbChmbiwgYmFzZUNvbXBvbmVudE5hbWUpO1xufVxuZXhwb3J0IHsgaXNPYnNlcnZlckJhdGNoZWQsIG9ic2VydmVyQmF0Y2hpbmcgfSBmcm9tIFwiLi91dGlscy9vYnNlcnZlckJhdGNoaW5nXCI7XG5leHBvcnQgZnVuY3Rpb24gdXNlU3RhdGljUmVuZGVyaW5nKGVuYWJsZSkge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiW21vYngtcmVhY3QtbGl0ZV0gJ3VzZVN0YXRpY1JlbmRlcmluZycgaXMgZGVwcmVjYXRlZCwgdXNlICdlbmFibGVTdGF0aWNSZW5kZXJpbmcnIGluc3RlYWRcIik7XG4gICAgfVxuICAgIGVuYWJsZVN0YXRpY1JlbmRlcmluZyhlbmFibGUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/mobx-react-lite/es/index.js\n"));

/***/ }),

/***/ "./node_modules/mobx-react-lite/es/observer.js":
/*!*****************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/observer.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   observer: function() { return /* binding */ observer; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _staticRendering__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./staticRendering */ \"./node_modules/mobx-react-lite/es/staticRendering.js\");\n/* harmony import */ var _useObserver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useObserver */ \"./node_modules/mobx-react-lite/es/useObserver.js\");\n\n\n\nvar warnObserverOptionsDeprecated = true;\nvar hasSymbol = typeof Symbol === \"function\" && Symbol.for;\n// Using react-is had some issues (and operates on elements, not on types), see #608 / #609\nvar ReactForwardRefSymbol = hasSymbol\n    ? Symbol.for(\"react.forward_ref\")\n    : typeof react__WEBPACK_IMPORTED_MODULE_0__.forwardRef === \"function\" && (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (props) { return null; })[\"$$typeof\"];\nvar ReactMemoSymbol = hasSymbol\n    ? Symbol.for(\"react.memo\")\n    : typeof react__WEBPACK_IMPORTED_MODULE_0__.memo === \"function\" && (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(function (props) { return null; })[\"$$typeof\"];\n// n.b. base case is not used for actual typings or exported in the typing files\nfunction observer(baseComponent, \n// TODO remove in next major\noptions) {\n    var _a;\n    if ( true && warnObserverOptionsDeprecated && options) {\n        warnObserverOptionsDeprecated = false;\n        console.warn(\"[mobx-react-lite] `observer(fn, { forwardRef: true })` is deprecated, use `observer(React.forwardRef(fn))`\");\n    }\n    if (ReactMemoSymbol && baseComponent[\"$$typeof\"] === ReactMemoSymbol) {\n        throw new Error(\"[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies 'React.memo' for you.\");\n    }\n    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n    if ((0,_staticRendering__WEBPACK_IMPORTED_MODULE_1__.isUsingStaticRendering)()) {\n        return baseComponent;\n    }\n    var useForwardRef = (_a = options === null || options === void 0 ? void 0 : options.forwardRef) !== null && _a !== void 0 ? _a : false;\n    var render = baseComponent;\n    var baseComponentName = baseComponent.displayName || baseComponent.name;\n    // If already wrapped with forwardRef, unwrap,\n    // so we can patch render and apply memo\n    if (ReactForwardRefSymbol && baseComponent[\"$$typeof\"] === ReactForwardRefSymbol) {\n        useForwardRef = true;\n        render = baseComponent[\"render\"];\n        if (typeof render !== \"function\") {\n            throw new Error(\"[mobx-react-lite] `render` property of ForwardRef was not a function\");\n        }\n    }\n    var observerComponent = function (props, ref) {\n        return (0,_useObserver__WEBPACK_IMPORTED_MODULE_2__.useObserver)(function () { return render(props, ref); }, baseComponentName);\n    };\n    // Don't set `displayName` for anonymous components,\n    // so the `displayName` can be customized by user, see #3192.\n    if (baseComponentName !== \"\") {\n        ;\n        observerComponent.displayName = baseComponentName;\n    }\n    // Support legacy context: `contextTypes` must be applied before `memo`\n    if (baseComponent.contextTypes) {\n        ;\n        observerComponent.contextTypes = baseComponent.contextTypes;\n    }\n    if (useForwardRef) {\n        // `forwardRef` must be applied prior `memo`\n        // `forwardRef(observer(cmp))` throws:\n        // \"forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))\"\n        observerComponent = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(observerComponent);\n    }\n    // memo; we are not interested in deep updates\n    // in props; we assume that if deep objects are changed,\n    // this is in observables, which would have been tracked anyway\n    observerComponent = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(observerComponent);\n    copyStaticProperties(baseComponent, observerComponent);\n    if (true) {\n        Object.defineProperty(observerComponent, \"contextTypes\", {\n            set: function () {\n                var _a;\n                throw new Error(\"[mobx-react-lite] `\".concat(this.displayName || ((_a = this.type) === null || _a === void 0 ? void 0 : _a.displayName) || \"Component\", \".contextTypes` must be set before applying `observer`.\"));\n            }\n        });\n    }\n    return observerComponent;\n}\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nvar hoistBlackList = {\n    $$typeof: true,\n    render: true,\n    compare: true,\n    type: true,\n    // Don't redefine `displayName`,\n    // it's defined as getter-setter pair on `memo` (see #3192).\n    displayName: true\n};\nfunction copyStaticProperties(base, target) {\n    Object.keys(base).forEach(function (key) {\n        if (!hoistBlackList[key]) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n        }\n    });\n}\n//# sourceMappingURL=observer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL29ic2VydmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXlDO0FBQ2tCO0FBQ2Y7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsNkNBQVUsbUJBQW1CLGlEQUFVLG9CQUFvQixjQUFjO0FBQ3RGO0FBQ0E7QUFDQSxhQUFhLHVDQUFJLG1CQUFtQiwyQ0FBSSxvQkFBb0IsY0FBYztBQUMxRTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsUUFBUSxLQUFxQztBQUM3QztBQUNBLHdEQUF3RCxrQkFBa0I7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsd0VBQXNCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUseURBQVcsZUFBZSw0QkFBNEI7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsaURBQVU7QUFDdEM7QUFDQSxhQUFhO0FBQ2IsaUJBQWlCO0FBQ2pCO0FBQ0Esd0JBQXdCLDJDQUFJO0FBQzVCO0FBQ0EsUUFBUSxJQUFxQztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tb2J4LXJlYWN0LWxpdGUvZXMvb2JzZXJ2ZXIuanM/YjZlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmb3J3YXJkUmVmLCBtZW1vIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBpc1VzaW5nU3RhdGljUmVuZGVyaW5nIH0gZnJvbSBcIi4vc3RhdGljUmVuZGVyaW5nXCI7XG5pbXBvcnQgeyB1c2VPYnNlcnZlciB9IGZyb20gXCIuL3VzZU9ic2VydmVyXCI7XG52YXIgd2Fybk9ic2VydmVyT3B0aW9uc0RlcHJlY2F0ZWQgPSB0cnVlO1xudmFyIGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuZm9yO1xuLy8gVXNpbmcgcmVhY3QtaXMgaGFkIHNvbWUgaXNzdWVzIChhbmQgb3BlcmF0ZXMgb24gZWxlbWVudHMsIG5vdCBvbiB0eXBlcyksIHNlZSAjNjA4IC8gIzYwOVxudmFyIFJlYWN0Rm9yd2FyZFJlZlN5bWJvbCA9IGhhc1N5bWJvbFxuICAgID8gU3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpXG4gICAgOiB0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJmdW5jdGlvblwiICYmIGZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzKSB7IHJldHVybiBudWxsOyB9KVtcIiQkdHlwZW9mXCJdO1xudmFyIFJlYWN0TWVtb1N5bWJvbCA9IGhhc1N5bWJvbFxuICAgID8gU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIilcbiAgICA6IHR5cGVvZiBtZW1vID09PSBcImZ1bmN0aW9uXCIgJiYgbWVtbyhmdW5jdGlvbiAocHJvcHMpIHsgcmV0dXJuIG51bGw7IH0pW1wiJCR0eXBlb2ZcIl07XG4vLyBuLmIuIGJhc2UgY2FzZSBpcyBub3QgdXNlZCBmb3IgYWN0dWFsIHR5cGluZ3Mgb3IgZXhwb3J0ZWQgaW4gdGhlIHR5cGluZyBmaWxlc1xuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmVyKGJhc2VDb21wb25lbnQsIFxuLy8gVE9ETyByZW1vdmUgaW4gbmV4dCBtYWpvclxub3B0aW9ucykge1xuICAgIHZhciBfYTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIHdhcm5PYnNlcnZlck9wdGlvbnNEZXByZWNhdGVkICYmIG9wdGlvbnMpIHtcbiAgICAgICAgd2Fybk9ic2VydmVyT3B0aW9uc0RlcHJlY2F0ZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc29sZS53YXJuKFwiW21vYngtcmVhY3QtbGl0ZV0gYG9ic2VydmVyKGZuLCB7IGZvcndhcmRSZWY6IHRydWUgfSlgIGlzIGRlcHJlY2F0ZWQsIHVzZSBgb2JzZXJ2ZXIoUmVhY3QuZm9yd2FyZFJlZihmbikpYFwiKTtcbiAgICB9XG4gICAgaWYgKFJlYWN0TWVtb1N5bWJvbCAmJiBiYXNlQ29tcG9uZW50W1wiJCR0eXBlb2ZcIl0gPT09IFJlYWN0TWVtb1N5bWJvbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbbW9ieC1yZWFjdC1saXRlXSBZb3UgYXJlIHRyeWluZyB0byB1c2UgYG9ic2VydmVyYCBvbiBhIGZ1bmN0aW9uIGNvbXBvbmVudCB3cmFwcGVkIGluIGVpdGhlciBhbm90aGVyIGBvYnNlcnZlcmAgb3IgYFJlYWN0Lm1lbW9gLiBUaGUgb2JzZXJ2ZXIgYWxyZWFkeSBhcHBsaWVzICdSZWFjdC5tZW1vJyBmb3IgeW91LlwiKTtcbiAgICB9XG4gICAgLy8gVGhlIHdvcmtpbmcgb2Ygb2JzZXJ2ZXIgaXMgZXhwbGFpbmVkIHN0ZXAgYnkgc3RlcCBpbiB0aGlzIHRhbGs6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Y1BGNGlCZWRvRjAmZmVhdHVyZT15b3V0dS5iZSZ0PTEzMDdcbiAgICBpZiAoaXNVc2luZ1N0YXRpY1JlbmRlcmluZygpKSB7XG4gICAgICAgIHJldHVybiBiYXNlQ29tcG9uZW50O1xuICAgIH1cbiAgICB2YXIgdXNlRm9yd2FyZFJlZiA9IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5mb3J3YXJkUmVmKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZTtcbiAgICB2YXIgcmVuZGVyID0gYmFzZUNvbXBvbmVudDtcbiAgICB2YXIgYmFzZUNvbXBvbmVudE5hbWUgPSBiYXNlQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IGJhc2VDb21wb25lbnQubmFtZTtcbiAgICAvLyBJZiBhbHJlYWR5IHdyYXBwZWQgd2l0aCBmb3J3YXJkUmVmLCB1bndyYXAsXG4gICAgLy8gc28gd2UgY2FuIHBhdGNoIHJlbmRlciBhbmQgYXBwbHkgbWVtb1xuICAgIGlmIChSZWFjdEZvcndhcmRSZWZTeW1ib2wgJiYgYmFzZUNvbXBvbmVudFtcIiQkdHlwZW9mXCJdID09PSBSZWFjdEZvcndhcmRSZWZTeW1ib2wpIHtcbiAgICAgICAgdXNlRm9yd2FyZFJlZiA9IHRydWU7XG4gICAgICAgIHJlbmRlciA9IGJhc2VDb21wb25lbnRbXCJyZW5kZXJcIl07XG4gICAgICAgIGlmICh0eXBlb2YgcmVuZGVyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlttb2J4LXJlYWN0LWxpdGVdIGByZW5kZXJgIHByb3BlcnR5IG9mIEZvcndhcmRSZWYgd2FzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBvYnNlcnZlckNvbXBvbmVudCA9IGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgICAgIHJldHVybiB1c2VPYnNlcnZlcihmdW5jdGlvbiAoKSB7IHJldHVybiByZW5kZXIocHJvcHMsIHJlZik7IH0sIGJhc2VDb21wb25lbnROYW1lKTtcbiAgICB9O1xuICAgIC8vIERvbid0IHNldCBgZGlzcGxheU5hbWVgIGZvciBhbm9ueW1vdXMgY29tcG9uZW50cyxcbiAgICAvLyBzbyB0aGUgYGRpc3BsYXlOYW1lYCBjYW4gYmUgY3VzdG9taXplZCBieSB1c2VyLCBzZWUgIzMxOTIuXG4gICAgaWYgKGJhc2VDb21wb25lbnROYW1lICE9PSBcIlwiKSB7XG4gICAgICAgIDtcbiAgICAgICAgb2JzZXJ2ZXJDb21wb25lbnQuZGlzcGxheU5hbWUgPSBiYXNlQ29tcG9uZW50TmFtZTtcbiAgICB9XG4gICAgLy8gU3VwcG9ydCBsZWdhY3kgY29udGV4dDogYGNvbnRleHRUeXBlc2AgbXVzdCBiZSBhcHBsaWVkIGJlZm9yZSBgbWVtb2BcbiAgICBpZiAoYmFzZUNvbXBvbmVudC5jb250ZXh0VHlwZXMpIHtcbiAgICAgICAgO1xuICAgICAgICBvYnNlcnZlckNvbXBvbmVudC5jb250ZXh0VHlwZXMgPSBiYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlcztcbiAgICB9XG4gICAgaWYgKHVzZUZvcndhcmRSZWYpIHtcbiAgICAgICAgLy8gYGZvcndhcmRSZWZgIG11c3QgYmUgYXBwbGllZCBwcmlvciBgbWVtb2BcbiAgICAgICAgLy8gYGZvcndhcmRSZWYob2JzZXJ2ZXIoY21wKSlgIHRocm93czpcbiAgICAgICAgLy8gXCJmb3J3YXJkUmVmIHJlcXVpcmVzIGEgcmVuZGVyIGZ1bmN0aW9uIGJ1dCByZWNlaXZlZCBhIGBtZW1vYCBjb21wb25lbnQuIEluc3RlYWQgb2YgZm9yd2FyZFJlZihtZW1vKC4uLikpLCB1c2UgbWVtbyhmb3J3YXJkUmVmKC4uLikpXCJcbiAgICAgICAgb2JzZXJ2ZXJDb21wb25lbnQgPSBmb3J3YXJkUmVmKG9ic2VydmVyQ29tcG9uZW50KTtcbiAgICB9XG4gICAgLy8gbWVtbzsgd2UgYXJlIG5vdCBpbnRlcmVzdGVkIGluIGRlZXAgdXBkYXRlc1xuICAgIC8vIGluIHByb3BzOyB3ZSBhc3N1bWUgdGhhdCBpZiBkZWVwIG9iamVjdHMgYXJlIGNoYW5nZWQsXG4gICAgLy8gdGhpcyBpcyBpbiBvYnNlcnZhYmxlcywgd2hpY2ggd291bGQgaGF2ZSBiZWVuIHRyYWNrZWQgYW55d2F5XG4gICAgb2JzZXJ2ZXJDb21wb25lbnQgPSBtZW1vKG9ic2VydmVyQ29tcG9uZW50KTtcbiAgICBjb3B5U3RhdGljUHJvcGVydGllcyhiYXNlQ29tcG9uZW50LCBvYnNlcnZlckNvbXBvbmVudCk7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JzZXJ2ZXJDb21wb25lbnQsIFwiY29udGV4dFR5cGVzXCIsIHtcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbbW9ieC1yZWFjdC1saXRlXSBgXCIuY29uY2F0KHRoaXMuZGlzcGxheU5hbWUgfHwgKChfYSA9IHRoaXMudHlwZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRpc3BsYXlOYW1lKSB8fCBcIkNvbXBvbmVudFwiLCBcIi5jb250ZXh0VHlwZXNgIG11c3QgYmUgc2V0IGJlZm9yZSBhcHBseWluZyBgb2JzZXJ2ZXJgLlwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gb2JzZXJ2ZXJDb21wb25lbnQ7XG59XG4vLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vbXJpZGd3YXkvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvYmxvYi9tYXN0ZXIvc3JjL2luZGV4LmpzXG52YXIgaG9pc3RCbGFja0xpc3QgPSB7XG4gICAgJCR0eXBlb2Y6IHRydWUsXG4gICAgcmVuZGVyOiB0cnVlLFxuICAgIGNvbXBhcmU6IHRydWUsXG4gICAgdHlwZTogdHJ1ZSxcbiAgICAvLyBEb24ndCByZWRlZmluZSBgZGlzcGxheU5hbWVgLFxuICAgIC8vIGl0J3MgZGVmaW5lZCBhcyBnZXR0ZXItc2V0dGVyIHBhaXIgb24gYG1lbW9gIChzZWUgIzMxOTIpLlxuICAgIGRpc3BsYXlOYW1lOiB0cnVlXG59O1xuZnVuY3Rpb24gY29weVN0YXRpY1Byb3BlcnRpZXMoYmFzZSwgdGFyZ2V0KSB7XG4gICAgT2JqZWN0LmtleXMoYmFzZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaG9pc3RCbGFja0xpc3Rba2V5XSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIGtleSkpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/mobx-react-lite/es/observer.js\n"));

/***/ }),

/***/ "./node_modules/mobx-react-lite/es/staticRendering.js":
/*!************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/staticRendering.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   enableStaticRendering: function() { return /* binding */ enableStaticRendering; },\n/* harmony export */   isUsingStaticRendering: function() { return /* binding */ isUsingStaticRendering; }\n/* harmony export */ });\nvar globalIsUsingStaticRendering = false;\nfunction enableStaticRendering(enable) {\n    globalIsUsingStaticRendering = enable;\n}\nfunction isUsingStaticRendering() {\n    return globalIsUsingStaticRendering;\n}\n//# sourceMappingURL=staticRendering.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL3N0YXRpY1JlbmRlcmluZy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21vYngtcmVhY3QtbGl0ZS9lcy9zdGF0aWNSZW5kZXJpbmcuanM/ZjJhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2xvYmFsSXNVc2luZ1N0YXRpY1JlbmRlcmluZyA9IGZhbHNlO1xuZXhwb3J0IGZ1bmN0aW9uIGVuYWJsZVN0YXRpY1JlbmRlcmluZyhlbmFibGUpIHtcbiAgICBnbG9iYWxJc1VzaW5nU3RhdGljUmVuZGVyaW5nID0gZW5hYmxlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcoKSB7XG4gICAgcmV0dXJuIGdsb2JhbElzVXNpbmdTdGF0aWNSZW5kZXJpbmc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0aWNSZW5kZXJpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/mobx-react-lite/es/staticRendering.js\n"));

/***/ }),

/***/ "./node_modules/mobx-react-lite/es/useAsObservableSource.js":
/*!******************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/useAsObservableSource.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAsObservableSource: function() { return /* binding */ useAsObservableSource; }\n/* harmony export */ });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/utils */ \"./node_modules/mobx-react-lite/es/utils/utils.js\");\n/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mobx */ \"./node_modules/mobx/dist/mobx.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n\n\n\nfunction useAsObservableSource(current) {\n    if (true)\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.useDeprecated)(\"[mobx-react-lite] 'useAsObservableSource' is deprecated, please store the values directly in an observable, for example by using 'useLocalObservable', and sync future updates using 'useEffect' when needed. See the README for examples.\");\n    var _a = __read((0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(function () { return (0,mobx__WEBPACK_IMPORTED_MODULE_2__.observable)(current, {}, { deep: false }); }), 1), res = _a[0];\n    (0,mobx__WEBPACK_IMPORTED_MODULE_2__.runInAction)(function () {\n        Object.assign(res, current);\n    });\n    return res;\n}\n//# sourceMappingURL=useAsObservableSource.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL3VzZUFzT2JzZXJ2YWJsZVNvdXJjZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLGNBQWMsU0FBSSxJQUFJLFNBQUk7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE1BQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQzhDO0FBQ0M7QUFDZDtBQUMxQjtBQUNQLFFBQVEsSUFBcUM7QUFDN0MsUUFBUSwyREFBYTtBQUNyQixvQkFBb0IsK0NBQVEsZUFBZSxPQUFPLGdEQUFVLFlBQVksSUFBSSxhQUFhLElBQUk7QUFDN0YsSUFBSSxpREFBVztBQUNmO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL3VzZUFzT2JzZXJ2YWJsZVNvdXJjZS5qcz81M2M2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbmltcG9ydCB7IHVzZURlcHJlY2F0ZWQgfSBmcm9tIFwiLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSwgcnVuSW5BY3Rpb24gfSBmcm9tIFwibW9ieFwiO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VBc09ic2VydmFibGVTb3VyY2UoY3VycmVudCkge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpXG4gICAgICAgIHVzZURlcHJlY2F0ZWQoXCJbbW9ieC1yZWFjdC1saXRlXSAndXNlQXNPYnNlcnZhYmxlU291cmNlJyBpcyBkZXByZWNhdGVkLCBwbGVhc2Ugc3RvcmUgdGhlIHZhbHVlcyBkaXJlY3RseSBpbiBhbiBvYnNlcnZhYmxlLCBmb3IgZXhhbXBsZSBieSB1c2luZyAndXNlTG9jYWxPYnNlcnZhYmxlJywgYW5kIHN5bmMgZnV0dXJlIHVwZGF0ZXMgdXNpbmcgJ3VzZUVmZmVjdCcgd2hlbiBuZWVkZWQuIFNlZSB0aGUgUkVBRE1FIGZvciBleGFtcGxlcy5cIik7XG4gICAgdmFyIF9hID0gX19yZWFkKHVzZVN0YXRlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9ic2VydmFibGUoY3VycmVudCwge30sIHsgZGVlcDogZmFsc2UgfSk7IH0pLCAxKSwgcmVzID0gX2FbMF07XG4gICAgcnVuSW5BY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICBPYmplY3QuYXNzaWduKHJlcywgY3VycmVudCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUFzT2JzZXJ2YWJsZVNvdXJjZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/mobx-react-lite/es/useAsObservableSource.js\n"));

/***/ }),

/***/ "./node_modules/mobx-react-lite/es/useLocalObservable.js":
/*!***************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/useLocalObservable.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useLocalObservable: function() { return /* binding */ useLocalObservable; }\n/* harmony export */ });\n/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mobx */ \"./node_modules/mobx/dist/mobx.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction useLocalObservable(initializer, annotations) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function () { return (0,mobx__WEBPACK_IMPORTED_MODULE_1__.observable)(initializer(), annotations, { autoBind: true }); })[0];\n}\n//# sourceMappingURL=useLocalObservable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL3VzZUxvY2FsT2JzZXJ2YWJsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWtDO0FBQ0Q7QUFDMUI7QUFDUCxXQUFXLCtDQUFRLGVBQWUsT0FBTyxnREFBVSwrQkFBK0IsZ0JBQWdCLElBQUk7QUFDdEc7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL3VzZUxvY2FsT2JzZXJ2YWJsZS5qcz82NWI4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9ic2VydmFibGUgfSBmcm9tIFwibW9ieFwiO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VMb2NhbE9ic2VydmFibGUoaW5pdGlhbGl6ZXIsIGFubm90YXRpb25zKSB7XG4gICAgcmV0dXJuIHVzZVN0YXRlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9ic2VydmFibGUoaW5pdGlhbGl6ZXIoKSwgYW5ub3RhdGlvbnMsIHsgYXV0b0JpbmQ6IHRydWUgfSk7IH0pWzBdO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlTG9jYWxPYnNlcnZhYmxlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/mobx-react-lite/es/useLocalObservable.js\n"));

/***/ }),

/***/ "./node_modules/mobx-react-lite/es/useLocalStore.js":
/*!**********************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/useLocalStore.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useLocalStore: function() { return /* binding */ useLocalStore; }\n/* harmony export */ });\n/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mobx */ \"./node_modules/mobx/dist/mobx.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/utils */ \"./node_modules/mobx-react-lite/es/utils/utils.js\");\n/* harmony import */ var _useAsObservableSource__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useAsObservableSource */ \"./node_modules/mobx-react-lite/es/useAsObservableSource.js\");\n\n\n\n\nfunction useLocalStore(initializer, current) {\n    if (true)\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.useDeprecated)(\"[mobx-react-lite] 'useLocalStore' is deprecated, use 'useLocalObservable' instead.\");\n    var source = current && (0,_useAsObservableSource__WEBPACK_IMPORTED_MODULE_2__.useAsObservableSource)(current);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function () { return (0,mobx__WEBPACK_IMPORTED_MODULE_3__.observable)(initializer(source), undefined, { autoBind: true }); })[0];\n}\n//# sourceMappingURL=useLocalStore.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL3VzZUxvY2FsU3RvcmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWtDO0FBQ0Q7QUFDYTtBQUNrQjtBQUN6RDtBQUNQLFFBQVEsSUFBcUM7QUFDN0MsUUFBUSwyREFBYTtBQUNyQiw0QkFBNEIsNkVBQXFCO0FBQ2pELFdBQVcsK0NBQVEsZUFBZSxPQUFPLGdEQUFVLG1DQUFtQyxnQkFBZ0IsSUFBSTtBQUMxRztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tb2J4LXJlYWN0LWxpdGUvZXMvdXNlTG9jYWxTdG9yZS5qcz9iNzFlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9ic2VydmFibGUgfSBmcm9tIFwibW9ieFwiO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZURlcHJlY2F0ZWQgfSBmcm9tIFwiLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IHsgdXNlQXNPYnNlcnZhYmxlU291cmNlIH0gZnJvbSBcIi4vdXNlQXNPYnNlcnZhYmxlU291cmNlXCI7XG5leHBvcnQgZnVuY3Rpb24gdXNlTG9jYWxTdG9yZShpbml0aWFsaXplciwgY3VycmVudCkge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpXG4gICAgICAgIHVzZURlcHJlY2F0ZWQoXCJbbW9ieC1yZWFjdC1saXRlXSAndXNlTG9jYWxTdG9yZScgaXMgZGVwcmVjYXRlZCwgdXNlICd1c2VMb2NhbE9ic2VydmFibGUnIGluc3RlYWQuXCIpO1xuICAgIHZhciBzb3VyY2UgPSBjdXJyZW50ICYmIHVzZUFzT2JzZXJ2YWJsZVNvdXJjZShjdXJyZW50KTtcbiAgICByZXR1cm4gdXNlU3RhdGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gb2JzZXJ2YWJsZShpbml0aWFsaXplcihzb3VyY2UpLCB1bmRlZmluZWQsIHsgYXV0b0JpbmQ6IHRydWUgfSk7IH0pWzBdO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlTG9jYWxTdG9yZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/mobx-react-lite/es/useLocalStore.js\n"));

/***/ }),

/***/ "./node_modules/mobx-react-lite/es/useObserver.js":
/*!********************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/useObserver.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useObserver: function() { return /* binding */ useObserver; }\n/* harmony export */ });\n/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! mobx */ \"./node_modules/mobx/dist/mobx.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_printDebugValue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/printDebugValue */ \"./node_modules/mobx-react-lite/es/utils/printDebugValue.js\");\n/* harmony import */ var _utils_observerFinalizationRegistry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/observerFinalizationRegistry */ \"./node_modules/mobx-react-lite/es/utils/observerFinalizationRegistry.js\");\n/* harmony import */ var _staticRendering__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./staticRendering */ \"./node_modules/mobx-react-lite/es/staticRendering.js\");\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n\n\n\n\n\nfunction observerComponentNameFor(baseComponentName) {\n    return \"observer\".concat(baseComponentName);\n}\n/**\n * We use class to make it easier to detect in heap snapshots by name\n */\nvar ObjectToBeRetainedByReact = /** @class */ (function () {\n    function ObjectToBeRetainedByReact() {\n    }\n    return ObjectToBeRetainedByReact;\n}());\nfunction objectToBeRetainedByReactFactory() {\n    return new ObjectToBeRetainedByReact();\n}\nfunction useObserver(fn, baseComponentName) {\n    if (baseComponentName === void 0) { baseComponentName = \"observed\"; }\n    if ((0,_staticRendering__WEBPACK_IMPORTED_MODULE_3__.isUsingStaticRendering)()) {\n        return fn();\n    }\n    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0___default().useState(objectToBeRetainedByReactFactory), 1), objectRetainedByReact = _a[0];\n    // Force update, see #2982\n    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0___default().useState(), 2), setState = _b[1];\n    var forceUpdate = function () { return setState([]); };\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    var admRef = react__WEBPACK_IMPORTED_MODULE_0___default().useRef(null);\n    if (!admRef.current) {\n        // First render\n        admRef.current = {\n            reaction: null,\n            mounted: false,\n            changedBeforeMount: false\n        };\n    }\n    var adm = admRef.current;\n    if (!adm.reaction) {\n        // First render or component was not committed and reaction was disposed by registry\n        adm.reaction = new mobx__WEBPACK_IMPORTED_MODULE_4__.Reaction(observerComponentNameFor(baseComponentName), function () {\n            // Observable has changed, meaning we want to re-render\n            // BUT if we're a component that hasn't yet got to the useEffect()\n            // stage, we might be a component that _started_ to render, but\n            // got dropped, and we don't want to make state changes then.\n            // (It triggers warnings in StrictMode, for a start.)\n            if (adm.mounted) {\n                // We have reached useEffect(), so we're mounted, and can trigger an update\n                forceUpdate();\n            }\n            else {\n                // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n                // when (and if) useEffect() arrives.\n                adm.changedBeforeMount = true;\n            }\n        });\n        _utils_observerFinalizationRegistry__WEBPACK_IMPORTED_MODULE_2__.observerFinalizationRegistry.register(objectRetainedByReact, adm, adm);\n    }\n    react__WEBPACK_IMPORTED_MODULE_0___default().useDebugValue(adm.reaction, _utils_printDebugValue__WEBPACK_IMPORTED_MODULE_1__.printDebugValue);\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function () {\n        _utils_observerFinalizationRegistry__WEBPACK_IMPORTED_MODULE_2__.observerFinalizationRegistry.unregister(adm);\n        adm.mounted = true;\n        if (adm.reaction) {\n            if (adm.changedBeforeMount) {\n                // Got a change before mount, force an update\n                adm.changedBeforeMount = false;\n                forceUpdate();\n            }\n        }\n        else {\n            // The reaction we set up in our render has been disposed.\n            // This can be due to bad timings of renderings, e.g. our\n            // component was paused for a _very_ long time, and our\n            // reaction got cleaned up\n            // Re-create the reaction\n            adm.reaction = new mobx__WEBPACK_IMPORTED_MODULE_4__.Reaction(observerComponentNameFor(baseComponentName), function () {\n                // We've definitely already been mounted at this point\n                forceUpdate();\n            });\n            forceUpdate();\n        }\n        return function () {\n            adm.reaction.dispose();\n            adm.reaction = null;\n            adm.mounted = false;\n            adm.changedBeforeMount = false;\n        };\n    }, []);\n    // render the original component, but have the\n    // reaction track the observables, so that rendering\n    // can be invalidated (see above) once a dependency changes\n    var rendering;\n    var exception;\n    adm.reaction.track(function () {\n        try {\n            rendering = fn();\n        }\n        catch (e) {\n            exception = e;\n        }\n    });\n    if (exception) {\n        throw exception; // re-throw any exceptions caught during rendering\n    }\n    return rendering;\n}\n//# sourceMappingURL=useObserver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/mobx-react-lite/es/useObserver.js\n"));

/***/ }),

/***/ "./node_modules/mobx-react-lite/es/utils/UniversalFinalizationRegistry.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/utils/UniversalFinalizationRegistry.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   REGISTRY_FINALIZE_AFTER: function() { return /* binding */ REGISTRY_FINALIZE_AFTER; },\n/* harmony export */   REGISTRY_SWEEP_INTERVAL: function() { return /* binding */ REGISTRY_SWEEP_INTERVAL; },\n/* harmony export */   TimerBasedFinalizationRegistry: function() { return /* binding */ TimerBasedFinalizationRegistry; },\n/* harmony export */   UniversalFinalizationRegistry: function() { return /* binding */ UniversalFinalizationRegistry; }\n/* harmony export */ });\nvar REGISTRY_FINALIZE_AFTER = 10000;\nvar REGISTRY_SWEEP_INTERVAL = 10000;\nvar TimerBasedFinalizationRegistry = /** @class */ (function () {\n    function TimerBasedFinalizationRegistry(finalize) {\n        var _this = this;\n        Object.defineProperty(this, \"finalize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: finalize\n        });\n        Object.defineProperty(this, \"registrations\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"sweepTimeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // Bound so it can be used directly as setTimeout callback.\n        Object.defineProperty(this, \"sweep\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: function (maxAge) {\n                if (maxAge === void 0) { maxAge = REGISTRY_FINALIZE_AFTER; }\n                // cancel timeout so we can force sweep anytime\n                clearTimeout(_this.sweepTimeout);\n                _this.sweepTimeout = undefined;\n                var now = Date.now();\n                _this.registrations.forEach(function (registration, token) {\n                    if (now - registration.registeredAt >= maxAge) {\n                        _this.finalize(registration.value);\n                        _this.registrations.delete(token);\n                    }\n                });\n                if (_this.registrations.size > 0) {\n                    _this.scheduleSweep();\n                }\n            }\n        });\n        // Bound so it can be exported directly as clearTimers test utility.\n        Object.defineProperty(this, \"finalizeAllImmediately\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: function () {\n                _this.sweep(0);\n            }\n        });\n    }\n    // Token is actually required with this impl\n    Object.defineProperty(TimerBasedFinalizationRegistry.prototype, \"register\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (target, value, token) {\n            this.registrations.set(token, {\n                value: value,\n                registeredAt: Date.now()\n            });\n            this.scheduleSweep();\n        }\n    });\n    Object.defineProperty(TimerBasedFinalizationRegistry.prototype, \"unregister\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (token) {\n            this.registrations.delete(token);\n        }\n    });\n    Object.defineProperty(TimerBasedFinalizationRegistry.prototype, \"scheduleSweep\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            if (this.sweepTimeout === undefined) {\n                this.sweepTimeout = setTimeout(this.sweep, REGISTRY_SWEEP_INTERVAL);\n            }\n        }\n    });\n    return TimerBasedFinalizationRegistry;\n}());\n\nvar UniversalFinalizationRegistry = typeof FinalizationRegistry !== \"undefined\"\n    ? FinalizationRegistry\n    : TimerBasedFinalizationRegistry;\n//# sourceMappingURL=UniversalFinalizationRegistry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL3V0aWxzL1VuaXZlcnNhbEZpbmFsaXphdGlvblJlZ2lzdHJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBTztBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUN5QztBQUNuQztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL3V0aWxzL1VuaXZlcnNhbEZpbmFsaXphdGlvblJlZ2lzdHJ5LmpzPzdlZTciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBSRUdJU1RSWV9GSU5BTElaRV9BRlRFUiA9IDEwMDAwO1xuZXhwb3J0IHZhciBSRUdJU1RSWV9TV0VFUF9JTlRFUlZBTCA9IDEwMDAwO1xudmFyIFRpbWVyQmFzZWRGaW5hbGl6YXRpb25SZWdpc3RyeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaW1lckJhc2VkRmluYWxpemF0aW9uUmVnaXN0cnkoZmluYWxpemUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZmluYWxpemVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGZpbmFsaXplXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJyZWdpc3RyYXRpb25zXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgTWFwKClcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInN3ZWVwVGltZW91dFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBCb3VuZCBzbyBpdCBjYW4gYmUgdXNlZCBkaXJlY3RseSBhcyBzZXRUaW1lb3V0IGNhbGxiYWNrLlxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzd2VlcFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKG1heEFnZSkge1xuICAgICAgICAgICAgICAgIGlmIChtYXhBZ2UgPT09IHZvaWQgMCkgeyBtYXhBZ2UgPSBSRUdJU1RSWV9GSU5BTElaRV9BRlRFUjsgfVxuICAgICAgICAgICAgICAgIC8vIGNhbmNlbCB0aW1lb3V0IHNvIHdlIGNhbiBmb3JjZSBzd2VlcCBhbnl0aW1lXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnN3ZWVwVGltZW91dCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuc3dlZXBUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgIF90aGlzLnJlZ2lzdHJhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAocmVnaXN0cmF0aW9uLCB0b2tlbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm93IC0gcmVnaXN0cmF0aW9uLnJlZ2lzdGVyZWRBdCA+PSBtYXhBZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmZpbmFsaXplKHJlZ2lzdHJhdGlvbi52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZWdpc3RyYXRpb25zLmRlbGV0ZSh0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMucmVnaXN0cmF0aW9ucy5zaXplID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zY2hlZHVsZVN3ZWVwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gQm91bmQgc28gaXQgY2FuIGJlIGV4cG9ydGVkIGRpcmVjdGx5IGFzIGNsZWFyVGltZXJzIHRlc3QgdXRpbGl0eS5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZmluYWxpemVBbGxJbW1lZGlhdGVseVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnN3ZWVwKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gVG9rZW4gaXMgYWN0dWFsbHkgcmVxdWlyZWQgd2l0aCB0aGlzIGltcGxcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGltZXJCYXNlZEZpbmFsaXphdGlvblJlZ2lzdHJ5LnByb3RvdHlwZSwgXCJyZWdpc3RlclwiLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHRhcmdldCwgdmFsdWUsIHRva2VuKSB7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdHJhdGlvbnMuc2V0KHRva2VuLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgIHJlZ2lzdGVyZWRBdDogRGF0ZS5ub3coKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlU3dlZXAoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUaW1lckJhc2VkRmluYWxpemF0aW9uUmVnaXN0cnkucHJvdG90eXBlLCBcInVucmVnaXN0ZXJcIiwge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RyYXRpb25zLmRlbGV0ZSh0b2tlbik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGltZXJCYXNlZEZpbmFsaXphdGlvblJlZ2lzdHJ5LnByb3RvdHlwZSwgXCJzY2hlZHVsZVN3ZWVwXCIsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zd2VlcFRpbWVvdXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3dlZXBUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLnN3ZWVwLCBSRUdJU1RSWV9TV0VFUF9JTlRFUlZBTCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gVGltZXJCYXNlZEZpbmFsaXphdGlvblJlZ2lzdHJ5O1xufSgpKTtcbmV4cG9ydCB7IFRpbWVyQmFzZWRGaW5hbGl6YXRpb25SZWdpc3RyeSB9O1xuZXhwb3J0IHZhciBVbml2ZXJzYWxGaW5hbGl6YXRpb25SZWdpc3RyeSA9IHR5cGVvZiBGaW5hbGl6YXRpb25SZWdpc3RyeSAhPT0gXCJ1bmRlZmluZWRcIlxuICAgID8gRmluYWxpemF0aW9uUmVnaXN0cnlcbiAgICA6IFRpbWVyQmFzZWRGaW5hbGl6YXRpb25SZWdpc3RyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuaXZlcnNhbEZpbmFsaXphdGlvblJlZ2lzdHJ5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/mobx-react-lite/es/utils/UniversalFinalizationRegistry.js\n"));

/***/ }),

/***/ "./node_modules/mobx-react-lite/es/utils/assertEnvironment.js":
/*!********************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/utils/assertEnvironment.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mobx */ \"./node_modules/mobx/dist/mobx.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nif (!react__WEBPACK_IMPORTED_MODULE_0__.useState) {\n    throw new Error(\"mobx-react-lite requires React with Hooks support\");\n}\nif (!mobx__WEBPACK_IMPORTED_MODULE_1__.makeObservable) {\n    throw new Error(\"mobx-react-lite@3 requires mobx at least version 6 to be available\");\n}\n//# sourceMappingURL=assertEnvironment.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL3V0aWxzL2Fzc2VydEVudmlyb25tZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBc0M7QUFDTDtBQUNqQyxLQUFLLDJDQUFRO0FBQ2I7QUFDQTtBQUNBLEtBQUssZ0RBQWM7QUFDbkI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tb2J4LXJlYWN0LWxpdGUvZXMvdXRpbHMvYXNzZXJ0RW52aXJvbm1lbnQuanM/NzUwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYWtlT2JzZXJ2YWJsZSB9IGZyb20gXCJtb2J4XCI7XG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaWYgKCF1c2VTdGF0ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIm1vYngtcmVhY3QtbGl0ZSByZXF1aXJlcyBSZWFjdCB3aXRoIEhvb2tzIHN1cHBvcnRcIik7XG59XG5pZiAoIW1ha2VPYnNlcnZhYmxlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwibW9ieC1yZWFjdC1saXRlQDMgcmVxdWlyZXMgbW9ieCBhdCBsZWFzdCB2ZXJzaW9uIDYgdG8gYmUgYXZhaWxhYmxlXCIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXNzZXJ0RW52aXJvbm1lbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/mobx-react-lite/es/utils/assertEnvironment.js\n"));

/***/ }),

/***/ "./node_modules/mobx-react-lite/es/utils/observerBatching.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/utils/observerBatching.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultNoopBatch: function() { return /* binding */ defaultNoopBatch; },\n/* harmony export */   isObserverBatched: function() { return /* binding */ isObserverBatched; },\n/* harmony export */   observerBatching: function() { return /* binding */ observerBatching; }\n/* harmony export */ });\n/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ \"./node_modules/mobx/dist/mobx.esm.js\");\n\nfunction defaultNoopBatch(callback) {\n    callback();\n}\nfunction observerBatching(reactionScheduler) {\n    if (!reactionScheduler) {\n        reactionScheduler = defaultNoopBatch;\n        if (true) {\n            console.warn(\"[MobX] Failed to get unstable_batched updates from react-dom / react-native\");\n        }\n    }\n    (0,mobx__WEBPACK_IMPORTED_MODULE_0__.configure)({ reactionScheduler: reactionScheduler });\n}\nvar isObserverBatched = function () {\n    if (true) {\n        console.warn(\"[MobX] Deprecated\");\n    }\n    return true;\n};\n//# sourceMappingURL=observerBatching.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL3V0aWxzL29ic2VydmVyQmF0Y2hpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpQztBQUMxQjtBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxZQUFZLElBQXFDO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLElBQUksK0NBQVMsR0FBRyxzQ0FBc0M7QUFDdEQ7QUFDTztBQUNQLFFBQVEsSUFBcUM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL3V0aWxzL29ic2VydmVyQmF0Y2hpbmcuanM/ODI1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25maWd1cmUgfSBmcm9tIFwibW9ieFwiO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHROb29wQmF0Y2goY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjaygpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmVyQmF0Y2hpbmcocmVhY3Rpb25TY2hlZHVsZXIpIHtcbiAgICBpZiAoIXJlYWN0aW9uU2NoZWR1bGVyKSB7XG4gICAgICAgIHJlYWN0aW9uU2NoZWR1bGVyID0gZGVmYXVsdE5vb3BCYXRjaDtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW01vYlhdIEZhaWxlZCB0byBnZXQgdW5zdGFibGVfYmF0Y2hlZCB1cGRhdGVzIGZyb20gcmVhY3QtZG9tIC8gcmVhY3QtbmF0aXZlXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbmZpZ3VyZSh7IHJlYWN0aW9uU2NoZWR1bGVyOiByZWFjdGlvblNjaGVkdWxlciB9KTtcbn1cbmV4cG9ydCB2YXIgaXNPYnNlcnZlckJhdGNoZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbTW9iWF0gRGVwcmVjYXRlZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2ZXJCYXRjaGluZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/mobx-react-lite/es/utils/observerBatching.js\n"));

/***/ }),

/***/ "./node_modules/mobx-react-lite/es/utils/observerFinalizationRegistry.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/utils/observerFinalizationRegistry.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   observerFinalizationRegistry: function() { return /* binding */ observerFinalizationRegistry; }\n/* harmony export */ });\n/* harmony import */ var _UniversalFinalizationRegistry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UniversalFinalizationRegistry */ \"./node_modules/mobx-react-lite/es/utils/UniversalFinalizationRegistry.js\");\n\nvar observerFinalizationRegistry = new _UniversalFinalizationRegistry__WEBPACK_IMPORTED_MODULE_0__.UniversalFinalizationRegistry(function (adm) {\n    var _a;\n    (_a = adm.reaction) === null || _a === void 0 ? void 0 : _a.dispose();\n    adm.reaction = null;\n});\n//# sourceMappingURL=observerFinalizationRegistry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL3V0aWxzL29ic2VydmVyRmluYWxpemF0aW9uUmVnaXN0cnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBZ0Y7QUFDekUsdUNBQXVDLHlGQUE2QjtBQUMzRTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21vYngtcmVhY3QtbGl0ZS9lcy91dGlscy9vYnNlcnZlckZpbmFsaXphdGlvblJlZ2lzdHJ5LmpzP2U0M2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVW5pdmVyc2FsRmluYWxpemF0aW9uUmVnaXN0cnkgfSBmcm9tIFwiLi9Vbml2ZXJzYWxGaW5hbGl6YXRpb25SZWdpc3RyeVwiO1xuZXhwb3J0IHZhciBvYnNlcnZlckZpbmFsaXphdGlvblJlZ2lzdHJ5ID0gbmV3IFVuaXZlcnNhbEZpbmFsaXphdGlvblJlZ2lzdHJ5KGZ1bmN0aW9uIChhZG0pIHtcbiAgICB2YXIgX2E7XG4gICAgKF9hID0gYWRtLnJlYWN0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGlzcG9zZSgpO1xuICAgIGFkbS5yZWFjdGlvbiA9IG51bGw7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmVyRmluYWxpemF0aW9uUmVnaXN0cnkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/mobx-react-lite/es/utils/observerFinalizationRegistry.js\n"));

/***/ }),

/***/ "./node_modules/mobx-react-lite/es/utils/printDebugValue.js":
/*!******************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/utils/printDebugValue.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   printDebugValue: function() { return /* binding */ printDebugValue; }\n/* harmony export */ });\n/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ \"./node_modules/mobx/dist/mobx.esm.js\");\n\nfunction printDebugValue(v) {\n    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.getDependencyTree)(v);\n}\n//# sourceMappingURL=printDebugValue.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL3V0aWxzL3ByaW50RGVidWdWYWx1ZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUNsQztBQUNQLFdBQVcsdURBQWlCO0FBQzVCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21vYngtcmVhY3QtbGl0ZS9lcy91dGlscy9wcmludERlYnVnVmFsdWUuanM/OGIxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXREZXBlbmRlbmN5VHJlZSB9IGZyb20gXCJtb2J4XCI7XG5leHBvcnQgZnVuY3Rpb24gcHJpbnREZWJ1Z1ZhbHVlKHYpIHtcbiAgICByZXR1cm4gZ2V0RGVwZW5kZW5jeVRyZWUodik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmludERlYnVnVmFsdWUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/mobx-react-lite/es/utils/printDebugValue.js\n"));

/***/ }),

/***/ "./node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   unstable_batchedUpdates: function() { return /* reexport safe */ react_dom__WEBPACK_IMPORTED_MODULE_0__.unstable_batchedUpdates; }\n/* harmony export */ });\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-dom */ \"./node_modules/react-dom/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_0__);\n\n//# sourceMappingURL=reactBatchedUpdates.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL3V0aWxzL3JlYWN0QmF0Y2hlZFVwZGF0ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9EO0FBQ3BEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tb2J4LXJlYWN0LWxpdGUvZXMvdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcy5qcz80NWVlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIH0gZnJvbSBcInJlYWN0LWRvbVwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3RCYXRjaGVkVXBkYXRlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js\n"));

/***/ }),

/***/ "./node_modules/mobx-react-lite/es/utils/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/utils/utils.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useDeprecated: function() { return /* binding */ useDeprecated; }\n/* harmony export */ });\nvar deprecatedMessages = [];\nfunction useDeprecated(msg) {\n    if (!deprecatedMessages.includes(msg)) {\n        deprecatedMessages.push(msg);\n        console.warn(msg);\n    }\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2VzL3V0aWxzL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tb2J4LXJlYWN0LWxpdGUvZXMvdXRpbHMvdXRpbHMuanM/MzkyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVwcmVjYXRlZE1lc3NhZ2VzID0gW107XG5leHBvcnQgZnVuY3Rpb24gdXNlRGVwcmVjYXRlZChtc2cpIHtcbiAgICBpZiAoIWRlcHJlY2F0ZWRNZXNzYWdlcy5pbmNsdWRlcyhtc2cpKSB7XG4gICAgICAgIGRlcHJlY2F0ZWRNZXNzYWdlcy5wdXNoKG1zZyk7XG4gICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/mobx-react-lite/es/utils/utils.js\n"));

/***/ }),

/***/ "./node_modules/mobx-store-provider/lib/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/mobx-store-provider/lib/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useStore = exports.useCreateStore = exports.useProvider = void 0;\nconst react_1 = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nconst stores_1 = __webpack_require__(/*! ./stores */ \"./node_modules/mobx-store-provider/lib/stores.js\");\nfunction useProvider(identifier = stores_1.defaultId) {\n    return stores_1.retrieveStore(identifier).Provider;\n}\nexports.useProvider = useProvider;\nfunction useCreateStore(factory) {\n    return react_1.useMemo(factory, []);\n}\nexports.useCreateStore = useCreateStore;\nfunction useStore(identifer = stores_1.defaultId, mapStore = stores_1.identity) {\n    return typeof identifer === \"function\"\n        ? stores_1.retrieveStore(stores_1.defaultId).useStore(identifer)\n        : stores_1.retrieveStore(identifer).useStore(mapStore);\n}\nexports.useStore = useStore;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9ieC1zdG9yZS1wcm92aWRlci9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLEdBQUcsc0JBQXNCLEdBQUcsbUJBQW1CO0FBQy9ELGdCQUFnQixtQkFBTyxDQUFDLDRDQUFPO0FBQy9CLGlCQUFpQixtQkFBTyxDQUFDLGtFQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbW9ieC1zdG9yZS1wcm92aWRlci9saWIvaW5kZXguanM/ZWE0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlU3RvcmUgPSBleHBvcnRzLnVzZUNyZWF0ZVN0b3JlID0gZXhwb3J0cy51c2VQcm92aWRlciA9IHZvaWQgMDtcbmNvbnN0IHJlYWN0XzEgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCBzdG9yZXNfMSA9IHJlcXVpcmUoXCIuL3N0b3Jlc1wiKTtcbmZ1bmN0aW9uIHVzZVByb3ZpZGVyKGlkZW50aWZpZXIgPSBzdG9yZXNfMS5kZWZhdWx0SWQpIHtcbiAgICByZXR1cm4gc3RvcmVzXzEucmV0cmlldmVTdG9yZShpZGVudGlmaWVyKS5Qcm92aWRlcjtcbn1cbmV4cG9ydHMudXNlUHJvdmlkZXIgPSB1c2VQcm92aWRlcjtcbmZ1bmN0aW9uIHVzZUNyZWF0ZVN0b3JlKGZhY3RvcnkpIHtcbiAgICByZXR1cm4gcmVhY3RfMS51c2VNZW1vKGZhY3RvcnksIFtdKTtcbn1cbmV4cG9ydHMudXNlQ3JlYXRlU3RvcmUgPSB1c2VDcmVhdGVTdG9yZTtcbmZ1bmN0aW9uIHVzZVN0b3JlKGlkZW50aWZlciA9IHN0b3Jlc18xLmRlZmF1bHRJZCwgbWFwU3RvcmUgPSBzdG9yZXNfMS5pZGVudGl0eSkge1xuICAgIHJldHVybiB0eXBlb2YgaWRlbnRpZmVyID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyBzdG9yZXNfMS5yZXRyaWV2ZVN0b3JlKHN0b3Jlc18xLmRlZmF1bHRJZCkudXNlU3RvcmUoaWRlbnRpZmVyKVxuICAgICAgICA6IHN0b3Jlc18xLnJldHJpZXZlU3RvcmUoaWRlbnRpZmVyKS51c2VTdG9yZShtYXBTdG9yZSk7XG59XG5leHBvcnRzLnVzZVN0b3JlID0gdXNlU3RvcmU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/mobx-store-provider/lib/index.js\n"));

/***/ }),

/***/ "./node_modules/mobx-store-provider/lib/stores.js":
/*!********************************************************!*\
  !*** ./node_modules/mobx-store-provider/lib/stores.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.identity = exports.defaultId = exports.retrieveStore = void 0;\nconst react_1 = __importStar(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\nconst stores = new Map();\nconst defaultId = Symbol(\"store\");\nexports.defaultId = defaultId;\n/**\n * Register/initialize a store in the internal `stores` Map.\n * @param identifier The identifier supplied by the consumer\n * @returns void\n */\nfunction registerStore(identifier) {\n    const Context = react_1.default.createContext(null);\n    Context.displayName = String(identifier);\n    stores.set(identifier, {\n        Provider: Context.Provider,\n        useStore: (mapStore) => mapStore(react_1.useContext(Context)),\n    });\n}\n/**\n * Register and/or retrieve a `store` from the internal `stores` Map.\n * @param identifier The identifier supplied by the consumer\n * @returns Store\n */\nfunction retrieveStore(identifier) {\n    if (!stores.has(identifier)) {\n        registerStore(identifier);\n    }\n    return stores.get(identifier);\n}\nexports.retrieveStore = retrieveStore;\n/**\n * Identity function, returns what was passed to it.\n * @param thing The thing you want the identity of\n * @returns thing\n */\nfunction identity(thing) {\n    return thing;\n}\nexports.identity = identity;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9ieC1zdG9yZS1wcm92aWRlci9saWIvc3RvcmVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLG1DQUFtQyxvQ0FBb0MsZ0JBQWdCO0FBQ3ZGLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLEdBQUcsaUJBQWlCLEdBQUcscUJBQXFCO0FBQzVELDZCQUE2QixtQkFBTyxDQUFDLDRDQUFPO0FBQzVDO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbW9ieC1zdG9yZS1wcm92aWRlci9saWIvc3RvcmVzLmpzPzJlZGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaWRlbnRpdHkgPSBleHBvcnRzLmRlZmF1bHRJZCA9IGV4cG9ydHMucmV0cmlldmVTdG9yZSA9IHZvaWQgMDtcbmNvbnN0IHJlYWN0XzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInJlYWN0XCIpKTtcbmNvbnN0IHN0b3JlcyA9IG5ldyBNYXAoKTtcbmNvbnN0IGRlZmF1bHRJZCA9IFN5bWJvbChcInN0b3JlXCIpO1xuZXhwb3J0cy5kZWZhdWx0SWQgPSBkZWZhdWx0SWQ7XG4vKipcbiAqIFJlZ2lzdGVyL2luaXRpYWxpemUgYSBzdG9yZSBpbiB0aGUgaW50ZXJuYWwgYHN0b3Jlc2AgTWFwLlxuICogQHBhcmFtIGlkZW50aWZpZXIgVGhlIGlkZW50aWZpZXIgc3VwcGxpZWQgYnkgdGhlIGNvbnN1bWVyXG4gKiBAcmV0dXJucyB2b2lkXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyU3RvcmUoaWRlbnRpZmllcikge1xuICAgIGNvbnN0IENvbnRleHQgPSByZWFjdF8xLmRlZmF1bHQuY3JlYXRlQ29udGV4dChudWxsKTtcbiAgICBDb250ZXh0LmRpc3BsYXlOYW1lID0gU3RyaW5nKGlkZW50aWZpZXIpO1xuICAgIHN0b3Jlcy5zZXQoaWRlbnRpZmllciwge1xuICAgICAgICBQcm92aWRlcjogQ29udGV4dC5Qcm92aWRlcixcbiAgICAgICAgdXNlU3RvcmU6IChtYXBTdG9yZSkgPT4gbWFwU3RvcmUocmVhY3RfMS51c2VDb250ZXh0KENvbnRleHQpKSxcbiAgICB9KTtcbn1cbi8qKlxuICogUmVnaXN0ZXIgYW5kL29yIHJldHJpZXZlIGEgYHN0b3JlYCBmcm9tIHRoZSBpbnRlcm5hbCBgc3RvcmVzYCBNYXAuXG4gKiBAcGFyYW0gaWRlbnRpZmllciBUaGUgaWRlbnRpZmllciBzdXBwbGllZCBieSB0aGUgY29uc3VtZXJcbiAqIEByZXR1cm5zIFN0b3JlXG4gKi9cbmZ1bmN0aW9uIHJldHJpZXZlU3RvcmUoaWRlbnRpZmllcikge1xuICAgIGlmICghc3RvcmVzLmhhcyhpZGVudGlmaWVyKSkge1xuICAgICAgICByZWdpc3RlclN0b3JlKGlkZW50aWZpZXIpO1xuICAgIH1cbiAgICByZXR1cm4gc3RvcmVzLmdldChpZGVudGlmaWVyKTtcbn1cbmV4cG9ydHMucmV0cmlldmVTdG9yZSA9IHJldHJpZXZlU3RvcmU7XG4vKipcbiAqIElkZW50aXR5IGZ1bmN0aW9uLCByZXR1cm5zIHdoYXQgd2FzIHBhc3NlZCB0byBpdC5cbiAqIEBwYXJhbSB0aGluZyBUaGUgdGhpbmcgeW91IHdhbnQgdGhlIGlkZW50aXR5IG9mXG4gKiBAcmV0dXJucyB0aGluZ1xuICovXG5mdW5jdGlvbiBpZGVudGl0eSh0aGluZykge1xuICAgIHJldHVybiB0aGluZztcbn1cbmV4cG9ydHMuaWRlbnRpdHkgPSBpZGVudGl0eTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/mobx-store-provider/lib/stores.js\n"));

/***/ }),

/***/ "./node_modules/mobx/dist/mobx.esm.js":
/*!********************************************!*\
  !*** ./node_modules/mobx/dist/mobx.esm.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $mobx: function() { return /* binding */ $mobx; },\n/* harmony export */   FlowCancellationError: function() { return /* binding */ FlowCancellationError; },\n/* harmony export */   ObservableMap: function() { return /* binding */ ObservableMap; },\n/* harmony export */   ObservableSet: function() { return /* binding */ ObservableSet; },\n/* harmony export */   Reaction: function() { return /* binding */ Reaction; },\n/* harmony export */   _allowStateChanges: function() { return /* binding */ allowStateChanges; },\n/* harmony export */   _allowStateChangesInsideComputed: function() { return /* binding */ runInAction; },\n/* harmony export */   _allowStateReadsEnd: function() { return /* binding */ allowStateReadsEnd; },\n/* harmony export */   _allowStateReadsStart: function() { return /* binding */ allowStateReadsStart; },\n/* harmony export */   _autoAction: function() { return /* binding */ autoAction; },\n/* harmony export */   _endAction: function() { return /* binding */ _endAction; },\n/* harmony export */   _getAdministration: function() { return /* binding */ getAdministration; },\n/* harmony export */   _getGlobalState: function() { return /* binding */ getGlobalState; },\n/* harmony export */   _interceptReads: function() { return /* binding */ interceptReads; },\n/* harmony export */   _isComputingDerivation: function() { return /* binding */ isComputingDerivation; },\n/* harmony export */   _resetGlobalState: function() { return /* binding */ resetGlobalState; },\n/* harmony export */   _startAction: function() { return /* binding */ _startAction; },\n/* harmony export */   action: function() { return /* binding */ action; },\n/* harmony export */   autorun: function() { return /* binding */ autorun; },\n/* harmony export */   comparer: function() { return /* binding */ comparer; },\n/* harmony export */   computed: function() { return /* binding */ computed; },\n/* harmony export */   configure: function() { return /* binding */ configure; },\n/* harmony export */   createAtom: function() { return /* binding */ createAtom; },\n/* harmony export */   defineProperty: function() { return /* binding */ apiDefineProperty; },\n/* harmony export */   entries: function() { return /* binding */ entries; },\n/* harmony export */   extendObservable: function() { return /* binding */ extendObservable; },\n/* harmony export */   flow: function() { return /* binding */ flow; },\n/* harmony export */   flowResult: function() { return /* binding */ flowResult; },\n/* harmony export */   get: function() { return /* binding */ get; },\n/* harmony export */   getAtom: function() { return /* binding */ getAtom; },\n/* harmony export */   getDebugName: function() { return /* binding */ getDebugName; },\n/* harmony export */   getDependencyTree: function() { return /* binding */ getDependencyTree; },\n/* harmony export */   getObserverTree: function() { return /* binding */ getObserverTree; },\n/* harmony export */   has: function() { return /* binding */ has; },\n/* harmony export */   intercept: function() { return /* binding */ intercept; },\n/* harmony export */   isAction: function() { return /* binding */ isAction; },\n/* harmony export */   isBoxedObservable: function() { return /* binding */ isObservableValue; },\n/* harmony export */   isComputed: function() { return /* binding */ isComputed; },\n/* harmony export */   isComputedProp: function() { return /* binding */ isComputedProp; },\n/* harmony export */   isFlow: function() { return /* binding */ isFlow; },\n/* harmony export */   isFlowCancellationError: function() { return /* binding */ isFlowCancellationError; },\n/* harmony export */   isObservable: function() { return /* binding */ isObservable; },\n/* harmony export */   isObservableArray: function() { return /* binding */ isObservableArray; },\n/* harmony export */   isObservableMap: function() { return /* binding */ isObservableMap; },\n/* harmony export */   isObservableObject: function() { return /* binding */ isObservableObject; },\n/* harmony export */   isObservableProp: function() { return /* binding */ isObservableProp; },\n/* harmony export */   isObservableSet: function() { return /* binding */ isObservableSet; },\n/* harmony export */   keys: function() { return /* binding */ keys; },\n/* harmony export */   makeAutoObservable: function() { return /* binding */ makeAutoObservable; },\n/* harmony export */   makeObservable: function() { return /* binding */ makeObservable; },\n/* harmony export */   observable: function() { return /* binding */ observable; },\n/* harmony export */   observe: function() { return /* binding */ observe; },\n/* harmony export */   onBecomeObserved: function() { return /* binding */ onBecomeObserved; },\n/* harmony export */   onBecomeUnobserved: function() { return /* binding */ onBecomeUnobserved; },\n/* harmony export */   onReactionError: function() { return /* binding */ onReactionError; },\n/* harmony export */   override: function() { return /* binding */ override; },\n/* harmony export */   ownKeys: function() { return /* binding */ apiOwnKeys; },\n/* harmony export */   reaction: function() { return /* binding */ reaction; },\n/* harmony export */   remove: function() { return /* binding */ remove; },\n/* harmony export */   runInAction: function() { return /* binding */ runInAction; },\n/* harmony export */   set: function() { return /* binding */ set; },\n/* harmony export */   spy: function() { return /* binding */ spy; },\n/* harmony export */   toJS: function() { return /* binding */ toJS; },\n/* harmony export */   trace: function() { return /* binding */ trace; },\n/* harmony export */   transaction: function() { return /* binding */ transaction; },\n/* harmony export */   untracked: function() { return /* binding */ untracked; },\n/* harmony export */   values: function() { return /* binding */ values; },\n/* harmony export */   when: function() { return /* binding */ when; }\n/* harmony export */ });\nvar niceErrors = {\n  0: \"Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'\",\n  1: function _(annotationType, key) {\n    return \"Cannot apply '\" + annotationType + \"' to '\" + key.toString() + \"': Field not found.\";\n  },\n  /*\r\n  2(prop) {\r\n      return `invalid decorator for '${prop.toString()}'`\r\n  },\r\n  3(prop) {\r\n      return `Cannot decorate '${prop.toString()}': action can only be used on properties with a function value.`\r\n  },\r\n  4(prop) {\r\n      return `Cannot decorate '${prop.toString()}': computed can only be used on getter properties.`\r\n  },\r\n  */\n  5: \"'keys()' can only be used on observable objects, arrays, sets and maps\",\n  6: \"'values()' can only be used on observable objects, arrays, sets and maps\",\n  7: \"'entries()' can only be used on observable objects, arrays and maps\",\n  8: \"'set()' can only be used on observable objects, arrays and maps\",\n  9: \"'remove()' can only be used on observable objects, arrays and maps\",\n  10: \"'has()' can only be used on observable objects, arrays and maps\",\n  11: \"'get()' can only be used on observable objects, arrays and maps\",\n  12: \"Invalid annotation\",\n  13: \"Dynamic observable objects cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)\",\n  14: \"Intercept handlers should return nothing or a change object\",\n  15: \"Observable arrays cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)\",\n  16: \"Modification exception: the internal structure of an observable array was changed.\",\n  17: function _(index, length) {\n    return \"[mobx.array] Index out of bounds, \" + index + \" is larger than \" + length;\n  },\n  18: \"mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js\",\n  19: function _(other) {\n    return \"Cannot initialize from classes that inherit from Map: \" + other.constructor.name;\n  },\n  20: function _(other) {\n    return \"Cannot initialize map from \" + other;\n  },\n  21: function _(dataStructure) {\n    return \"Cannot convert to map from '\" + dataStructure + \"'\";\n  },\n  22: \"mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js\",\n  23: \"It is not possible to get index atoms from arrays\",\n  24: function _(thing) {\n    return \"Cannot obtain administration from \" + thing;\n  },\n  25: function _(property, name) {\n    return \"the entry '\" + property + \"' does not exist in the observable map '\" + name + \"'\";\n  },\n  26: \"please specify a property\",\n  27: function _(property, name) {\n    return \"no observable property '\" + property.toString() + \"' found on the observable object '\" + name + \"'\";\n  },\n  28: function _(thing) {\n    return \"Cannot obtain atom from \" + thing;\n  },\n  29: \"Expecting some object\",\n  30: \"invalid action stack. did you forget to finish an action?\",\n  31: \"missing option for computed: get\",\n  32: function _(name, derivation) {\n    return \"Cycle detected in computation \" + name + \": \" + derivation;\n  },\n  33: function _(name) {\n    return \"The setter of computed value '\" + name + \"' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?\";\n  },\n  34: function _(name) {\n    return \"[ComputedValue '\" + name + \"'] It is not possible to assign a new value to a computed value.\";\n  },\n  35: \"There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`\",\n  36: \"isolateGlobalState should be called before MobX is running any reactions\",\n  37: function _(method) {\n    return \"[mobx] `observableArray.\" + method + \"()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice().\" + method + \"()` instead\";\n  },\n  38: \"'ownKeys()' can only be used on observable objects\",\n  39: \"'defineProperty()' can only be used on observable objects\"\n};\nvar errors =  true ? niceErrors : 0;\nfunction die(error) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  if (true) {\n    var e = typeof error === \"string\" ? error : errors[error];\n    if (typeof e === \"function\") e = e.apply(null, args);\n    throw new Error(\"[MobX] \" + e);\n  }\n  throw new Error(typeof error === \"number\" ? \"[MobX] minified error nr: \" + error + (args.length ? \" \" + args.map(String).join(\",\") : \"\") + \". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts\" : \"[MobX] \" + error);\n}\n\nvar mockGlobal = {};\nfunction getGlobal() {\n  if (typeof globalThis !== \"undefined\") {\n    return globalThis;\n  }\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n  if (typeof __webpack_require__.g !== \"undefined\") {\n    return __webpack_require__.g;\n  }\n  if (typeof self !== \"undefined\") {\n    return self;\n  }\n  return mockGlobal;\n}\n\n// We shorten anything used > 5 times\nvar assign = Object.assign;\nvar getDescriptor = Object.getOwnPropertyDescriptor;\nvar defineProperty = Object.defineProperty;\nvar objectPrototype = Object.prototype;\nvar EMPTY_ARRAY = [];\nObject.freeze(EMPTY_ARRAY);\nvar EMPTY_OBJECT = {};\nObject.freeze(EMPTY_OBJECT);\nvar hasProxy = typeof Proxy !== \"undefined\";\nvar plainObjectString = /*#__PURE__*/Object.toString();\nfunction assertProxies() {\n  if (!hasProxy) {\n    die( true ? \"`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`\" : 0);\n  }\n}\nfunction warnAboutProxyRequirement(msg) {\n  if ( true && globalState.verifyProxies) {\n    die(\"MobX is currently configured to be able to run in ES5 mode, but in ES5 MobX won't be able to \" + msg);\n  }\n}\nfunction getNextId() {\n  return ++globalState.mobxGuid;\n}\n/**\r\n * Makes sure that the provided function is invoked at most once.\r\n */\nfunction once(func) {\n  var invoked = false;\n  return function () {\n    if (invoked) {\n      return;\n    }\n    invoked = true;\n    return func.apply(this, arguments);\n  };\n}\nvar noop = function noop() {};\nfunction isFunction(fn) {\n  return typeof fn === \"function\";\n}\nfunction isStringish(value) {\n  var t = typeof value;\n  switch (t) {\n    case \"string\":\n    case \"symbol\":\n    case \"number\":\n      return true;\n  }\n  return false;\n}\nfunction isObject(value) {\n  return value !== null && typeof value === \"object\";\n}\nfunction isPlainObject(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  var proto = Object.getPrototypeOf(value);\n  if (proto == null) {\n    return true;\n  }\n  var protoConstructor = Object.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n  return typeof protoConstructor === \"function\" && protoConstructor.toString() === plainObjectString;\n}\n// https://stackoverflow.com/a/37865170\nfunction isGenerator(obj) {\n  var constructor = obj == null ? void 0 : obj.constructor;\n  if (!constructor) {\n    return false;\n  }\n  if (\"GeneratorFunction\" === constructor.name || \"GeneratorFunction\" === constructor.displayName) {\n    return true;\n  }\n  return false;\n}\nfunction addHiddenProp(object, propName, value) {\n  defineProperty(object, propName, {\n    enumerable: false,\n    writable: true,\n    configurable: true,\n    value: value\n  });\n}\nfunction addHiddenFinalProp(object, propName, value) {\n  defineProperty(object, propName, {\n    enumerable: false,\n    writable: false,\n    configurable: true,\n    value: value\n  });\n}\nfunction createInstanceofPredicate(name, theClass) {\n  var propName = \"isMobX\" + name;\n  theClass.prototype[propName] = true;\n  return function (x) {\n    return isObject(x) && x[propName] === true;\n  };\n}\nfunction isES6Map(thing) {\n  return thing instanceof Map;\n}\nfunction isES6Set(thing) {\n  return thing instanceof Set;\n}\nvar hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== \"undefined\";\n/**\r\n * Returns the following: own enumerable keys and symbols.\r\n */\nfunction getPlainObjectKeys(object) {\n  var keys = Object.keys(object);\n  // Not supported in IE, so there are not going to be symbol props anyway...\n  if (!hasGetOwnPropertySymbols) {\n    return keys;\n  }\n  var symbols = Object.getOwnPropertySymbols(object);\n  if (!symbols.length) {\n    return keys;\n  }\n  return [].concat(keys, symbols.filter(function (s) {\n    return objectPrototype.propertyIsEnumerable.call(object, s);\n  }));\n}\n// From Immer utils\n// Returns all own keys, including non-enumerable and symbolic\nvar ownKeys = typeof Reflect !== \"undefined\" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function (obj) {\n  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n} : /* istanbul ignore next */Object.getOwnPropertyNames;\nfunction stringifyKey(key) {\n  if (typeof key === \"string\") {\n    return key;\n  }\n  if (typeof key === \"symbol\") {\n    return key.toString();\n  }\n  return new String(key).toString();\n}\nfunction toPrimitive(value) {\n  return value === null ? null : typeof value === \"object\" ? \"\" + value : value;\n}\nfunction hasProp(target, prop) {\n  return objectPrototype.hasOwnProperty.call(target, prop);\n}\n// From Immer utils\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {\n  // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n  var res = {};\n  // Note: without polyfill for ownKeys, symbols won't be picked up\n  ownKeys(target).forEach(function (key) {\n    res[key] = getDescriptor(target, key);\n  });\n  return res;\n};\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar storedAnnotationsSymbol = /*#__PURE__*/Symbol(\"mobx-stored-annotations\");\n/**\r\n * Creates a function that acts as\r\n * - decorator\r\n * - annotation object\r\n */\nfunction createDecoratorAnnotation(annotation) {\n  function decorator(target, property) {\n    storeAnnotation(target, property, annotation);\n  }\n  return Object.assign(decorator, annotation);\n}\n/**\r\n * Stores annotation to prototype,\r\n * so it can be inspected later by `makeObservable` called from constructor\r\n */\nfunction storeAnnotation(prototype, key, annotation) {\n  if (!hasProp(prototype, storedAnnotationsSymbol)) {\n    addHiddenProp(prototype, storedAnnotationsSymbol, _extends({}, prototype[storedAnnotationsSymbol]));\n  }\n  // @override must override something\n  if ( true && isOverride(annotation) && !hasProp(prototype[storedAnnotationsSymbol], key)) {\n    var fieldName = prototype.constructor.name + \".prototype.\" + key.toString();\n    die(\"'\" + fieldName + \"' is decorated with 'override', \" + \"but no such decorated member was found on prototype.\");\n  }\n  // Cannot re-decorate\n  assertNotDecorated(prototype, annotation, key);\n  // Ignore override\n  if (!isOverride(annotation)) {\n    prototype[storedAnnotationsSymbol][key] = annotation;\n  }\n}\nfunction assertNotDecorated(prototype, annotation, key) {\n  if ( true && !isOverride(annotation) && hasProp(prototype[storedAnnotationsSymbol], key)) {\n    var fieldName = prototype.constructor.name + \".prototype.\" + key.toString();\n    var currentAnnotationType = prototype[storedAnnotationsSymbol][key].annotationType_;\n    var requestedAnnotationType = annotation.annotationType_;\n    die(\"Cannot apply '@\" + requestedAnnotationType + \"' to '\" + fieldName + \"':\" + (\"\\nThe field is already decorated with '@\" + currentAnnotationType + \"'.\") + \"\\nRe-decorating fields is not allowed.\" + \"\\nUse '@override' decorator for methods overridden by subclass.\");\n  }\n}\n/**\r\n * Collects annotations from prototypes and stores them on target (instance)\r\n */\nfunction collectStoredAnnotations(target) {\n  if (!hasProp(target, storedAnnotationsSymbol)) {\n    if ( true && !target[storedAnnotationsSymbol]) {\n      die(\"No annotations were passed to makeObservable, but no decorated members have been found either\");\n    }\n    // We need a copy as we will remove annotation from the list once it's applied.\n    addHiddenProp(target, storedAnnotationsSymbol, _extends({}, target[storedAnnotationsSymbol]));\n  }\n  return target[storedAnnotationsSymbol];\n}\n\nvar $mobx = /*#__PURE__*/Symbol(\"mobx administration\");\nvar Atom = /*#__PURE__*/function () {\n  // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed\n\n  /**\r\n   * Create a new atom. For debugging purposes it is recommended to give it a name.\r\n   * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.\r\n   */\n  function Atom(name_) {\n    if (name_ === void 0) {\n      name_ =  true ? \"Atom@\" + getNextId() : 0;\n    }\n    this.name_ = void 0;\n    this.isPendingUnobservation_ = false;\n    this.isBeingObserved_ = false;\n    this.observers_ = new Set();\n    this.diffValue_ = 0;\n    this.lastAccessedBy_ = 0;\n    this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;\n    this.onBOL = void 0;\n    this.onBUOL = void 0;\n    this.name_ = name_;\n  }\n  // onBecomeObservedListeners\n  var _proto = Atom.prototype;\n  _proto.onBO = function onBO() {\n    if (this.onBOL) {\n      this.onBOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  };\n  _proto.onBUO = function onBUO() {\n    if (this.onBUOL) {\n      this.onBUOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }\n  /**\r\n   * Invoke this method to notify mobx that your atom has been used somehow.\r\n   * Returns true if there is currently a reactive context.\r\n   */;\n  _proto.reportObserved = function reportObserved$1() {\n    return reportObserved(this);\n  }\n  /**\r\n   * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.\r\n   */;\n  _proto.reportChanged = function reportChanged() {\n    startBatch();\n    propagateChanged(this);\n    // We could update state version only at the end of batch,\n    // but we would still have to switch some global flag here to signal a change.\n    globalState.stateVersion = globalState.stateVersion < Number.MAX_SAFE_INTEGER ? globalState.stateVersion + 1 : Number.MIN_SAFE_INTEGER;\n    endBatch();\n  };\n  _proto.toString = function toString() {\n    return this.name_;\n  };\n  return Atom;\n}();\nvar isAtom = /*#__PURE__*/createInstanceofPredicate(\"Atom\", Atom);\nfunction createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {\n  if (onBecomeObservedHandler === void 0) {\n    onBecomeObservedHandler = noop;\n  }\n  if (onBecomeUnobservedHandler === void 0) {\n    onBecomeUnobservedHandler = noop;\n  }\n  var atom = new Atom(name);\n  // default `noop` listener will not initialize the hook Set\n  if (onBecomeObservedHandler !== noop) {\n    onBecomeObserved(atom, onBecomeObservedHandler);\n  }\n  if (onBecomeUnobservedHandler !== noop) {\n    onBecomeUnobserved(atom, onBecomeUnobservedHandler);\n  }\n  return atom;\n}\n\nfunction identityComparer(a, b) {\n  return a === b;\n}\nfunction structuralComparer(a, b) {\n  return deepEqual(a, b);\n}\nfunction shallowComparer(a, b) {\n  return deepEqual(a, b, 1);\n}\nfunction defaultComparer(a, b) {\n  if (Object.is) {\n    return Object.is(a, b);\n  }\n  return a === b ? a !== 0 || 1 / a === 1 / b : a !== a && b !== b;\n}\nvar comparer = {\n  identity: identityComparer,\n  structural: structuralComparer,\n  \"default\": defaultComparer,\n  shallow: shallowComparer\n};\n\nfunction deepEnhancer(v, _, name) {\n  // it is an observable already, done\n  if (isObservable(v)) {\n    return v;\n  }\n  // something that can be converted and mutated?\n  if (Array.isArray(v)) {\n    return observable.array(v, {\n      name: name\n    });\n  }\n  if (isPlainObject(v)) {\n    return observable.object(v, undefined, {\n      name: name\n    });\n  }\n  if (isES6Map(v)) {\n    return observable.map(v, {\n      name: name\n    });\n  }\n  if (isES6Set(v)) {\n    return observable.set(v, {\n      name: name\n    });\n  }\n  if (typeof v === \"function\" && !isAction(v) && !isFlow(v)) {\n    if (isGenerator(v)) {\n      return flow(v);\n    } else {\n      return autoAction(name, v);\n    }\n  }\n  return v;\n}\nfunction shallowEnhancer(v, _, name) {\n  if (v === undefined || v === null) {\n    return v;\n  }\n  if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) {\n    return v;\n  }\n  if (Array.isArray(v)) {\n    return observable.array(v, {\n      name: name,\n      deep: false\n    });\n  }\n  if (isPlainObject(v)) {\n    return observable.object(v, undefined, {\n      name: name,\n      deep: false\n    });\n  }\n  if (isES6Map(v)) {\n    return observable.map(v, {\n      name: name,\n      deep: false\n    });\n  }\n  if (isES6Set(v)) {\n    return observable.set(v, {\n      name: name,\n      deep: false\n    });\n  }\n  if (true) {\n    die(\"The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets\");\n  }\n}\nfunction referenceEnhancer(newValue) {\n  // never turn into an observable\n  return newValue;\n}\nfunction refStructEnhancer(v, oldValue) {\n  if ( true && isObservable(v)) {\n    die(\"observable.struct should not be used with observable values\");\n  }\n  if (deepEqual(v, oldValue)) {\n    return oldValue;\n  }\n  return v;\n}\n\nvar OVERRIDE = \"override\";\nvar override = /*#__PURE__*/createDecoratorAnnotation({\n  annotationType_: OVERRIDE,\n  make_: make_,\n  extend_: extend_\n});\nfunction isOverride(annotation) {\n  return annotation.annotationType_ === OVERRIDE;\n}\nfunction make_(adm, key) {\n  // Must not be plain object\n  if ( true && adm.isPlainObject_) {\n    die(\"Cannot apply '\" + this.annotationType_ + \"' to '\" + adm.name_ + \".\" + key.toString() + \"':\" + (\"\\n'\" + this.annotationType_ + \"' cannot be used on plain objects.\"));\n  }\n  // Must override something\n  if ( true && !hasProp(adm.appliedAnnotations_, key)) {\n    die(\"'\" + adm.name_ + \".\" + key.toString() + \"' is annotated with '\" + this.annotationType_ + \"', \" + \"but no such annotated member was found on prototype.\");\n  }\n  return 0 /* Cancel */;\n}\n\nfunction extend_(adm, key, descriptor, proxyTrap) {\n  die(\"'\" + this.annotationType_ + \"' can only be used with 'makeObservable'\");\n}\n\nfunction createActionAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$1,\n    extend_: extend_$1\n  };\n}\nfunction make_$1(adm, key, descriptor, source) {\n  var _this$options_;\n  // bound\n  if ((_this$options_ = this.options_) != null && _this$options_.bound) {\n    return this.extend_(adm, key, descriptor, false) === null ? 0 /* Cancel */ : 1 /* Break */;\n  }\n  // own\n  if (source === adm.target_) {\n    return this.extend_(adm, key, descriptor, false) === null ? 0 /* Cancel */ : 2 /* Continue */;\n  }\n  // prototype\n  if (isAction(descriptor.value)) {\n    // A prototype could have been annotated already by other constructor,\n    // rest of the proto chain must be annotated already\n    return 1 /* Break */;\n  }\n\n  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);\n  defineProperty(source, key, actionDescriptor);\n  return 2 /* Continue */;\n}\n\nfunction extend_$1(adm, key, descriptor, proxyTrap) {\n  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);\n  return adm.defineProperty_(key, actionDescriptor, proxyTrap);\n}\nfunction assertActionDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var value = _ref2.value;\n  if ( true && !isFunction(value)) {\n    die(\"Cannot apply '\" + annotationType_ + \"' to '\" + adm.name_ + \".\" + key.toString() + \"':\" + (\"\\n'\" + annotationType_ + \"' can only be used on properties with a function value.\"));\n  }\n}\nfunction createActionDescriptor(adm, annotation, key, descriptor,\n// provides ability to disable safeDescriptors for prototypes\nsafeDescriptors) {\n  var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3, _annotation$options_4, _adm$proxy_2;\n  if (safeDescriptors === void 0) {\n    safeDescriptors = globalState.safeDescriptors;\n  }\n  assertActionDescriptor(adm, annotation, key, descriptor);\n  var value = descriptor.value;\n  if ((_annotation$options_ = annotation.options_) != null && _annotation$options_.bound) {\n    var _adm$proxy_;\n    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n  }\n  return {\n    value: createAction((_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(), value, (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false,\n    // https://github.com/mobxjs/mobx/discussions/3140\n    (_annotation$options_4 = annotation.options_) != null && _annotation$options_4.bound ? (_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_ : undefined),\n    // Non-configurable for classes\n    // prevents accidental field redefinition in subclass\n    configurable: safeDescriptors ? adm.isPlainObject_ : true,\n    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n    enumerable: false,\n    // Non-obsevable, therefore non-writable\n    // Also prevents rewriting in subclass constructor\n    writable: safeDescriptors ? false : true\n  };\n}\n\nfunction createFlowAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$2,\n    extend_: extend_$2\n  };\n}\nfunction make_$2(adm, key, descriptor, source) {\n  var _this$options_;\n  // own\n  if (source === adm.target_) {\n    return this.extend_(adm, key, descriptor, false) === null ? 0 /* Cancel */ : 2 /* Continue */;\n  }\n  // prototype\n  // bound - must annotate protos to support super.flow()\n  if ((_this$options_ = this.options_) != null && _this$options_.bound && (!hasProp(adm.target_, key) || !isFlow(adm.target_[key]))) {\n    if (this.extend_(adm, key, descriptor, false) === null) {\n      return 0 /* Cancel */;\n    }\n  }\n\n  if (isFlow(descriptor.value)) {\n    // A prototype could have been annotated already by other constructor,\n    // rest of the proto chain must be annotated already\n    return 1 /* Break */;\n  }\n\n  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);\n  defineProperty(source, key, flowDescriptor);\n  return 2 /* Continue */;\n}\n\nfunction extend_$2(adm, key, descriptor, proxyTrap) {\n  var _this$options_2;\n  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound);\n  return adm.defineProperty_(key, flowDescriptor, proxyTrap);\n}\nfunction assertFlowDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var value = _ref2.value;\n  if ( true && !isFunction(value)) {\n    die(\"Cannot apply '\" + annotationType_ + \"' to '\" + adm.name_ + \".\" + key.toString() + \"':\" + (\"\\n'\" + annotationType_ + \"' can only be used on properties with a generator function value.\"));\n  }\n}\nfunction createFlowDescriptor(adm, annotation, key, descriptor, bound,\n// provides ability to disable safeDescriptors for prototypes\nsafeDescriptors) {\n  if (safeDescriptors === void 0) {\n    safeDescriptors = globalState.safeDescriptors;\n  }\n  assertFlowDescriptor(adm, annotation, key, descriptor);\n  var value = descriptor.value;\n  // In case of flow.bound, the descriptor can be from already annotated prototype\n  if (!isFlow(value)) {\n    value = flow(value);\n  }\n  if (bound) {\n    var _adm$proxy_;\n    // We do not keep original function around, so we bind the existing flow\n    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n    // This is normally set by `flow`, but `bind` returns new function...\n    value.isMobXFlow = true;\n  }\n  return {\n    value: value,\n    // Non-configurable for classes\n    // prevents accidental field redefinition in subclass\n    configurable: safeDescriptors ? adm.isPlainObject_ : true,\n    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n    enumerable: false,\n    // Non-obsevable, therefore non-writable\n    // Also prevents rewriting in subclass constructor\n    writable: safeDescriptors ? false : true\n  };\n}\n\nfunction createComputedAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$3,\n    extend_: extend_$3\n  };\n}\nfunction make_$3(adm, key, descriptor) {\n  return this.extend_(adm, key, descriptor, false) === null ? 0 /* Cancel */ : 1 /* Break */;\n}\n\nfunction extend_$3(adm, key, descriptor, proxyTrap) {\n  assertComputedDescriptor(adm, this, key, descriptor);\n  return adm.defineComputedProperty_(key, _extends({}, this.options_, {\n    get: descriptor.get,\n    set: descriptor.set\n  }), proxyTrap);\n}\nfunction assertComputedDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var get = _ref2.get;\n  if ( true && !get) {\n    die(\"Cannot apply '\" + annotationType_ + \"' to '\" + adm.name_ + \".\" + key.toString() + \"':\" + (\"\\n'\" + annotationType_ + \"' can only be used on getter(+setter) properties.\"));\n  }\n}\n\nfunction createObservableAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$4,\n    extend_: extend_$4\n  };\n}\nfunction make_$4(adm, key, descriptor) {\n  return this.extend_(adm, key, descriptor, false) === null ? 0 /* Cancel */ : 1 /* Break */;\n}\n\nfunction extend_$4(adm, key, descriptor, proxyTrap) {\n  var _this$options_$enhanc, _this$options_;\n  assertObservableDescriptor(adm, this, key, descriptor);\n  return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer, proxyTrap);\n}\nfunction assertObservableDescriptor(adm, _ref, key, descriptor) {\n  var annotationType_ = _ref.annotationType_;\n  if ( true && !(\"value\" in descriptor)) {\n    die(\"Cannot apply '\" + annotationType_ + \"' to '\" + adm.name_ + \".\" + key.toString() + \"':\" + (\"\\n'\" + annotationType_ + \"' cannot be used on getter/setter properties\"));\n  }\n}\n\nvar AUTO = \"true\";\nvar autoAnnotation = /*#__PURE__*/createAutoAnnotation();\nfunction createAutoAnnotation(options) {\n  return {\n    annotationType_: AUTO,\n    options_: options,\n    make_: make_$5,\n    extend_: extend_$5\n  };\n}\nfunction make_$5(adm, key, descriptor, source) {\n  var _this$options_3, _this$options_4;\n  // getter -> computed\n  if (descriptor.get) {\n    return computed.make_(adm, key, descriptor, source);\n  }\n  // lone setter -> action setter\n  if (descriptor.set) {\n    // TODO make action applicable to setter and delegate to action.make_\n    var set = createAction(key.toString(), descriptor.set);\n    // own\n    if (source === adm.target_) {\n      return adm.defineProperty_(key, {\n        configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n        set: set\n      }) === null ? 0 /* Cancel */ : 2 /* Continue */;\n    }\n    // proto\n    defineProperty(source, key, {\n      configurable: true,\n      set: set\n    });\n    return 2 /* Continue */;\n  }\n  // function on proto -> autoAction/flow\n  if (source !== adm.target_ && typeof descriptor.value === \"function\") {\n    var _this$options_2;\n    if (isGenerator(descriptor.value)) {\n      var _this$options_;\n      var flowAnnotation = (_this$options_ = this.options_) != null && _this$options_.autoBind ? flow.bound : flow;\n      return flowAnnotation.make_(adm, key, descriptor, source);\n    }\n    var actionAnnotation = (_this$options_2 = this.options_) != null && _this$options_2.autoBind ? autoAction.bound : autoAction;\n    return actionAnnotation.make_(adm, key, descriptor, source);\n  }\n  // other -> observable\n  // Copy props from proto as well, see test:\n  // \"decorate should work with Object.create\"\n  var observableAnnotation = ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false ? observable.ref : observable;\n  // if function respect autoBind option\n  if (typeof descriptor.value === \"function\" && (_this$options_4 = this.options_) != null && _this$options_4.autoBind) {\n    var _adm$proxy_;\n    descriptor.value = descriptor.value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n  }\n  return observableAnnotation.make_(adm, key, descriptor, source);\n}\nfunction extend_$5(adm, key, descriptor, proxyTrap) {\n  var _this$options_5, _this$options_6;\n  // getter -> computed\n  if (descriptor.get) {\n    return computed.extend_(adm, key, descriptor, proxyTrap);\n  }\n  // lone setter -> action setter\n  if (descriptor.set) {\n    // TODO make action applicable to setter and delegate to action.extend_\n    return adm.defineProperty_(key, {\n      configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n      set: createAction(key.toString(), descriptor.set)\n    }, proxyTrap);\n  }\n  // other -> observable\n  // if function respect autoBind option\n  if (typeof descriptor.value === \"function\" && (_this$options_5 = this.options_) != null && _this$options_5.autoBind) {\n    var _adm$proxy_2;\n    descriptor.value = descriptor.value.bind((_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_);\n  }\n  var observableAnnotation = ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false ? observable.ref : observable;\n  return observableAnnotation.extend_(adm, key, descriptor, proxyTrap);\n}\n\nvar OBSERVABLE = \"observable\";\nvar OBSERVABLE_REF = \"observable.ref\";\nvar OBSERVABLE_SHALLOW = \"observable.shallow\";\nvar OBSERVABLE_STRUCT = \"observable.struct\";\n// Predefined bags of create observable options, to avoid allocating temporarily option objects\n// in the majority of cases\nvar defaultCreateObservableOptions = {\n  deep: true,\n  name: undefined,\n  defaultDecorator: undefined,\n  proxy: true\n};\nObject.freeze(defaultCreateObservableOptions);\nfunction asCreateObservableOptions(thing) {\n  return thing || defaultCreateObservableOptions;\n}\nvar observableAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE);\nvar observableRefAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_REF, {\n  enhancer: referenceEnhancer\n});\nvar observableShallowAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_SHALLOW, {\n  enhancer: shallowEnhancer\n});\nvar observableStructAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_STRUCT, {\n  enhancer: refStructEnhancer\n});\nvar observableDecoratorAnnotation = /*#__PURE__*/createDecoratorAnnotation(observableAnnotation);\nfunction getEnhancerFromOptions(options) {\n  return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);\n}\nfunction getAnnotationFromOptions(options) {\n  var _options$defaultDecor;\n  return options ? (_options$defaultDecor = options.defaultDecorator) != null ? _options$defaultDecor : createAutoAnnotation(options) : undefined;\n}\nfunction getEnhancerFromAnnotation(annotation) {\n  var _annotation$options_$, _annotation$options_;\n  return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;\n}\n/**\r\n * Turns an object, array or function into a reactive structure.\r\n * @param v the value which should become observable.\r\n */\nfunction createObservable(v, arg2, arg3) {\n  // @observable someProp;\n  if (isStringish(arg2)) {\n    storeAnnotation(v, arg2, observableAnnotation);\n    return;\n  }\n  // already observable - ignore\n  if (isObservable(v)) {\n    return v;\n  }\n  // plain object\n  if (isPlainObject(v)) {\n    return observable.object(v, arg2, arg3);\n  }\n  // Array\n  if (Array.isArray(v)) {\n    return observable.array(v, arg2);\n  }\n  // Map\n  if (isES6Map(v)) {\n    return observable.map(v, arg2);\n  }\n  // Set\n  if (isES6Set(v)) {\n    return observable.set(v, arg2);\n  }\n  // other object - ignore\n  if (typeof v === \"object\" && v !== null) {\n    return v;\n  }\n  // anything else\n  return observable.box(v, arg2);\n}\nassign(createObservable, observableDecoratorAnnotation);\nvar observableFactories = {\n  box: function box(value, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);\n  },\n  array: function array(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return (globalState.useProxies === false || o.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  map: function map(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  set: function set(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  object: function object(props, decorators, options) {\n    return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);\n  },\n  ref: /*#__PURE__*/createDecoratorAnnotation(observableRefAnnotation),\n  shallow: /*#__PURE__*/createDecoratorAnnotation(observableShallowAnnotation),\n  deep: observableDecoratorAnnotation,\n  struct: /*#__PURE__*/createDecoratorAnnotation(observableStructAnnotation)\n};\n// eslint-disable-next-line\nvar observable = /*#__PURE__*/assign(createObservable, observableFactories);\n\nvar COMPUTED = \"computed\";\nvar COMPUTED_STRUCT = \"computed.struct\";\nvar computedAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED);\nvar computedStructAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED_STRUCT, {\n  equals: comparer.structural\n});\n/**\r\n * Decorator for class properties: @computed get value() { return expr; }.\r\n * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;\r\n */\nvar computed = function computed(arg1, arg2) {\n  if (isStringish(arg2)) {\n    // @computed\n    return storeAnnotation(arg1, arg2, computedAnnotation);\n  }\n  if (isPlainObject(arg1)) {\n    // @computed({ options })\n    return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));\n  }\n  // computed(expr, options?)\n  if (true) {\n    if (!isFunction(arg1)) {\n      die(\"First argument to `computed` should be an expression.\");\n    }\n    if (isFunction(arg2)) {\n      die(\"A setter as second argument is no longer supported, use `{ set: fn }` option instead\");\n    }\n  }\n  var opts = isPlainObject(arg2) ? arg2 : {};\n  opts.get = arg1;\n  opts.name || (opts.name = arg1.name || \"\"); /* for generated name */\n  return new ComputedValue(opts);\n};\nObject.assign(computed, computedAnnotation);\ncomputed.struct = /*#__PURE__*/createDecoratorAnnotation(computedStructAnnotation);\n\nvar _getDescriptor$config, _getDescriptor;\n// we don't use globalState for these in order to avoid possible issues with multiple\n// mobx versions\nvar currentActionId = 0;\nvar nextActionId = 1;\nvar isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /*#__PURE__*/getDescriptor(function () {}, \"name\")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false;\n// we can safely recycle this object\nvar tmpNameDescriptor = {\n  value: \"action\",\n  configurable: true,\n  writable: false,\n  enumerable: false\n};\nfunction createAction(actionName, fn, autoAction, ref) {\n  if (autoAction === void 0) {\n    autoAction = false;\n  }\n  if (true) {\n    if (!isFunction(fn)) {\n      die(\"`action` can only be invoked on functions\");\n    }\n    if (typeof actionName !== \"string\" || !actionName) {\n      die(\"actions should have valid names, got: '\" + actionName + \"'\");\n    }\n  }\n  function res() {\n    return executeAction(actionName, autoAction, fn, ref || this, arguments);\n  }\n  res.isMobxAction = true;\n  if (isFunctionNameConfigurable) {\n    tmpNameDescriptor.value = actionName;\n    defineProperty(res, \"name\", tmpNameDescriptor);\n  }\n  return res;\n}\nfunction executeAction(actionName, canRunAsDerivation, fn, scope, args) {\n  var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);\n  try {\n    return fn.apply(scope, args);\n  } catch (err) {\n    runInfo.error_ = err;\n    throw err;\n  } finally {\n    _endAction(runInfo);\n  }\n}\nfunction _startAction(actionName, canRunAsDerivation,\n// true for autoAction\nscope, args) {\n  var notifySpy_ =  true && isSpyEnabled() && !!actionName;\n  var startTime_ = 0;\n  if ( true && notifySpy_) {\n    startTime_ = Date.now();\n    var flattenedArgs = args ? Array.from(args) : EMPTY_ARRAY;\n    spyReportStart({\n      type: ACTION,\n      name: actionName,\n      object: scope,\n      arguments: flattenedArgs\n    });\n  }\n  var prevDerivation_ = globalState.trackingDerivation;\n  var runAsAction = !canRunAsDerivation || !prevDerivation_;\n  startBatch();\n  var prevAllowStateChanges_ = globalState.allowStateChanges; // by default preserve previous allow\n  if (runAsAction) {\n    untrackedStart();\n    prevAllowStateChanges_ = allowStateChangesStart(true);\n  }\n  var prevAllowStateReads_ = allowStateReadsStart(true);\n  var runInfo = {\n    runAsAction_: runAsAction,\n    prevDerivation_: prevDerivation_,\n    prevAllowStateChanges_: prevAllowStateChanges_,\n    prevAllowStateReads_: prevAllowStateReads_,\n    notifySpy_: notifySpy_,\n    startTime_: startTime_,\n    actionId_: nextActionId++,\n    parentActionId_: currentActionId\n  };\n  currentActionId = runInfo.actionId_;\n  return runInfo;\n}\nfunction _endAction(runInfo) {\n  if (currentActionId !== runInfo.actionId_) {\n    die(30);\n  }\n  currentActionId = runInfo.parentActionId_;\n  if (runInfo.error_ !== undefined) {\n    globalState.suppressReactionErrors = true;\n  }\n  allowStateChangesEnd(runInfo.prevAllowStateChanges_);\n  allowStateReadsEnd(runInfo.prevAllowStateReads_);\n  endBatch();\n  if (runInfo.runAsAction_) {\n    untrackedEnd(runInfo.prevDerivation_);\n  }\n  if ( true && runInfo.notifySpy_) {\n    spyReportEnd({\n      time: Date.now() - runInfo.startTime_\n    });\n  }\n  globalState.suppressReactionErrors = false;\n}\nfunction allowStateChanges(allowStateChanges, func) {\n  var prev = allowStateChangesStart(allowStateChanges);\n  try {\n    return func();\n  } finally {\n    allowStateChangesEnd(prev);\n  }\n}\nfunction allowStateChangesStart(allowStateChanges) {\n  var prev = globalState.allowStateChanges;\n  globalState.allowStateChanges = allowStateChanges;\n  return prev;\n}\nfunction allowStateChangesEnd(prev) {\n  globalState.allowStateChanges = prev;\n}\n\nvar _Symbol$toPrimitive;\nvar CREATE = \"create\";\n_Symbol$toPrimitive = Symbol.toPrimitive;\nvar ObservableValue = /*#__PURE__*/function (_Atom) {\n  _inheritsLoose(ObservableValue, _Atom);\n  function ObservableValue(value, enhancer, name_, notifySpy, equals) {\n    var _this;\n    if (name_ === void 0) {\n      name_ =  true ? \"ObservableValue@\" + getNextId() : 0;\n    }\n    if (notifySpy === void 0) {\n      notifySpy = true;\n    }\n    if (equals === void 0) {\n      equals = comparer[\"default\"];\n    }\n    _this = _Atom.call(this, name_) || this;\n    _this.enhancer = void 0;\n    _this.name_ = void 0;\n    _this.equals = void 0;\n    _this.hasUnreportedChange_ = false;\n    _this.interceptors_ = void 0;\n    _this.changeListeners_ = void 0;\n    _this.value_ = void 0;\n    _this.dehancer = void 0;\n    _this.enhancer = enhancer;\n    _this.name_ = name_;\n    _this.equals = equals;\n    _this.value_ = enhancer(value, undefined, name_);\n    if ( true && notifySpy && isSpyEnabled()) {\n      // only notify spy if this is a stand-alone observable\n      spyReport({\n        type: CREATE,\n        object: _assertThisInitialized(_this),\n        observableKind: \"value\",\n        debugObjectName: _this.name_,\n        newValue: \"\" + _this.value_\n      });\n    }\n    return _this;\n  }\n  var _proto = ObservableValue.prototype;\n  _proto.dehanceValue = function dehanceValue(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n    return value;\n  };\n  _proto.set = function set(newValue) {\n    var oldValue = this.value_;\n    newValue = this.prepareNewValue_(newValue);\n    if (newValue !== globalState.UNCHANGED) {\n      var notifySpy = isSpyEnabled();\n      if ( true && notifySpy) {\n        spyReportStart({\n          type: UPDATE,\n          object: this,\n          observableKind: \"value\",\n          debugObjectName: this.name_,\n          newValue: newValue,\n          oldValue: oldValue\n        });\n      }\n      this.setNewValue_(newValue);\n      if ( true && notifySpy) {\n        spyReportEnd();\n      }\n    }\n  };\n  _proto.prepareNewValue_ = function prepareNewValue_(newValue) {\n    checkIfStateModificationsAreAllowed(this);\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this,\n        type: UPDATE,\n        newValue: newValue\n      });\n      if (!change) {\n        return globalState.UNCHANGED;\n      }\n      newValue = change.newValue;\n    }\n    // apply modifier\n    newValue = this.enhancer(newValue, this.value_, this.name_);\n    return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;\n  };\n  _proto.setNewValue_ = function setNewValue_(newValue) {\n    var oldValue = this.value_;\n    this.value_ = newValue;\n    this.reportChanged();\n    if (hasListeners(this)) {\n      notifyListeners(this, {\n        type: UPDATE,\n        object: this,\n        newValue: newValue,\n        oldValue: oldValue\n      });\n    }\n  };\n  _proto.get = function get() {\n    this.reportObserved();\n    return this.dehanceValue(this.value_);\n  };\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if (fireImmediately) {\n      listener({\n        observableKind: \"value\",\n        debugObjectName: this.name_,\n        object: this,\n        type: UPDATE,\n        newValue: this.value_,\n        oldValue: undefined\n      });\n    }\n    return registerListener(this, listener);\n  };\n  _proto.raw = function raw() {\n    // used by MST ot get undehanced value\n    return this.value_;\n  };\n  _proto.toJSON = function toJSON() {\n    return this.get();\n  };\n  _proto.toString = function toString() {\n    return this.name_ + \"[\" + this.value_ + \"]\";\n  };\n  _proto.valueOf = function valueOf() {\n    return toPrimitive(this.get());\n  };\n  _proto[_Symbol$toPrimitive] = function () {\n    return this.valueOf();\n  };\n  return ObservableValue;\n}(Atom);\nvar isObservableValue = /*#__PURE__*/createInstanceofPredicate(\"ObservableValue\", ObservableValue);\n\nvar _Symbol$toPrimitive$1;\n/**\r\n * A node in the state dependency root that observes other nodes, and can be observed itself.\r\n *\r\n * ComputedValue will remember the result of the computation for the duration of the batch, or\r\n * while being observed.\r\n *\r\n * During this time it will recompute only when one of its direct dependencies changed,\r\n * but only when it is being accessed with `ComputedValue.get()`.\r\n *\r\n * Implementation description:\r\n * 1. First time it's being accessed it will compute and remember result\r\n *    give back remembered result until 2. happens\r\n * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.\r\n * 3. When it's being accessed, recompute if any shallow dependency changed.\r\n *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.\r\n *    go to step 2. either way\r\n *\r\n * If at any point it's outside batch and it isn't observed: reset everything and go to 1.\r\n */\n_Symbol$toPrimitive$1 = Symbol.toPrimitive;\nvar ComputedValue = /*#__PURE__*/function () {\n  // nodes we are looking at. Our value depends on these nodes\n  // during tracking it's an array with new observed observers\n\n  // to check for cycles\n\n  // N.B: unminified as it is used by MST\n\n  /**\r\n   * Create a new computed value based on a function expression.\r\n   *\r\n   * The `name` property is for debug purposes only.\r\n   *\r\n   * The `equals` property specifies the comparer function to use to determine if a newly produced\r\n   * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`\r\n   * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.\r\n   * Structural comparison can be convenient if you always produce a new aggregated object and\r\n   * don't want to notify observers if it is structurally the same.\r\n   * This is useful for working with vectors, mouse coordinates etc.\r\n   */\n  function ComputedValue(options) {\n    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n    this.observing_ = [];\n    this.newObserving_ = null;\n    this.isBeingObserved_ = false;\n    this.isPendingUnobservation_ = false;\n    this.observers_ = new Set();\n    this.diffValue_ = 0;\n    this.runId_ = 0;\n    this.lastAccessedBy_ = 0;\n    this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n    this.unboundDepsCount_ = 0;\n    this.value_ = new CaughtException(null);\n    this.name_ = void 0;\n    this.triggeredBy_ = void 0;\n    this.isComputing_ = false;\n    this.isRunningSetter_ = false;\n    this.derivation = void 0;\n    this.setter_ = void 0;\n    this.isTracing_ = TraceMode.NONE;\n    this.scope_ = void 0;\n    this.equals_ = void 0;\n    this.requiresReaction_ = void 0;\n    this.keepAlive_ = void 0;\n    this.onBOL = void 0;\n    this.onBUOL = void 0;\n    if (!options.get) {\n      die(31);\n    }\n    this.derivation = options.get;\n    this.name_ = options.name || ( true ? \"ComputedValue@\" + getNextId() : 0);\n    if (options.set) {\n      this.setter_ = createAction( true ? this.name_ + \"-setter\" : 0, options.set);\n    }\n    this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer[\"default\"]);\n    this.scope_ = options.context;\n    this.requiresReaction_ = options.requiresReaction;\n    this.keepAlive_ = !!options.keepAlive;\n  }\n  var _proto = ComputedValue.prototype;\n  _proto.onBecomeStale_ = function onBecomeStale_() {\n    propagateMaybeChanged(this);\n  };\n  _proto.onBO = function onBO() {\n    if (this.onBOL) {\n      this.onBOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  };\n  _proto.onBUO = function onBUO() {\n    if (this.onBUOL) {\n      this.onBUOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }\n  /**\r\n   * Returns the current value of this computed value.\r\n   * Will evaluate its computation first if needed.\r\n   */;\n  _proto.get = function get() {\n    if (this.isComputing_) {\n      die(32, this.name_, this.derivation);\n    }\n    if (globalState.inBatch === 0 &&\n    // !globalState.trackingDerivatpion &&\n    this.observers_.size === 0 && !this.keepAlive_) {\n      if (shouldCompute(this)) {\n        this.warnAboutUntrackedRead_();\n        startBatch(); // See perf test 'computed memoization'\n        this.value_ = this.computeValue_(false);\n        endBatch();\n      }\n    } else {\n      reportObserved(this);\n      if (shouldCompute(this)) {\n        var prevTrackingContext = globalState.trackingContext;\n        if (this.keepAlive_ && !prevTrackingContext) {\n          globalState.trackingContext = this;\n        }\n        if (this.trackAndCompute()) {\n          propagateChangeConfirmed(this);\n        }\n        globalState.trackingContext = prevTrackingContext;\n      }\n    }\n    var result = this.value_;\n    if (isCaughtException(result)) {\n      throw result.cause;\n    }\n    return result;\n  };\n  _proto.set = function set(value) {\n    if (this.setter_) {\n      if (this.isRunningSetter_) {\n        die(33, this.name_);\n      }\n      this.isRunningSetter_ = true;\n      try {\n        this.setter_.call(this.scope_, value);\n      } finally {\n        this.isRunningSetter_ = false;\n      }\n    } else {\n      die(34, this.name_);\n    }\n  };\n  _proto.trackAndCompute = function trackAndCompute() {\n    // N.B: unminified as it is used by MST\n    var oldValue = this.value_;\n    var wasSuspended = /* see #1208 */this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;\n    var newValue = this.computeValue_(true);\n    var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);\n    if (changed) {\n      this.value_ = newValue;\n      if ( true && isSpyEnabled()) {\n        spyReport({\n          observableKind: \"computed\",\n          debugObjectName: this.name_,\n          object: this.scope_,\n          type: \"update\",\n          oldValue: oldValue,\n          newValue: newValue\n        });\n      }\n    }\n    return changed;\n  };\n  _proto.computeValue_ = function computeValue_(track) {\n    this.isComputing_ = true;\n    // don't allow state changes during computation\n    var prev = allowStateChangesStart(false);\n    var res;\n    if (track) {\n      res = trackDerivedFunction(this, this.derivation, this.scope_);\n    } else {\n      if (globalState.disableErrorBoundaries === true) {\n        res = this.derivation.call(this.scope_);\n      } else {\n        try {\n          res = this.derivation.call(this.scope_);\n        } catch (e) {\n          res = new CaughtException(e);\n        }\n      }\n    }\n    allowStateChangesEnd(prev);\n    this.isComputing_ = false;\n    return res;\n  };\n  _proto.suspend_ = function suspend_() {\n    if (!this.keepAlive_) {\n      clearObserving(this);\n      this.value_ = undefined; // don't hold on to computed value!\n      if ( true && this.isTracing_ !== TraceMode.NONE) {\n        console.log(\"[mobx.trace] Computed value '\" + this.name_ + \"' was suspended and it will recompute on the next access.\");\n      }\n    }\n  };\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    var _this = this;\n    var firstTime = true;\n    var prevValue = undefined;\n    return autorun(function () {\n      // TODO: why is this in a different place than the spyReport() function? in all other observables it's called in the same place\n      var newValue = _this.get();\n      if (!firstTime || fireImmediately) {\n        var prevU = untrackedStart();\n        listener({\n          observableKind: \"computed\",\n          debugObjectName: _this.name_,\n          type: UPDATE,\n          object: _this,\n          newValue: newValue,\n          oldValue: prevValue\n        });\n        untrackedEnd(prevU);\n      }\n      firstTime = false;\n      prevValue = newValue;\n    });\n  };\n  _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {\n    if (false) {}\n    if (this.isTracing_ !== TraceMode.NONE) {\n      console.log(\"[mobx.trace] Computed value '\" + this.name_ + \"' is being read outside a reactive context. Doing a full recompute.\");\n    }\n    if (typeof this.requiresReaction_ === \"boolean\" ? this.requiresReaction_ : globalState.computedRequiresReaction) {\n      console.warn(\"[mobx] Computed value '\" + this.name_ + \"' is being read outside a reactive context. Doing a full recompute.\");\n    }\n  };\n  _proto.toString = function toString() {\n    return this.name_ + \"[\" + this.derivation.toString() + \"]\";\n  };\n  _proto.valueOf = function valueOf() {\n    return toPrimitive(this.get());\n  };\n  _proto[_Symbol$toPrimitive$1] = function () {\n    return this.valueOf();\n  };\n  return ComputedValue;\n}();\nvar isComputedValue = /*#__PURE__*/createInstanceofPredicate(\"ComputedValue\", ComputedValue);\n\nvar IDerivationState_;\n(function (IDerivationState_) {\n  // before being run or (outside batch and not being observed)\n  // at this point derivation is not holding any data about dependency tree\n  IDerivationState_[IDerivationState_[\"NOT_TRACKING_\"] = -1] = \"NOT_TRACKING_\";\n  // no shallow dependency changed since last computation\n  // won't recalculate derivation\n  // this is what makes mobx fast\n  IDerivationState_[IDerivationState_[\"UP_TO_DATE_\"] = 0] = \"UP_TO_DATE_\";\n  // some deep dependency changed, but don't know if shallow dependency changed\n  // will require to check first if UP_TO_DATE or POSSIBLY_STALE\n  // currently only ComputedValue will propagate POSSIBLY_STALE\n  //\n  // having this state is second big optimization:\n  // don't have to recompute on every dependency change, but only when it's needed\n  IDerivationState_[IDerivationState_[\"POSSIBLY_STALE_\"] = 1] = \"POSSIBLY_STALE_\";\n  // A shallow dependency has changed since last computation and the derivation\n  // will need to recompute when it's needed next.\n  IDerivationState_[IDerivationState_[\"STALE_\"] = 2] = \"STALE_\";\n})(IDerivationState_ || (IDerivationState_ = {}));\nvar TraceMode;\n(function (TraceMode) {\n  TraceMode[TraceMode[\"NONE\"] = 0] = \"NONE\";\n  TraceMode[TraceMode[\"LOG\"] = 1] = \"LOG\";\n  TraceMode[TraceMode[\"BREAK\"] = 2] = \"BREAK\";\n})(TraceMode || (TraceMode = {}));\nvar CaughtException = function CaughtException(cause) {\n  this.cause = void 0;\n  this.cause = cause;\n  // Empty\n};\n\nfunction isCaughtException(e) {\n  return e instanceof CaughtException;\n}\n/**\r\n * Finds out whether any dependency of the derivation has actually changed.\r\n * If dependenciesState is 1 then it will recalculate dependencies,\r\n * if any dependency changed it will propagate it by changing dependenciesState to 2.\r\n *\r\n * By iterating over the dependencies in the same order that they were reported and\r\n * stopping on the first change, all the recalculations are only called for ComputedValues\r\n * that will be tracked by derivation. That is because we assume that if the first x\r\n * dependencies of the derivation doesn't change then the derivation should run the same way\r\n * up until accessing x-th dependency.\r\n */\nfunction shouldCompute(derivation) {\n  switch (derivation.dependenciesState_) {\n    case IDerivationState_.UP_TO_DATE_:\n      return false;\n    case IDerivationState_.NOT_TRACKING_:\n    case IDerivationState_.STALE_:\n      return true;\n    case IDerivationState_.POSSIBLY_STALE_:\n      {\n        // state propagation can occur outside of action/reactive context #2195\n        var prevAllowStateReads = allowStateReadsStart(true);\n        var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.\n        var obs = derivation.observing_,\n          l = obs.length;\n        for (var i = 0; i < l; i++) {\n          var obj = obs[i];\n          if (isComputedValue(obj)) {\n            if (globalState.disableErrorBoundaries) {\n              obj.get();\n            } else {\n              try {\n                obj.get();\n              } catch (e) {\n                // we are not interested in the value *or* exception at this moment, but if there is one, notify all\n                untrackedEnd(prevUntracked);\n                allowStateReadsEnd(prevAllowStateReads);\n                return true;\n              }\n            }\n            // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.\n            // and `derivation` is an observer of `obj`\n            // invariantShouldCompute(derivation)\n            if (derivation.dependenciesState_ === IDerivationState_.STALE_) {\n              untrackedEnd(prevUntracked);\n              allowStateReadsEnd(prevAllowStateReads);\n              return true;\n            }\n          }\n        }\n        changeDependenciesStateTo0(derivation);\n        untrackedEnd(prevUntracked);\n        allowStateReadsEnd(prevAllowStateReads);\n        return false;\n      }\n  }\n}\nfunction isComputingDerivation() {\n  return globalState.trackingDerivation !== null; // filter out actions inside computations\n}\n\nfunction checkIfStateModificationsAreAllowed(atom) {\n  if (false) {}\n  var hasObservers = atom.observers_.size > 0;\n  // Should not be possible to change observed state outside strict mode, except during initialization, see #563\n  if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === \"always\")) {\n    console.warn(\"[MobX] \" + (globalState.enforceActions ? \"Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: \" : \"Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: \") + atom.name_);\n  }\n}\nfunction checkIfStateReadsAreAllowed(observable) {\n  if ( true && !globalState.allowStateReads && globalState.observableRequiresReaction) {\n    console.warn(\"[mobx] Observable '\" + observable.name_ + \"' being read outside a reactive context.\");\n  }\n}\n/**\r\n * Executes the provided function `f` and tracks which observables are being accessed.\r\n * The tracking information is stored on the `derivation` object and the derivation is registered\r\n * as observer of any of the accessed observables.\r\n */\nfunction trackDerivedFunction(derivation, f, context) {\n  var prevAllowStateReads = allowStateReadsStart(true);\n  // pre allocate array allocation + room for variation in deps\n  // array will be trimmed by bindDependencies\n  changeDependenciesStateTo0(derivation);\n  derivation.newObserving_ = new Array(derivation.observing_.length + 100);\n  derivation.unboundDepsCount_ = 0;\n  derivation.runId_ = ++globalState.runId;\n  var prevTracking = globalState.trackingDerivation;\n  globalState.trackingDerivation = derivation;\n  globalState.inBatch++;\n  var result;\n  if (globalState.disableErrorBoundaries === true) {\n    result = f.call(context);\n  } else {\n    try {\n      result = f.call(context);\n    } catch (e) {\n      result = new CaughtException(e);\n    }\n  }\n  globalState.inBatch--;\n  globalState.trackingDerivation = prevTracking;\n  bindDependencies(derivation);\n  warnAboutDerivationWithoutDependencies(derivation);\n  allowStateReadsEnd(prevAllowStateReads);\n  return result;\n}\nfunction warnAboutDerivationWithoutDependencies(derivation) {\n  if (false) {}\n  if (derivation.observing_.length !== 0) {\n    return;\n  }\n  if (typeof derivation.requiresObservable_ === \"boolean\" ? derivation.requiresObservable_ : globalState.reactionRequiresObservable) {\n    console.warn(\"[mobx] Derivation '\" + derivation.name_ + \"' is created/updated without reading any observable value.\");\n  }\n}\n/**\r\n * diffs newObserving with observing.\r\n * update observing to be newObserving with unique observables\r\n * notify observers that become observed/unobserved\r\n */\nfunction bindDependencies(derivation) {\n  // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, \"INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1\");\n  var prevObserving = derivation.observing_;\n  var observing = derivation.observing_ = derivation.newObserving_;\n  var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_;\n  // Go through all new observables and check diffValue: (this list can contain duplicates):\n  //   0: first occurrence, change to 1 and keep it\n  //   1: extra occurrence, drop it\n  var i0 = 0,\n    l = derivation.unboundDepsCount_;\n  for (var i = 0; i < l; i++) {\n    var dep = observing[i];\n    if (dep.diffValue_ === 0) {\n      dep.diffValue_ = 1;\n      if (i0 !== i) {\n        observing[i0] = dep;\n      }\n      i0++;\n    }\n    // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,\n    // not hitting the condition\n    if (dep.dependenciesState_ > lowestNewObservingDerivationState) {\n      lowestNewObservingDerivationState = dep.dependenciesState_;\n    }\n  }\n  observing.length = i0;\n  derivation.newObserving_ = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)\n  // Go through all old observables and check diffValue: (it is unique after last bindDependencies)\n  //   0: it's not in new observables, unobserve it\n  //   1: it keeps being observed, don't want to notify it. change to 0\n  l = prevObserving.length;\n  while (l--) {\n    var _dep = prevObserving[l];\n    if (_dep.diffValue_ === 0) {\n      removeObserver(_dep, derivation);\n    }\n    _dep.diffValue_ = 0;\n  }\n  // Go through all new observables and check diffValue: (now it should be unique)\n  //   0: it was set to 0 in last loop. don't need to do anything.\n  //   1: it wasn't observed, let's observe it. set back to 0\n  while (i0--) {\n    var _dep2 = observing[i0];\n    if (_dep2.diffValue_ === 1) {\n      _dep2.diffValue_ = 0;\n      addObserver(_dep2, derivation);\n    }\n  }\n  // Some new observed derivations may become stale during this derivation computation\n  // so they have had no chance to propagate staleness (#916)\n  if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {\n    derivation.dependenciesState_ = lowestNewObservingDerivationState;\n    derivation.onBecomeStale_();\n  }\n}\nfunction clearObserving(derivation) {\n  // invariant(globalState.inBatch > 0, \"INTERNAL ERROR clearObserving should be called only inside batch\");\n  var obs = derivation.observing_;\n  derivation.observing_ = [];\n  var i = obs.length;\n  while (i--) {\n    removeObserver(obs[i], derivation);\n  }\n  derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n}\nfunction untracked(action) {\n  var prev = untrackedStart();\n  try {\n    return action();\n  } finally {\n    untrackedEnd(prev);\n  }\n}\nfunction untrackedStart() {\n  var prev = globalState.trackingDerivation;\n  globalState.trackingDerivation = null;\n  return prev;\n}\nfunction untrackedEnd(prev) {\n  globalState.trackingDerivation = prev;\n}\nfunction allowStateReadsStart(allowStateReads) {\n  var prev = globalState.allowStateReads;\n  globalState.allowStateReads = allowStateReads;\n  return prev;\n}\nfunction allowStateReadsEnd(prev) {\n  globalState.allowStateReads = prev;\n}\n/**\r\n * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0\r\n *\r\n */\nfunction changeDependenciesStateTo0(derivation) {\n  if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n    return;\n  }\n  derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;\n  var obs = derivation.observing_;\n  var i = obs.length;\n  while (i--) {\n    obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n  }\n}\n\n/**\r\n * These values will persist if global state is reset\r\n */\nvar persistentKeys = [\"mobxGuid\", \"spyListeners\", \"enforceActions\", \"computedRequiresReaction\", \"reactionRequiresObservable\", \"observableRequiresReaction\", \"allowStateReads\", \"disableErrorBoundaries\", \"runId\", \"UNCHANGED\", \"useProxies\"];\nvar MobXGlobals = function MobXGlobals() {\n  this.version = 6;\n  this.UNCHANGED = {};\n  this.trackingDerivation = null;\n  this.trackingContext = null;\n  this.runId = 0;\n  this.mobxGuid = 0;\n  this.inBatch = 0;\n  this.pendingUnobservations = [];\n  this.pendingReactions = [];\n  this.isRunningReactions = false;\n  this.allowStateChanges = false;\n  this.allowStateReads = true;\n  this.enforceActions = true;\n  this.spyListeners = [];\n  this.globalReactionErrorHandlers = [];\n  this.computedRequiresReaction = false;\n  this.reactionRequiresObservable = false;\n  this.observableRequiresReaction = false;\n  this.disableErrorBoundaries = false;\n  this.suppressReactionErrors = false;\n  this.useProxies = true;\n  this.verifyProxies = false;\n  this.safeDescriptors = true;\n  this.stateVersion = Number.MIN_SAFE_INTEGER;\n};\nvar canMergeGlobalState = true;\nvar isolateCalled = false;\nvar globalState = /*#__PURE__*/function () {\n  var global = /*#__PURE__*/getGlobal();\n  if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) {\n    canMergeGlobalState = false;\n  }\n  if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) {\n    canMergeGlobalState = false;\n  }\n  if (!canMergeGlobalState) {\n    // Because this is a IIFE we need to let isolateCalled a chance to change\n    // so we run it after the event loop completed at least 1 iteration\n    setTimeout(function () {\n      if (!isolateCalled) {\n        die(35);\n      }\n    }, 1);\n    return new MobXGlobals();\n  } else if (global.__mobxGlobals) {\n    global.__mobxInstanceCount += 1;\n    if (!global.__mobxGlobals.UNCHANGED) {\n      global.__mobxGlobals.UNCHANGED = {};\n    } // make merge backward compatible\n    return global.__mobxGlobals;\n  } else {\n    global.__mobxInstanceCount = 1;\n    return global.__mobxGlobals = /*#__PURE__*/new MobXGlobals();\n  }\n}();\nfunction isolateGlobalState() {\n  if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions) {\n    die(36);\n  }\n  isolateCalled = true;\n  if (canMergeGlobalState) {\n    var global = getGlobal();\n    if (--global.__mobxInstanceCount === 0) {\n      global.__mobxGlobals = undefined;\n    }\n    globalState = new MobXGlobals();\n  }\n}\nfunction getGlobalState() {\n  return globalState;\n}\n/**\r\n * For testing purposes only; this will break the internal state of existing observables,\r\n * but can be used to get back at a stable state after throwing errors\r\n */\nfunction resetGlobalState() {\n  var defaultGlobals = new MobXGlobals();\n  for (var key in defaultGlobals) {\n    if (persistentKeys.indexOf(key) === -1) {\n      globalState[key] = defaultGlobals[key];\n    }\n  }\n  globalState.allowStateChanges = !globalState.enforceActions;\n}\n\nfunction hasObservers(observable) {\n  return observable.observers_ && observable.observers_.size > 0;\n}\nfunction getObservers(observable) {\n  return observable.observers_;\n}\n// function invariantObservers(observable: IObservable) {\n//     const list = observable.observers\n//     const map = observable.observersIndexes\n//     const l = list.length\n//     for (let i = 0; i < l; i++) {\n//         const id = list[i].__mapid\n//         if (i) {\n//             invariant(map[id] === i, \"INTERNAL ERROR maps derivation.__mapid to index in list\") // for performance\n//         } else {\n//             invariant(!(id in map), \"INTERNAL ERROR observer on index 0 shouldn't be held in map.\") // for performance\n//         }\n//     }\n//     invariant(\n//         list.length === 0 || Object.keys(map).length === list.length - 1,\n//         \"INTERNAL ERROR there is no junk in map\"\n//     )\n// }\nfunction addObserver(observable, node) {\n  // invariant(node.dependenciesState !== -1, \"INTERNAL ERROR, can add only dependenciesState !== -1\");\n  // invariant(observable._observers.indexOf(node) === -1, \"INTERNAL ERROR add already added node\");\n  // invariantObservers(observable);\n  observable.observers_.add(node);\n  if (observable.lowestObserverState_ > node.dependenciesState_) {\n    observable.lowestObserverState_ = node.dependenciesState_;\n  }\n  // invariantObservers(observable);\n  // invariant(observable._observers.indexOf(node) !== -1, \"INTERNAL ERROR didn't add node\");\n}\n\nfunction removeObserver(observable, node) {\n  // invariant(globalState.inBatch > 0, \"INTERNAL ERROR, remove should be called only inside batch\");\n  // invariant(observable._observers.indexOf(node) !== -1, \"INTERNAL ERROR remove already removed node\");\n  // invariantObservers(observable);\n  observable.observers_[\"delete\"](node);\n  if (observable.observers_.size === 0) {\n    // deleting last observer\n    queueForUnobservation(observable);\n  }\n  // invariantObservers(observable);\n  // invariant(observable._observers.indexOf(node) === -1, \"INTERNAL ERROR remove already removed node2\");\n}\n\nfunction queueForUnobservation(observable) {\n  if (observable.isPendingUnobservation_ === false) {\n    // invariant(observable._observers.length === 0, \"INTERNAL ERROR, should only queue for unobservation unobserved observables\");\n    observable.isPendingUnobservation_ = true;\n    globalState.pendingUnobservations.push(observable);\n  }\n}\n/**\r\n * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.\r\n * During a batch `onBecomeUnobserved` will be called at most once per observable.\r\n * Avoids unnecessary recalculations.\r\n */\nfunction startBatch() {\n  globalState.inBatch++;\n}\nfunction endBatch() {\n  if (--globalState.inBatch === 0) {\n    runReactions();\n    // the batch is actually about to finish, all unobserving should happen here.\n    var list = globalState.pendingUnobservations;\n    for (var i = 0; i < list.length; i++) {\n      var observable = list[i];\n      observable.isPendingUnobservation_ = false;\n      if (observable.observers_.size === 0) {\n        if (observable.isBeingObserved_) {\n          // if this observable had reactive observers, trigger the hooks\n          observable.isBeingObserved_ = false;\n          observable.onBUO();\n        }\n        if (observable instanceof ComputedValue) {\n          // computed values are automatically teared down when the last observer leaves\n          // this process happens recursively, this computed might be the last observabe of another, etc..\n          observable.suspend_();\n        }\n      }\n    }\n    globalState.pendingUnobservations = [];\n  }\n}\nfunction reportObserved(observable) {\n  checkIfStateReadsAreAllowed(observable);\n  var derivation = globalState.trackingDerivation;\n  if (derivation !== null) {\n    /**\r\n     * Simple optimization, give each derivation run an unique id (runId)\r\n     * Check if last time this observable was accessed the same runId is used\r\n     * if this is the case, the relation is already known\r\n     */\n    if (derivation.runId_ !== observable.lastAccessedBy_) {\n      observable.lastAccessedBy_ = derivation.runId_;\n      // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...\n      derivation.newObserving_[derivation.unboundDepsCount_++] = observable;\n      if (!observable.isBeingObserved_ && globalState.trackingContext) {\n        observable.isBeingObserved_ = true;\n        observable.onBO();\n      }\n    }\n    return observable.isBeingObserved_;\n  } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {\n    queueForUnobservation(observable);\n  }\n  return false;\n}\n// function invariantLOS(observable: IObservable, msg: string) {\n//     // it's expensive so better not run it in produciton. but temporarily helpful for testing\n//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)\n//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`\n//     throw new Error(\n//         \"lowestObserverState is wrong for \" +\n//             msg +\n//             \" because \" +\n//             min +\n//             \" < \" +\n//             observable.lowestObserverState\n//     )\n// }\n/**\r\n * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly\r\n * It will propagate changes to observers from previous run\r\n * It's hard or maybe impossible (with reasonable perf) to get it right with current approach\r\n * Hopefully self reruning autoruns aren't a feature people should depend on\r\n * Also most basic use cases should be ok\r\n */\n// Called by Atom when its value changes\nfunction propagateChanged(observable) {\n  // invariantLOS(observable, \"changed start\");\n  if (observable.lowestObserverState_ === IDerivationState_.STALE_) {\n    return;\n  }\n  observable.lowestObserverState_ = IDerivationState_.STALE_;\n  // Ideally we use for..of here, but the downcompiled version is really slow...\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n      if ( true && d.isTracing_ !== TraceMode.NONE) {\n        logTraceInfo(d, observable);\n      }\n      d.onBecomeStale_();\n    }\n    d.dependenciesState_ = IDerivationState_.STALE_;\n  });\n  // invariantLOS(observable, \"changed end\");\n}\n// Called by ComputedValue when it recalculate and its value changed\nfunction propagateChangeConfirmed(observable) {\n  // invariantLOS(observable, \"confirmed start\");\n  if (observable.lowestObserverState_ === IDerivationState_.STALE_) {\n    return;\n  }\n  observable.lowestObserverState_ = IDerivationState_.STALE_;\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {\n      d.dependenciesState_ = IDerivationState_.STALE_;\n      if ( true && d.isTracing_ !== TraceMode.NONE) {\n        logTraceInfo(d, observable);\n      }\n    } else if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.\n    ) {\n      observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n    }\n  });\n  // invariantLOS(observable, \"confirmed end\");\n}\n// Used by computed when its dependency changed, but we don't wan't to immediately recompute.\nfunction propagateMaybeChanged(observable) {\n  // invariantLOS(observable, \"maybe start\");\n  if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) {\n    return;\n  }\n  observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n      d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;\n      d.onBecomeStale_();\n    }\n  });\n  // invariantLOS(observable, \"maybe end\");\n}\n\nfunction logTraceInfo(derivation, observable) {\n  console.log(\"[mobx.trace] '\" + derivation.name_ + \"' is invalidated due to a change in: '\" + observable.name_ + \"'\");\n  if (derivation.isTracing_ === TraceMode.BREAK) {\n    var lines = [];\n    printDepTree(getDependencyTree(derivation), lines, 1);\n    // prettier-ignore\n    new Function(\"debugger;\\n/*\\nTracing '\" + derivation.name_ + \"'\\n\\nYou are entering this break point because derivation '\" + derivation.name_ + \"' is being traced and '\" + observable.name_ + \"' is now forcing it to update.\\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\\n\\n\" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\\//g, \"/\") : \"\") + \"\\n\\nThe dependencies for this derivation are:\\n\\n\" + lines.join(\"\\n\") + \"\\n*/\\n    \")();\n  }\n}\nfunction printDepTree(tree, lines, depth) {\n  if (lines.length >= 1000) {\n    lines.push(\"(and many more)\");\n    return;\n  }\n  lines.push(\"\" + \"\\t\".repeat(depth - 1) + tree.name);\n  if (tree.dependencies) {\n    tree.dependencies.forEach(function (child) {\n      return printDepTree(child, lines, depth + 1);\n    });\n  }\n}\n\nvar Reaction = /*#__PURE__*/function () {\n  // nodes we are looking at. Our value depends on these nodes\n\n  function Reaction(name_, onInvalidate_, errorHandler_, requiresObservable_) {\n    if (name_ === void 0) {\n      name_ =  true ? \"Reaction@\" + getNextId() : 0;\n    }\n    this.name_ = void 0;\n    this.onInvalidate_ = void 0;\n    this.errorHandler_ = void 0;\n    this.requiresObservable_ = void 0;\n    this.observing_ = [];\n    this.newObserving_ = [];\n    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n    this.diffValue_ = 0;\n    this.runId_ = 0;\n    this.unboundDepsCount_ = 0;\n    this.isDisposed_ = false;\n    this.isScheduled_ = false;\n    this.isTrackPending_ = false;\n    this.isRunning_ = false;\n    this.isTracing_ = TraceMode.NONE;\n    this.name_ = name_;\n    this.onInvalidate_ = onInvalidate_;\n    this.errorHandler_ = errorHandler_;\n    this.requiresObservable_ = requiresObservable_;\n  }\n  var _proto = Reaction.prototype;\n  _proto.onBecomeStale_ = function onBecomeStale_() {\n    this.schedule_();\n  };\n  _proto.schedule_ = function schedule_() {\n    if (!this.isScheduled_) {\n      this.isScheduled_ = true;\n      globalState.pendingReactions.push(this);\n      runReactions();\n    }\n  };\n  _proto.isScheduled = function isScheduled() {\n    return this.isScheduled_;\n  }\n  /**\r\n   * internal, use schedule() if you intend to kick off a reaction\r\n   */;\n  _proto.runReaction_ = function runReaction_() {\n    if (!this.isDisposed_) {\n      startBatch();\n      this.isScheduled_ = false;\n      var prev = globalState.trackingContext;\n      globalState.trackingContext = this;\n      if (shouldCompute(this)) {\n        this.isTrackPending_ = true;\n        try {\n          this.onInvalidate_();\n          if ( true && this.isTrackPending_ && isSpyEnabled()) {\n            // onInvalidate didn't trigger track right away..\n            spyReport({\n              name: this.name_,\n              type: \"scheduled-reaction\"\n            });\n          }\n        } catch (e) {\n          this.reportExceptionInDerivation_(e);\n        }\n      }\n      globalState.trackingContext = prev;\n      endBatch();\n    }\n  };\n  _proto.track = function track(fn) {\n    if (this.isDisposed_) {\n      return;\n      // console.warn(\"Reaction already disposed\") // Note: Not a warning / error in mobx 4 either\n    }\n\n    startBatch();\n    var notify = isSpyEnabled();\n    var startTime;\n    if ( true && notify) {\n      startTime = Date.now();\n      spyReportStart({\n        name: this.name_,\n        type: \"reaction\"\n      });\n    }\n    this.isRunning_ = true;\n    var prevReaction = globalState.trackingContext; // reactions could create reactions...\n    globalState.trackingContext = this;\n    var result = trackDerivedFunction(this, fn, undefined);\n    globalState.trackingContext = prevReaction;\n    this.isRunning_ = false;\n    this.isTrackPending_ = false;\n    if (this.isDisposed_) {\n      // disposed during last run. Clean up everything that was bound after the dispose call.\n      clearObserving(this);\n    }\n    if (isCaughtException(result)) {\n      this.reportExceptionInDerivation_(result.cause);\n    }\n    if ( true && notify) {\n      spyReportEnd({\n        time: Date.now() - startTime\n      });\n    }\n    endBatch();\n  };\n  _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {\n    var _this = this;\n    if (this.errorHandler_) {\n      this.errorHandler_(error, this);\n      return;\n    }\n    if (globalState.disableErrorBoundaries) {\n      throw error;\n    }\n    var message =  true ? \"[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '\" + this + \"'\" : 0;\n    if (!globalState.suppressReactionErrors) {\n      console.error(message, error);\n      /** If debugging brought you here, please, read the above message :-). Tnx! */\n    } else if (true) {\n      console.warn(\"[mobx] (error in reaction '\" + this.name_ + \"' suppressed, fix error of causing action below)\");\n    } // prettier-ignore\n    if ( true && isSpyEnabled()) {\n      spyReport({\n        type: \"error\",\n        name: this.name_,\n        message: message,\n        error: \"\" + error\n      });\n    }\n    globalState.globalReactionErrorHandlers.forEach(function (f) {\n      return f(error, _this);\n    });\n  };\n  _proto.dispose = function dispose() {\n    if (!this.isDisposed_) {\n      this.isDisposed_ = true;\n      if (!this.isRunning_) {\n        // if disposed while running, clean up later. Maybe not optimal, but rare case\n        startBatch();\n        clearObserving(this);\n        endBatch();\n      }\n    }\n  };\n  _proto.getDisposer_ = function getDisposer_(abortSignal) {\n    var _this2 = this;\n    var dispose = function dispose() {\n      _this2.dispose();\n      abortSignal == null ? void 0 : abortSignal.removeEventListener == null ? void 0 : abortSignal.removeEventListener(\"abort\", dispose);\n    };\n    abortSignal == null ? void 0 : abortSignal.addEventListener == null ? void 0 : abortSignal.addEventListener(\"abort\", dispose);\n    dispose[$mobx] = this;\n    return dispose;\n  };\n  _proto.toString = function toString() {\n    return \"Reaction[\" + this.name_ + \"]\";\n  };\n  _proto.trace = function trace$1(enterBreakPoint) {\n    if (enterBreakPoint === void 0) {\n      enterBreakPoint = false;\n    }\n    trace(this, enterBreakPoint);\n  };\n  return Reaction;\n}();\nfunction onReactionError(handler) {\n  globalState.globalReactionErrorHandlers.push(handler);\n  return function () {\n    var idx = globalState.globalReactionErrorHandlers.indexOf(handler);\n    if (idx >= 0) {\n      globalState.globalReactionErrorHandlers.splice(idx, 1);\n    }\n  };\n}\n/**\r\n * Magic number alert!\r\n * Defines within how many times a reaction is allowed to re-trigger itself\r\n * until it is assumed that this is gonna be a never ending loop...\r\n */\nvar MAX_REACTION_ITERATIONS = 100;\nvar reactionScheduler = function reactionScheduler(f) {\n  return f();\n};\nfunction runReactions() {\n  // Trampolining, if runReactions are already running, new reactions will be picked up\n  if (globalState.inBatch > 0 || globalState.isRunningReactions) {\n    return;\n  }\n  reactionScheduler(runReactionsHelper);\n}\nfunction runReactionsHelper() {\n  globalState.isRunningReactions = true;\n  var allReactions = globalState.pendingReactions;\n  var iterations = 0;\n  // While running reactions, new reactions might be triggered.\n  // Hence we work with two variables and check whether\n  // we converge to no remaining reactions after a while.\n  while (allReactions.length > 0) {\n    if (++iterations === MAX_REACTION_ITERATIONS) {\n      console.error( true ? \"Reaction doesn't converge to a stable state after \" + MAX_REACTION_ITERATIONS + \" iterations.\" + (\" Probably there is a cycle in the reactive function: \" + allReactions[0]) : 0);\n      allReactions.splice(0); // clear reactions\n    }\n\n    var remainingReactions = allReactions.splice(0);\n    for (var i = 0, l = remainingReactions.length; i < l; i++) {\n      remainingReactions[i].runReaction_();\n    }\n  }\n  globalState.isRunningReactions = false;\n}\nvar isReaction = /*#__PURE__*/createInstanceofPredicate(\"Reaction\", Reaction);\nfunction setReactionScheduler(fn) {\n  var baseScheduler = reactionScheduler;\n  reactionScheduler = function reactionScheduler(f) {\n    return fn(function () {\n      return baseScheduler(f);\n    });\n  };\n}\n\nfunction isSpyEnabled() {\n  return  true && !!globalState.spyListeners.length;\n}\nfunction spyReport(event) {\n  if (false) {} // dead code elimination can do the rest\n  if (!globalState.spyListeners.length) {\n    return;\n  }\n  var listeners = globalState.spyListeners;\n  for (var i = 0, l = listeners.length; i < l; i++) {\n    listeners[i](event);\n  }\n}\nfunction spyReportStart(event) {\n  if (false) {}\n  var change = _extends({}, event, {\n    spyReportStart: true\n  });\n  spyReport(change);\n}\nvar END_EVENT = {\n  type: \"report-end\",\n  spyReportEnd: true\n};\nfunction spyReportEnd(change) {\n  if (false) {}\n  if (change) {\n    spyReport(_extends({}, change, {\n      type: \"report-end\",\n      spyReportEnd: true\n    }));\n  } else {\n    spyReport(END_EVENT);\n  }\n}\nfunction spy(listener) {\n  if (false) {} else {\n    globalState.spyListeners.push(listener);\n    return once(function () {\n      globalState.spyListeners = globalState.spyListeners.filter(function (l) {\n        return l !== listener;\n      });\n    });\n  }\n}\n\nvar ACTION = \"action\";\nvar ACTION_BOUND = \"action.bound\";\nvar AUTOACTION = \"autoAction\";\nvar AUTOACTION_BOUND = \"autoAction.bound\";\nvar DEFAULT_ACTION_NAME = \"<unnamed action>\";\nvar actionAnnotation = /*#__PURE__*/createActionAnnotation(ACTION);\nvar actionBoundAnnotation = /*#__PURE__*/createActionAnnotation(ACTION_BOUND, {\n  bound: true\n});\nvar autoActionAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION, {\n  autoAction: true\n});\nvar autoActionBoundAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION_BOUND, {\n  autoAction: true,\n  bound: true\n});\nfunction createActionFactory(autoAction) {\n  var res = function action(arg1, arg2) {\n    // action(fn() {})\n    if (isFunction(arg1)) {\n      return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction);\n    }\n    // action(\"name\", fn() {})\n    if (isFunction(arg2)) {\n      return createAction(arg1, arg2, autoAction);\n    }\n    // @action\n    if (isStringish(arg2)) {\n      return storeAnnotation(arg1, arg2, autoAction ? autoActionAnnotation : actionAnnotation);\n    }\n    // action(\"name\") & @action(\"name\")\n    if (isStringish(arg1)) {\n      return createDecoratorAnnotation(createActionAnnotation(autoAction ? AUTOACTION : ACTION, {\n        name: arg1,\n        autoAction: autoAction\n      }));\n    }\n    if (true) {\n      die(\"Invalid arguments for `action`\");\n    }\n  };\n  return res;\n}\nvar action = /*#__PURE__*/createActionFactory(false);\nObject.assign(action, actionAnnotation);\nvar autoAction = /*#__PURE__*/createActionFactory(true);\nObject.assign(autoAction, autoActionAnnotation);\naction.bound = /*#__PURE__*/createDecoratorAnnotation(actionBoundAnnotation);\nautoAction.bound = /*#__PURE__*/createDecoratorAnnotation(autoActionBoundAnnotation);\nfunction runInAction(fn) {\n  return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined);\n}\nfunction isAction(thing) {\n  return isFunction(thing) && thing.isMobxAction === true;\n}\n\n/**\r\n * Creates a named reactive view and keeps it alive, so that the view is always\r\n * updated if one of the dependencies changes, even when the view is not further used by something else.\r\n * @param view The reactive view\r\n * @returns disposer function, which can be used to stop the view from being updated in the future.\r\n */\nfunction autorun(view, opts) {\n  var _opts$name, _opts, _opts2, _opts2$signal, _opts3;\n  if (opts === void 0) {\n    opts = EMPTY_OBJECT;\n  }\n  if (true) {\n    if (!isFunction(view)) {\n      die(\"Autorun expects a function as first argument\");\n    }\n    if (isAction(view)) {\n      die(\"Autorun does not accept actions since actions are untrackable\");\n    }\n  }\n  var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name :  true ? view.name || \"Autorun@\" + getNextId() : 0;\n  var runSync = !opts.scheduler && !opts.delay;\n  var reaction;\n  if (runSync) {\n    // normal autorun\n    reaction = new Reaction(name, function () {\n      this.track(reactionRunner);\n    }, opts.onError, opts.requiresObservable);\n  } else {\n    var scheduler = createSchedulerFromOptions(opts);\n    // debounced autorun\n    var isScheduled = false;\n    reaction = new Reaction(name, function () {\n      if (!isScheduled) {\n        isScheduled = true;\n        scheduler(function () {\n          isScheduled = false;\n          if (!reaction.isDisposed_) {\n            reaction.track(reactionRunner);\n          }\n        });\n      }\n    }, opts.onError, opts.requiresObservable);\n  }\n  function reactionRunner() {\n    view(reaction);\n  }\n  if (!((_opts2 = opts) != null && (_opts2$signal = _opts2.signal) != null && _opts2$signal.aborted)) {\n    reaction.schedule_();\n  }\n  return reaction.getDisposer_((_opts3 = opts) == null ? void 0 : _opts3.signal);\n}\nvar run = function run(f) {\n  return f();\n};\nfunction createSchedulerFromOptions(opts) {\n  return opts.scheduler ? opts.scheduler : opts.delay ? function (f) {\n    return setTimeout(f, opts.delay);\n  } : run;\n}\nfunction reaction(expression, effect, opts) {\n  var _opts$name2, _opts4, _opts4$signal, _opts5;\n  if (opts === void 0) {\n    opts = EMPTY_OBJECT;\n  }\n  if (true) {\n    if (!isFunction(expression) || !isFunction(effect)) {\n      die(\"First and second argument to reaction should be functions\");\n    }\n    if (!isPlainObject(opts)) {\n      die(\"Third argument of reactions should be an object\");\n    }\n  }\n  var name = (_opts$name2 = opts.name) != null ? _opts$name2 :  true ? \"Reaction@\" + getNextId() : 0;\n  var effectAction = action(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);\n  var runSync = !opts.scheduler && !opts.delay;\n  var scheduler = createSchedulerFromOptions(opts);\n  var firstTime = true;\n  var isScheduled = false;\n  var value;\n  var oldValue;\n  var equals = opts.compareStructural ? comparer.structural : opts.equals || comparer[\"default\"];\n  var r = new Reaction(name, function () {\n    if (firstTime || runSync) {\n      reactionRunner();\n    } else if (!isScheduled) {\n      isScheduled = true;\n      scheduler(reactionRunner);\n    }\n  }, opts.onError, opts.requiresObservable);\n  function reactionRunner() {\n    isScheduled = false;\n    if (r.isDisposed_) {\n      return;\n    }\n    var changed = false;\n    r.track(function () {\n      var nextValue = allowStateChanges(false, function () {\n        return expression(r);\n      });\n      changed = firstTime || !equals(value, nextValue);\n      oldValue = value;\n      value = nextValue;\n    });\n    if (firstTime && opts.fireImmediately) {\n      effectAction(value, oldValue, r);\n    } else if (!firstTime && changed) {\n      effectAction(value, oldValue, r);\n    }\n    firstTime = false;\n  }\n  if (!((_opts4 = opts) != null && (_opts4$signal = _opts4.signal) != null && _opts4$signal.aborted)) {\n    r.schedule_();\n  }\n  return r.getDisposer_((_opts5 = opts) == null ? void 0 : _opts5.signal);\n}\nfunction wrapErrorHandler(errorHandler, baseFn) {\n  return function () {\n    try {\n      return baseFn.apply(this, arguments);\n    } catch (e) {\n      errorHandler.call(this, e);\n    }\n  };\n}\n\nvar ON_BECOME_OBSERVED = \"onBO\";\nvar ON_BECOME_UNOBSERVED = \"onBUO\";\nfunction onBecomeObserved(thing, arg2, arg3) {\n  return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);\n}\nfunction onBecomeUnobserved(thing, arg2, arg3) {\n  return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);\n}\nfunction interceptHook(hook, thing, arg2, arg3) {\n  var atom = typeof arg3 === \"function\" ? getAtom(thing, arg2) : getAtom(thing);\n  var cb = isFunction(arg3) ? arg3 : arg2;\n  var listenersKey = hook + \"L\";\n  if (atom[listenersKey]) {\n    atom[listenersKey].add(cb);\n  } else {\n    atom[listenersKey] = new Set([cb]);\n  }\n  return function () {\n    var hookListeners = atom[listenersKey];\n    if (hookListeners) {\n      hookListeners[\"delete\"](cb);\n      if (hookListeners.size === 0) {\n        delete atom[listenersKey];\n      }\n    }\n  };\n}\n\nvar NEVER = \"never\";\nvar ALWAYS = \"always\";\nvar OBSERVED = \"observed\";\n// const IF_AVAILABLE = \"ifavailable\"\nfunction configure(options) {\n  if (options.isolateGlobalState === true) {\n    isolateGlobalState();\n  }\n  var useProxies = options.useProxies,\n    enforceActions = options.enforceActions;\n  if (useProxies !== undefined) {\n    globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== \"undefined\";\n  }\n  if (useProxies === \"ifavailable\") {\n    globalState.verifyProxies = true;\n  }\n  if (enforceActions !== undefined) {\n    var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;\n    globalState.enforceActions = ea;\n    globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;\n  }\n  [\"computedRequiresReaction\", \"reactionRequiresObservable\", \"observableRequiresReaction\", \"disableErrorBoundaries\", \"safeDescriptors\"].forEach(function (key) {\n    if (key in options) {\n      globalState[key] = !!options[key];\n    }\n  });\n  globalState.allowStateReads = !globalState.observableRequiresReaction;\n  if ( true && globalState.disableErrorBoundaries === true) {\n    console.warn(\"WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.\");\n  }\n  if (options.reactionScheduler) {\n    setReactionScheduler(options.reactionScheduler);\n  }\n}\n\nfunction extendObservable(target, properties, annotations, options) {\n  if (true) {\n    if (arguments.length > 4) {\n      die(\"'extendObservable' expected 2-4 arguments\");\n    }\n    if (typeof target !== \"object\") {\n      die(\"'extendObservable' expects an object as first argument\");\n    }\n    if (isObservableMap(target)) {\n      die(\"'extendObservable' should not be used on maps, use map.merge instead\");\n    }\n    if (!isPlainObject(properties)) {\n      die(\"'extendObservable' only accepts plain objects as second argument\");\n    }\n    if (isObservable(properties) || isObservable(annotations)) {\n      die(\"Extending an object with another observable (object) is not supported\");\n    }\n  }\n  // Pull descriptors first, so we don't have to deal with props added by administration ($mobx)\n  var descriptors = getOwnPropertyDescriptors(properties);\n  var adm = asObservableObject(target, options)[$mobx];\n  startBatch();\n  try {\n    ownKeys(descriptors).forEach(function (key) {\n      adm.extend_(key, descriptors[key],\n      // must pass \"undefined\" for { key: undefined }\n      !annotations ? true : key in annotations ? annotations[key] : true);\n    });\n  } finally {\n    endBatch();\n  }\n  return target;\n}\n\nfunction getDependencyTree(thing, property) {\n  return nodeToDependencyTree(getAtom(thing, property));\n}\nfunction nodeToDependencyTree(node) {\n  var result = {\n    name: node.name_\n  };\n  if (node.observing_ && node.observing_.length > 0) {\n    result.dependencies = unique(node.observing_).map(nodeToDependencyTree);\n  }\n  return result;\n}\nfunction getObserverTree(thing, property) {\n  return nodeToObserverTree(getAtom(thing, property));\n}\nfunction nodeToObserverTree(node) {\n  var result = {\n    name: node.name_\n  };\n  if (hasObservers(node)) {\n    result.observers = Array.from(getObservers(node)).map(nodeToObserverTree);\n  }\n  return result;\n}\nfunction unique(list) {\n  return Array.from(new Set(list));\n}\n\nvar generatorId = 0;\nfunction FlowCancellationError() {\n  this.message = \"FLOW_CANCELLED\";\n}\nFlowCancellationError.prototype = /*#__PURE__*/Object.create(Error.prototype);\nfunction isFlowCancellationError(error) {\n  return error instanceof FlowCancellationError;\n}\nvar flowAnnotation = /*#__PURE__*/createFlowAnnotation(\"flow\");\nvar flowBoundAnnotation = /*#__PURE__*/createFlowAnnotation(\"flow.bound\", {\n  bound: true\n});\nvar flow = /*#__PURE__*/Object.assign(function flow(arg1, arg2) {\n  // @flow\n  if (isStringish(arg2)) {\n    return storeAnnotation(arg1, arg2, flowAnnotation);\n  }\n  // flow(fn)\n  if ( true && arguments.length !== 1) {\n    die(\"Flow expects single argument with generator function\");\n  }\n  var generator = arg1;\n  var name = generator.name || \"<unnamed flow>\";\n  // Implementation based on https://github.com/tj/co/blob/master/index.js\n  var res = function res() {\n    var ctx = this;\n    var args = arguments;\n    var runId = ++generatorId;\n    var gen = action(name + \" - runid: \" + runId + \" - init\", generator).apply(ctx, args);\n    var rejector;\n    var pendingPromise = undefined;\n    var promise = new Promise(function (resolve, reject) {\n      var stepId = 0;\n      rejector = reject;\n      function onFulfilled(res) {\n        pendingPromise = undefined;\n        var ret;\n        try {\n          ret = action(name + \" - runid: \" + runId + \" - yield \" + stepId++, gen.next).call(gen, res);\n        } catch (e) {\n          return reject(e);\n        }\n        next(ret);\n      }\n      function onRejected(err) {\n        pendingPromise = undefined;\n        var ret;\n        try {\n          ret = action(name + \" - runid: \" + runId + \" - yield \" + stepId++, gen[\"throw\"]).call(gen, err);\n        } catch (e) {\n          return reject(e);\n        }\n        next(ret);\n      }\n      function next(ret) {\n        if (isFunction(ret == null ? void 0 : ret.then)) {\n          // an async iterator\n          ret.then(next, reject);\n          return;\n        }\n        if (ret.done) {\n          return resolve(ret.value);\n        }\n        pendingPromise = Promise.resolve(ret.value);\n        return pendingPromise.then(onFulfilled, onRejected);\n      }\n      onFulfilled(undefined); // kick off the process\n    });\n\n    promise.cancel = action(name + \" - runid: \" + runId + \" - cancel\", function () {\n      try {\n        if (pendingPromise) {\n          cancelPromise(pendingPromise);\n        }\n        // Finally block can return (or yield) stuff..\n        var _res = gen[\"return\"](undefined);\n        // eat anything that promise would do, it's cancelled!\n        var yieldedPromise = Promise.resolve(_res.value);\n        yieldedPromise.then(noop, noop);\n        cancelPromise(yieldedPromise); // maybe it can be cancelled :)\n        // reject our original promise\n        rejector(new FlowCancellationError());\n      } catch (e) {\n        rejector(e); // there could be a throwing finally block\n      }\n    });\n\n    return promise;\n  };\n  res.isMobXFlow = true;\n  return res;\n}, flowAnnotation);\nflow.bound = /*#__PURE__*/createDecoratorAnnotation(flowBoundAnnotation);\nfunction cancelPromise(promise) {\n  if (isFunction(promise.cancel)) {\n    promise.cancel();\n  }\n}\nfunction flowResult(result) {\n  return result; // just tricking TypeScript :)\n}\n\nfunction isFlow(fn) {\n  return (fn == null ? void 0 : fn.isMobXFlow) === true;\n}\n\nfunction interceptReads(thing, propOrHandler, handler) {\n  var target;\n  if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {\n    target = getAdministration(thing);\n  } else if (isObservableObject(thing)) {\n    if ( true && !isStringish(propOrHandler)) {\n      return die(\"InterceptReads can only be used with a specific property, not with an object in general\");\n    }\n    target = getAdministration(thing, propOrHandler);\n  } else if (true) {\n    return die(\"Expected observable map, object or array as first array\");\n  }\n  if ( true && target.dehancer !== undefined) {\n    return die(\"An intercept reader was already established\");\n  }\n  target.dehancer = typeof propOrHandler === \"function\" ? propOrHandler : handler;\n  return function () {\n    target.dehancer = undefined;\n  };\n}\n\nfunction intercept(thing, propOrHandler, handler) {\n  if (isFunction(handler)) {\n    return interceptProperty(thing, propOrHandler, handler);\n  } else {\n    return interceptInterceptable(thing, propOrHandler);\n  }\n}\nfunction interceptInterceptable(thing, handler) {\n  return getAdministration(thing).intercept_(handler);\n}\nfunction interceptProperty(thing, property, handler) {\n  return getAdministration(thing, property).intercept_(handler);\n}\n\nfunction _isComputed(value, property) {\n  if (property === undefined) {\n    return isComputedValue(value);\n  }\n  if (isObservableObject(value) === false) {\n    return false;\n  }\n  if (!value[$mobx].values_.has(property)) {\n    return false;\n  }\n  var atom = getAtom(value, property);\n  return isComputedValue(atom);\n}\nfunction isComputed(value) {\n  if ( true && arguments.length > 1) {\n    return die(\"isComputed expects only 1 argument. Use isComputedProp to inspect the observability of a property\");\n  }\n  return _isComputed(value);\n}\nfunction isComputedProp(value, propName) {\n  if ( true && !isStringish(propName)) {\n    return die(\"isComputed expected a property name as second argument\");\n  }\n  return _isComputed(value, propName);\n}\n\nfunction _isObservable(value, property) {\n  if (!value) {\n    return false;\n  }\n  if (property !== undefined) {\n    if ( true && (isObservableMap(value) || isObservableArray(value))) {\n      return die(\"isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.\");\n    }\n    if (isObservableObject(value)) {\n      return value[$mobx].values_.has(property);\n    }\n    return false;\n  }\n  // For first check, see #701\n  return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);\n}\nfunction isObservable(value) {\n  if ( true && arguments.length !== 1) {\n    die(\"isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property\");\n  }\n  return _isObservable(value);\n}\nfunction isObservableProp(value, propName) {\n  if ( true && !isStringish(propName)) {\n    return die(\"expected a property name as second argument\");\n  }\n  return _isObservable(value, propName);\n}\n\nfunction keys(obj) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].keys_();\n  }\n  if (isObservableMap(obj) || isObservableSet(obj)) {\n    return Array.from(obj.keys());\n  }\n  if (isObservableArray(obj)) {\n    return obj.map(function (_, index) {\n      return index;\n    });\n  }\n  die(5);\n}\nfunction values(obj) {\n  if (isObservableObject(obj)) {\n    return keys(obj).map(function (key) {\n      return obj[key];\n    });\n  }\n  if (isObservableMap(obj)) {\n    return keys(obj).map(function (key) {\n      return obj.get(key);\n    });\n  }\n  if (isObservableSet(obj)) {\n    return Array.from(obj.values());\n  }\n  if (isObservableArray(obj)) {\n    return obj.slice();\n  }\n  die(6);\n}\nfunction entries(obj) {\n  if (isObservableObject(obj)) {\n    return keys(obj).map(function (key) {\n      return [key, obj[key]];\n    });\n  }\n  if (isObservableMap(obj)) {\n    return keys(obj).map(function (key) {\n      return [key, obj.get(key)];\n    });\n  }\n  if (isObservableSet(obj)) {\n    return Array.from(obj.entries());\n  }\n  if (isObservableArray(obj)) {\n    return obj.map(function (key, index) {\n      return [index, key];\n    });\n  }\n  die(7);\n}\nfunction set(obj, key, value) {\n  if (arguments.length === 2 && !isObservableSet(obj)) {\n    startBatch();\n    var _values = key;\n    try {\n      for (var _key in _values) {\n        set(obj, _key, _values[_key]);\n      }\n    } finally {\n      endBatch();\n    }\n    return;\n  }\n  if (isObservableObject(obj)) {\n    obj[$mobx].set_(key, value);\n  } else if (isObservableMap(obj)) {\n    obj.set(key, value);\n  } else if (isObservableSet(obj)) {\n    obj.add(key);\n  } else if (isObservableArray(obj)) {\n    if (typeof key !== \"number\") {\n      key = parseInt(key, 10);\n    }\n    if (key < 0) {\n      die(\"Invalid index: '\" + key + \"'\");\n    }\n    startBatch();\n    if (key >= obj.length) {\n      obj.length = key + 1;\n    }\n    obj[key] = value;\n    endBatch();\n  } else {\n    die(8);\n  }\n}\nfunction remove(obj, key) {\n  if (isObservableObject(obj)) {\n    obj[$mobx].delete_(key);\n  } else if (isObservableMap(obj)) {\n    obj[\"delete\"](key);\n  } else if (isObservableSet(obj)) {\n    obj[\"delete\"](key);\n  } else if (isObservableArray(obj)) {\n    if (typeof key !== \"number\") {\n      key = parseInt(key, 10);\n    }\n    obj.splice(key, 1);\n  } else {\n    die(9);\n  }\n}\nfunction has(obj, key) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].has_(key);\n  } else if (isObservableMap(obj)) {\n    return obj.has(key);\n  } else if (isObservableSet(obj)) {\n    return obj.has(key);\n  } else if (isObservableArray(obj)) {\n    return key >= 0 && key < obj.length;\n  }\n  die(10);\n}\nfunction get(obj, key) {\n  if (!has(obj, key)) {\n    return undefined;\n  }\n  if (isObservableObject(obj)) {\n    return obj[$mobx].get_(key);\n  } else if (isObservableMap(obj)) {\n    return obj.get(key);\n  } else if (isObservableArray(obj)) {\n    return obj[key];\n  }\n  die(11);\n}\nfunction apiDefineProperty(obj, key, descriptor) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].defineProperty_(key, descriptor);\n  }\n  die(39);\n}\nfunction apiOwnKeys(obj) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].ownKeys_();\n  }\n  die(38);\n}\n\nfunction observe(thing, propOrCb, cbOrFire, fireImmediately) {\n  if (isFunction(cbOrFire)) {\n    return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);\n  } else {\n    return observeObservable(thing, propOrCb, cbOrFire);\n  }\n}\nfunction observeObservable(thing, listener, fireImmediately) {\n  return getAdministration(thing).observe_(listener, fireImmediately);\n}\nfunction observeObservableProperty(thing, property, listener, fireImmediately) {\n  return getAdministration(thing, property).observe_(listener, fireImmediately);\n}\n\nfunction cache(map, key, value) {\n  map.set(key, value);\n  return value;\n}\nfunction toJSHelper(source, __alreadySeen) {\n  if (source == null || typeof source !== \"object\" || source instanceof Date || !isObservable(source)) {\n    return source;\n  }\n  if (isObservableValue(source) || isComputedValue(source)) {\n    return toJSHelper(source.get(), __alreadySeen);\n  }\n  if (__alreadySeen.has(source)) {\n    return __alreadySeen.get(source);\n  }\n  if (isObservableArray(source)) {\n    var res = cache(__alreadySeen, source, new Array(source.length));\n    source.forEach(function (value, idx) {\n      res[idx] = toJSHelper(value, __alreadySeen);\n    });\n    return res;\n  }\n  if (isObservableSet(source)) {\n    var _res = cache(__alreadySeen, source, new Set());\n    source.forEach(function (value) {\n      _res.add(toJSHelper(value, __alreadySeen));\n    });\n    return _res;\n  }\n  if (isObservableMap(source)) {\n    var _res2 = cache(__alreadySeen, source, new Map());\n    source.forEach(function (value, key) {\n      _res2.set(key, toJSHelper(value, __alreadySeen));\n    });\n    return _res2;\n  } else {\n    // must be observable object\n    var _res3 = cache(__alreadySeen, source, {});\n    apiOwnKeys(source).forEach(function (key) {\n      if (objectPrototype.propertyIsEnumerable.call(source, key)) {\n        _res3[key] = toJSHelper(source[key], __alreadySeen);\n      }\n    });\n    return _res3;\n  }\n}\n/**\r\n * Recursively converts an observable to it's non-observable native counterpart.\r\n * It does NOT recurse into non-observables, these are left as they are, even if they contain observables.\r\n * Computed and other non-enumerable properties are completely ignored.\r\n * Complex scenarios require custom solution, eg implementing `toJSON` or using `serializr` lib.\r\n */\nfunction toJS(source, options) {\n  if ( true && options) {\n    die(\"toJS no longer supports options\");\n  }\n  return toJSHelper(source, new Map());\n}\n\nfunction trace() {\n  if (false) {}\n  var enterBreakPoint = false;\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  if (typeof args[args.length - 1] === \"boolean\") {\n    enterBreakPoint = args.pop();\n  }\n  var derivation = getAtomFromArgs(args);\n  if (!derivation) {\n    return die(\"'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly\");\n  }\n  if (derivation.isTracing_ === TraceMode.NONE) {\n    console.log(\"[mobx.trace] '\" + derivation.name_ + \"' tracing enabled\");\n  }\n  derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;\n}\nfunction getAtomFromArgs(args) {\n  switch (args.length) {\n    case 0:\n      return globalState.trackingDerivation;\n    case 1:\n      return getAtom(args[0]);\n    case 2:\n      return getAtom(args[0], args[1]);\n  }\n}\n\n/**\r\n * During a transaction no views are updated until the end of the transaction.\r\n * The transaction will be run synchronously nonetheless.\r\n *\r\n * @param action a function that updates some reactive state\r\n * @returns any value that was returned by the 'action' parameter.\r\n */\nfunction transaction(action, thisArg) {\n  if (thisArg === void 0) {\n    thisArg = undefined;\n  }\n  startBatch();\n  try {\n    return action.apply(thisArg);\n  } finally {\n    endBatch();\n  }\n}\n\nfunction when(predicate, arg1, arg2) {\n  if (arguments.length === 1 || arg1 && typeof arg1 === \"object\") {\n    return whenPromise(predicate, arg1);\n  }\n  return _when(predicate, arg1, arg2 || {});\n}\nfunction _when(predicate, effect, opts) {\n  var timeoutHandle;\n  if (typeof opts.timeout === \"number\") {\n    var error = new Error(\"WHEN_TIMEOUT\");\n    timeoutHandle = setTimeout(function () {\n      if (!disposer[$mobx].isDisposed_) {\n        disposer();\n        if (opts.onError) {\n          opts.onError(error);\n        } else {\n          throw error;\n        }\n      }\n    }, opts.timeout);\n  }\n  opts.name =  true ? opts.name || \"When@\" + getNextId() : 0;\n  var effectAction = createAction( true ? opts.name + \"-effect\" : 0, effect);\n  // eslint-disable-next-line\n  var disposer = autorun(function (r) {\n    // predicate should not change state\n    var cond = allowStateChanges(false, predicate);\n    if (cond) {\n      r.dispose();\n      if (timeoutHandle) {\n        clearTimeout(timeoutHandle);\n      }\n      effectAction();\n    }\n  }, opts);\n  return disposer;\n}\nfunction whenPromise(predicate, opts) {\n  var _opts$signal;\n  if ( true && opts && opts.onError) {\n    return die(\"the options 'onError' and 'promise' cannot be combined\");\n  }\n  if (opts != null && (_opts$signal = opts.signal) != null && _opts$signal.aborted) {\n    return Object.assign(Promise.reject(new Error(\"WHEN_ABORTED\")), {\n      cancel: function cancel() {\n        return null;\n      }\n    });\n  }\n  var cancel;\n  var abort;\n  var res = new Promise(function (resolve, reject) {\n    var _opts$signal2;\n    var disposer = _when(predicate, resolve, _extends({}, opts, {\n      onError: reject\n    }));\n    cancel = function cancel() {\n      disposer();\n      reject(new Error(\"WHEN_CANCELLED\"));\n    };\n    abort = function abort() {\n      disposer();\n      reject(new Error(\"WHEN_ABORTED\"));\n    };\n    opts == null ? void 0 : (_opts$signal2 = opts.signal) == null ? void 0 : _opts$signal2.addEventListener == null ? void 0 : _opts$signal2.addEventListener(\"abort\", abort);\n  })[\"finally\"](function () {\n    var _opts$signal3;\n    return opts == null ? void 0 : (_opts$signal3 = opts.signal) == null ? void 0 : _opts$signal3.removeEventListener == null ? void 0 : _opts$signal3.removeEventListener(\"abort\", abort);\n  });\n  res.cancel = cancel;\n  return res;\n}\n\nfunction getAdm(target) {\n  return target[$mobx];\n}\n// Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,\n// and skip either the internal values map, or the base object with its property descriptors!\nvar objectProxyTraps = {\n  has: function has(target, name) {\n    if ( true && globalState.trackingDerivation) {\n      warnAboutProxyRequirement(\"detect new properties using the 'in' operator. Use 'has' from 'mobx' instead.\");\n    }\n    return getAdm(target).has_(name);\n  },\n  get: function get(target, name) {\n    return getAdm(target).get_(name);\n  },\n  set: function set(target, name, value) {\n    var _getAdm$set_;\n    if (!isStringish(name)) {\n      return false;\n    }\n    if ( true && !getAdm(target).values_.has(name)) {\n      warnAboutProxyRequirement(\"add a new observable property through direct assignment. Use 'set' from 'mobx' instead.\");\n    }\n    // null (intercepted) -> true (success)\n    return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;\n  },\n  deleteProperty: function deleteProperty(target, name) {\n    var _getAdm$delete_;\n    if (true) {\n      warnAboutProxyRequirement(\"delete properties from an observable object. Use 'remove' from 'mobx' instead.\");\n    }\n    if (!isStringish(name)) {\n      return false;\n    }\n    // null (intercepted) -> true (success)\n    return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;\n  },\n  defineProperty: function defineProperty(target, name, descriptor) {\n    var _getAdm$definePropert;\n    if (true) {\n      warnAboutProxyRequirement(\"define property on an observable object. Use 'defineProperty' from 'mobx' instead.\");\n    }\n    // null (intercepted) -> true (success)\n    return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;\n  },\n  ownKeys: function ownKeys(target) {\n    if ( true && globalState.trackingDerivation) {\n      warnAboutProxyRequirement(\"iterate keys to detect added / removed properties. Use 'keys' from 'mobx' instead.\");\n    }\n    return getAdm(target).ownKeys_();\n  },\n  preventExtensions: function preventExtensions(target) {\n    die(13);\n  }\n};\nfunction asDynamicObservableObject(target, options) {\n  var _target$$mobx, _target$$mobx$proxy_;\n  assertProxies();\n  target = asObservableObject(target, options);\n  return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);\n}\n\nfunction hasInterceptors(interceptable) {\n  return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0;\n}\nfunction registerInterceptor(interceptable, handler) {\n  var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);\n  interceptors.push(handler);\n  return once(function () {\n    var idx = interceptors.indexOf(handler);\n    if (idx !== -1) {\n      interceptors.splice(idx, 1);\n    }\n  });\n}\nfunction interceptChange(interceptable, change) {\n  var prevU = untrackedStart();\n  try {\n    // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950\n    var interceptors = [].concat(interceptable.interceptors_ || []);\n    for (var i = 0, l = interceptors.length; i < l; i++) {\n      change = interceptors[i](change);\n      if (change && !change.type) {\n        die(14);\n      }\n      if (!change) {\n        break;\n      }\n    }\n    return change;\n  } finally {\n    untrackedEnd(prevU);\n  }\n}\n\nfunction hasListeners(listenable) {\n  return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0;\n}\nfunction registerListener(listenable, handler) {\n  var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);\n  listeners.push(handler);\n  return once(function () {\n    var idx = listeners.indexOf(handler);\n    if (idx !== -1) {\n      listeners.splice(idx, 1);\n    }\n  });\n}\nfunction notifyListeners(listenable, change) {\n  var prevU = untrackedStart();\n  var listeners = listenable.changeListeners_;\n  if (!listeners) {\n    return;\n  }\n  listeners = listeners.slice();\n  for (var i = 0, l = listeners.length; i < l; i++) {\n    listeners[i](change);\n  }\n  untrackedEnd(prevU);\n}\n\nfunction makeObservable(target, annotations, options) {\n  var adm = asObservableObject(target, options)[$mobx];\n  startBatch();\n  try {\n    var _annotations;\n    if ( true && annotations && target[storedAnnotationsSymbol]) {\n      die(\"makeObservable second arg must be nullish when using decorators. Mixing @decorator syntax with annotations is not supported.\");\n    }\n    // Default to decorators\n    (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target);\n    // Annotate\n    ownKeys(annotations).forEach(function (key) {\n      return adm.make_(key, annotations[key]);\n    });\n  } finally {\n    endBatch();\n  }\n  return target;\n}\n// proto[keysSymbol] = new Set<PropertyKey>()\nvar keysSymbol = /*#__PURE__*/Symbol(\"mobx-keys\");\nfunction makeAutoObservable(target, overrides, options) {\n  if (true) {\n    if (!isPlainObject(target) && !isPlainObject(Object.getPrototypeOf(target))) {\n      die(\"'makeAutoObservable' can only be used for classes that don't have a superclass\");\n    }\n    if (isObservableObject(target)) {\n      die(\"makeAutoObservable can only be used on objects not already made observable\");\n    }\n  }\n  // Optimization: avoid visiting protos\n  // Assumes that annotation.make_/.extend_ works the same for plain objects\n  if (isPlainObject(target)) {\n    return extendObservable(target, target, overrides, options);\n  }\n  var adm = asObservableObject(target, options)[$mobx];\n  // Optimization: cache keys on proto\n  // Assumes makeAutoObservable can be called only once per object and can't be used in subclass\n  if (!target[keysSymbol]) {\n    var proto = Object.getPrototypeOf(target);\n    var keys = new Set([].concat(ownKeys(target), ownKeys(proto)));\n    keys[\"delete\"](\"constructor\");\n    keys[\"delete\"]($mobx);\n    addHiddenProp(proto, keysSymbol, keys);\n  }\n  startBatch();\n  try {\n    target[keysSymbol].forEach(function (key) {\n      return adm.make_(key,\n      // must pass \"undefined\" for { key: undefined }\n      !overrides ? true : key in overrides ? overrides[key] : true);\n    });\n  } finally {\n    endBatch();\n  }\n  return target;\n}\n\nvar SPLICE = \"splice\";\nvar UPDATE = \"update\";\nvar MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859\nvar arrayTraps = {\n  get: function get(target, name) {\n    var adm = target[$mobx];\n    if (name === $mobx) {\n      return adm;\n    }\n    if (name === \"length\") {\n      return adm.getArrayLength_();\n    }\n    if (typeof name === \"string\" && !isNaN(name)) {\n      return adm.get_(parseInt(name));\n    }\n    if (hasProp(arrayExtensions, name)) {\n      return arrayExtensions[name];\n    }\n    return target[name];\n  },\n  set: function set(target, name, value) {\n    var adm = target[$mobx];\n    if (name === \"length\") {\n      adm.setArrayLength_(value);\n    }\n    if (typeof name === \"symbol\" || isNaN(name)) {\n      target[name] = value;\n    } else {\n      // numeric string\n      adm.set_(parseInt(name), value);\n    }\n    return true;\n  },\n  preventExtensions: function preventExtensions() {\n    die(15);\n  }\n};\nvar ObservableArrayAdministration = /*#__PURE__*/function () {\n  // this is the prop that gets proxied, so can't replace it!\n\n  function ObservableArrayAdministration(name, enhancer, owned_, legacyMode_) {\n    if (name === void 0) {\n      name =  true ? \"ObservableArray@\" + getNextId() : 0;\n    }\n    this.owned_ = void 0;\n    this.legacyMode_ = void 0;\n    this.atom_ = void 0;\n    this.values_ = [];\n    this.interceptors_ = void 0;\n    this.changeListeners_ = void 0;\n    this.enhancer_ = void 0;\n    this.dehancer = void 0;\n    this.proxy_ = void 0;\n    this.lastKnownLength_ = 0;\n    this.owned_ = owned_;\n    this.legacyMode_ = legacyMode_;\n    this.atom_ = new Atom(name);\n    this.enhancer_ = function (newV, oldV) {\n      return enhancer(newV, oldV,  true ? name + \"[..]\" : 0);\n    };\n  }\n  var _proto = ObservableArrayAdministration.prototype;\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n    return value;\n  };\n  _proto.dehanceValues_ = function dehanceValues_(values) {\n    if (this.dehancer !== undefined && values.length > 0) {\n      return values.map(this.dehancer);\n    }\n    return values;\n  };\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if (fireImmediately === void 0) {\n      fireImmediately = false;\n    }\n    if (fireImmediately) {\n      listener({\n        observableKind: \"array\",\n        object: this.proxy_,\n        debugObjectName: this.atom_.name_,\n        type: \"splice\",\n        index: 0,\n        added: this.values_.slice(),\n        addedCount: this.values_.length,\n        removed: [],\n        removedCount: 0\n      });\n    }\n    return registerListener(this, listener);\n  };\n  _proto.getArrayLength_ = function getArrayLength_() {\n    this.atom_.reportObserved();\n    return this.values_.length;\n  };\n  _proto.setArrayLength_ = function setArrayLength_(newLength) {\n    if (typeof newLength !== \"number\" || isNaN(newLength) || newLength < 0) {\n      die(\"Out of range: \" + newLength);\n    }\n    var currentLength = this.values_.length;\n    if (newLength === currentLength) {\n      return;\n    } else if (newLength > currentLength) {\n      var newItems = new Array(newLength - currentLength);\n      for (var i = 0; i < newLength - currentLength; i++) {\n        newItems[i] = undefined;\n      } // No Array.fill everywhere...\n      this.spliceWithArray_(currentLength, 0, newItems);\n    } else {\n      this.spliceWithArray_(newLength, currentLength - newLength);\n    }\n  };\n  _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {\n    if (oldLength !== this.lastKnownLength_) {\n      die(16);\n    }\n    this.lastKnownLength_ += delta;\n    if (this.legacyMode_ && delta > 0) {\n      reserveArrayBuffer(oldLength + delta + 1);\n    }\n  };\n  _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {\n    var _this = this;\n    checkIfStateModificationsAreAllowed(this.atom_);\n    var length = this.values_.length;\n    if (index === undefined) {\n      index = 0;\n    } else if (index > length) {\n      index = length;\n    } else if (index < 0) {\n      index = Math.max(0, length + index);\n    }\n    if (arguments.length === 1) {\n      deleteCount = length - index;\n    } else if (deleteCount === undefined || deleteCount === null) {\n      deleteCount = 0;\n    } else {\n      deleteCount = Math.max(0, Math.min(deleteCount, length - index));\n    }\n    if (newItems === undefined) {\n      newItems = EMPTY_ARRAY;\n    }\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this.proxy_,\n        type: SPLICE,\n        index: index,\n        removedCount: deleteCount,\n        added: newItems\n      });\n      if (!change) {\n        return EMPTY_ARRAY;\n      }\n      deleteCount = change.removedCount;\n      newItems = change.added;\n    }\n    newItems = newItems.length === 0 ? newItems : newItems.map(function (v) {\n      return _this.enhancer_(v, undefined);\n    });\n    if (this.legacyMode_ || \"development\" !== \"production\") {\n      var lengthDelta = newItems.length - deleteCount;\n      this.updateArrayLength_(length, lengthDelta); // checks if internal array wasn't modified\n    }\n\n    var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);\n    if (deleteCount !== 0 || newItems.length !== 0) {\n      this.notifyArraySplice_(index, newItems, res);\n    }\n    return this.dehanceValues_(res);\n  };\n  _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {\n    if (newItems.length < MAX_SPLICE_SIZE) {\n      var _this$values_;\n      return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));\n    } else {\n      // The items removed by the splice\n      var res = this.values_.slice(index, index + deleteCount);\n      // The items that that should remain at the end of the array\n      var oldItems = this.values_.slice(index + deleteCount);\n      // New length is the previous length + addition count - deletion count\n      this.values_.length += newItems.length - deleteCount;\n      for (var i = 0; i < newItems.length; i++) {\n        this.values_[index + i] = newItems[i];\n      }\n      for (var _i = 0; _i < oldItems.length; _i++) {\n        this.values_[index + newItems.length + _i] = oldItems[_i];\n      }\n      return res;\n    }\n  };\n  _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {\n    var notifySpy = !this.owned_ && isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: \"array\",\n      object: this.proxy_,\n      type: UPDATE,\n      debugObjectName: this.atom_.name_,\n      index: index,\n      newValue: newValue,\n      oldValue: oldValue\n    } : null;\n    // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't\n    // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled\n    if ( true && notifySpy) {\n      spyReportStart(change);\n    }\n    this.atom_.reportChanged();\n    if (notify) {\n      notifyListeners(this, change);\n    }\n    if ( true && notifySpy) {\n      spyReportEnd();\n    }\n  };\n  _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {\n    var notifySpy = !this.owned_ && isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: \"array\",\n      object: this.proxy_,\n      debugObjectName: this.atom_.name_,\n      type: SPLICE,\n      index: index,\n      removed: removed,\n      added: added,\n      removedCount: removed.length,\n      addedCount: added.length\n    } : null;\n    if ( true && notifySpy) {\n      spyReportStart(change);\n    }\n    this.atom_.reportChanged();\n    // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe\n    if (notify) {\n      notifyListeners(this, change);\n    }\n    if ( true && notifySpy) {\n      spyReportEnd();\n    }\n  };\n  _proto.get_ = function get_(index) {\n    if (this.legacyMode_ && index >= this.values_.length) {\n      console.warn( true ? \"[mobx.array] Attempt to read an array index (\" + index + \") that is out of bounds (\" + this.values_.length + \"). Please check length first. Out of bound indices will not be tracked by MobX\" : 0);\n      return undefined;\n    }\n    this.atom_.reportObserved();\n    return this.dehanceValue_(this.values_[index]);\n  };\n  _proto.set_ = function set_(index, newValue) {\n    var values = this.values_;\n    if (this.legacyMode_ && index > values.length) {\n      // out of bounds\n      die(17, index, values.length);\n    }\n    if (index < values.length) {\n      // update at index in range\n      checkIfStateModificationsAreAllowed(this.atom_);\n      var oldValue = values[index];\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          type: UPDATE,\n          object: this.proxy_,\n          index: index,\n          newValue: newValue\n        });\n        if (!change) {\n          return;\n        }\n        newValue = change.newValue;\n      }\n      newValue = this.enhancer_(newValue, oldValue);\n      var changed = newValue !== oldValue;\n      if (changed) {\n        values[index] = newValue;\n        this.notifyArrayChildUpdate_(index, newValue, oldValue);\n      }\n    } else {\n      // For out of bound index, we don't create an actual sparse array,\n      // but rather fill the holes with undefined (same as setArrayLength_).\n      // This could be considered a bug.\n      var newItems = new Array(index + 1 - values.length);\n      for (var i = 0; i < newItems.length - 1; i++) {\n        newItems[i] = undefined;\n      } // No Array.fill everywhere...\n      newItems[newItems.length - 1] = newValue;\n      this.spliceWithArray_(values.length, 0, newItems);\n    }\n  };\n  return ObservableArrayAdministration;\n}();\nfunction createObservableArray(initialValues, enhancer, name, owned) {\n  if (name === void 0) {\n    name =  true ? \"ObservableArray@\" + getNextId() : 0;\n  }\n  if (owned === void 0) {\n    owned = false;\n  }\n  assertProxies();\n  var adm = new ObservableArrayAdministration(name, enhancer, owned, false);\n  addHiddenFinalProp(adm.values_, $mobx, adm);\n  var proxy = new Proxy(adm.values_, arrayTraps);\n  adm.proxy_ = proxy;\n  if (initialValues && initialValues.length) {\n    var prev = allowStateChangesStart(true);\n    adm.spliceWithArray_(0, 0, initialValues);\n    allowStateChangesEnd(prev);\n  }\n  return proxy;\n}\n// eslint-disable-next-line\nvar arrayExtensions = {\n  clear: function clear() {\n    return this.splice(0);\n  },\n  replace: function replace(newItems) {\n    var adm = this[$mobx];\n    return adm.spliceWithArray_(0, adm.values_.length, newItems);\n  },\n  // Used by JSON.stringify\n  toJSON: function toJSON() {\n    return this.slice();\n  },\n  /*\r\n   * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)\r\n   * since these functions alter the inner structure of the array, the have side effects.\r\n   * Because the have side effects, they should not be used in computed function,\r\n   * and for that reason the do not call dependencyState.notifyObserved\r\n   */\n  splice: function splice(index, deleteCount) {\n    for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      newItems[_key - 2] = arguments[_key];\n    }\n    var adm = this[$mobx];\n    switch (arguments.length) {\n      case 0:\n        return [];\n      case 1:\n        return adm.spliceWithArray_(index);\n      case 2:\n        return adm.spliceWithArray_(index, deleteCount);\n    }\n    return adm.spliceWithArray_(index, deleteCount, newItems);\n  },\n  spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {\n    return this[$mobx].spliceWithArray_(index, deleteCount, newItems);\n  },\n  push: function push() {\n    var adm = this[$mobx];\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n    adm.spliceWithArray_(adm.values_.length, 0, items);\n    return adm.values_.length;\n  },\n  pop: function pop() {\n    return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];\n  },\n  shift: function shift() {\n    return this.splice(0, 1)[0];\n  },\n  unshift: function unshift() {\n    var adm = this[$mobx];\n    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      items[_key3] = arguments[_key3];\n    }\n    adm.spliceWithArray_(0, 0, items);\n    return adm.values_.length;\n  },\n  reverse: function reverse() {\n    // reverse by default mutates in place before returning the result\n    // which makes it both a 'derivation' and a 'mutation'.\n    if (globalState.trackingDerivation) {\n      die(37, \"reverse\");\n    }\n    this.replace(this.slice().reverse());\n    return this;\n  },\n  sort: function sort() {\n    // sort by default mutates in place before returning the result\n    // which goes against all good practices. Let's not change the array in place!\n    if (globalState.trackingDerivation) {\n      die(37, \"sort\");\n    }\n    var copy = this.slice();\n    copy.sort.apply(copy, arguments);\n    this.replace(copy);\n    return this;\n  },\n  remove: function remove(value) {\n    var adm = this[$mobx];\n    var idx = adm.dehanceValues_(adm.values_).indexOf(value);\n    if (idx > -1) {\n      this.splice(idx, 1);\n      return true;\n    }\n    return false;\n  }\n};\n/**\r\n * Wrap function from prototype\r\n * Without this, everything works as well, but this works\r\n * faster as everything works on unproxied values\r\n */\naddArrayExtension(\"concat\", simpleFunc);\naddArrayExtension(\"flat\", simpleFunc);\naddArrayExtension(\"includes\", simpleFunc);\naddArrayExtension(\"indexOf\", simpleFunc);\naddArrayExtension(\"join\", simpleFunc);\naddArrayExtension(\"lastIndexOf\", simpleFunc);\naddArrayExtension(\"slice\", simpleFunc);\naddArrayExtension(\"toString\", simpleFunc);\naddArrayExtension(\"toLocaleString\", simpleFunc);\n// map\naddArrayExtension(\"every\", mapLikeFunc);\naddArrayExtension(\"filter\", mapLikeFunc);\naddArrayExtension(\"find\", mapLikeFunc);\naddArrayExtension(\"findIndex\", mapLikeFunc);\naddArrayExtension(\"flatMap\", mapLikeFunc);\naddArrayExtension(\"forEach\", mapLikeFunc);\naddArrayExtension(\"map\", mapLikeFunc);\naddArrayExtension(\"some\", mapLikeFunc);\n// reduce\naddArrayExtension(\"reduce\", reduceLikeFunc);\naddArrayExtension(\"reduceRight\", reduceLikeFunc);\nfunction addArrayExtension(funcName, funcFactory) {\n  if (typeof Array.prototype[funcName] === \"function\") {\n    arrayExtensions[funcName] = funcFactory(funcName);\n  }\n}\n// Report and delegate to dehanced array\nfunction simpleFunc(funcName) {\n  return function () {\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_);\n    return dehancedValues[funcName].apply(dehancedValues, arguments);\n  };\n}\n// Make sure callbacks recieve correct array arg #2326\nfunction mapLikeFunc(funcName) {\n  return function (callback, thisArg) {\n    var _this2 = this;\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_);\n    return dehancedValues[funcName](function (element, index) {\n      return callback.call(thisArg, element, index, _this2);\n    });\n  };\n}\n// Make sure callbacks recieve correct array arg #2326\nfunction reduceLikeFunc(funcName) {\n  return function () {\n    var _this3 = this;\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_);\n    // #2432 - reduce behavior depends on arguments.length\n    var callback = arguments[0];\n    arguments[0] = function (accumulator, currentValue, index) {\n      return callback(accumulator, currentValue, index, _this3);\n    };\n    return dehancedValues[funcName].apply(dehancedValues, arguments);\n  };\n}\nvar isObservableArrayAdministration = /*#__PURE__*/createInstanceofPredicate(\"ObservableArrayAdministration\", ObservableArrayAdministration);\nfunction isObservableArray(thing) {\n  return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);\n}\n\nvar _Symbol$iterator, _Symbol$toStringTag;\nvar ObservableMapMarker = {};\nvar ADD = \"add\";\nvar DELETE = \"delete\";\n// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54\n// But: https://github.com/mobxjs/mobx/issues/1556\n_Symbol$iterator = Symbol.iterator;\n_Symbol$toStringTag = Symbol.toStringTag;\nvar ObservableMap = /*#__PURE__*/function () {\n  // hasMap, not hashMap >-).\n\n  function ObservableMap(initialData, enhancer_, name_) {\n    var _this = this;\n    if (enhancer_ === void 0) {\n      enhancer_ = deepEnhancer;\n    }\n    if (name_ === void 0) {\n      name_ =  true ? \"ObservableMap@\" + getNextId() : 0;\n    }\n    this.enhancer_ = void 0;\n    this.name_ = void 0;\n    this[$mobx] = ObservableMapMarker;\n    this.data_ = void 0;\n    this.hasMap_ = void 0;\n    this.keysAtom_ = void 0;\n    this.interceptors_ = void 0;\n    this.changeListeners_ = void 0;\n    this.dehancer = void 0;\n    this.enhancer_ = enhancer_;\n    this.name_ = name_;\n    if (!isFunction(Map)) {\n      die(18);\n    }\n    this.keysAtom_ = createAtom( true ? this.name_ + \".keys()\" : 0);\n    this.data_ = new Map();\n    this.hasMap_ = new Map();\n    allowStateChanges(true, function () {\n      _this.merge(initialData);\n    });\n  }\n  var _proto = ObservableMap.prototype;\n  _proto.has_ = function has_(key) {\n    return this.data_.has(key);\n  };\n  _proto.has = function has(key) {\n    var _this2 = this;\n    if (!globalState.trackingDerivation) {\n      return this.has_(key);\n    }\n    var entry = this.hasMap_.get(key);\n    if (!entry) {\n      var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer,  true ? this.name_ + \".\" + stringifyKey(key) + \"?\" : 0, false);\n      this.hasMap_.set(key, newEntry);\n      onBecomeUnobserved(newEntry, function () {\n        return _this2.hasMap_[\"delete\"](key);\n      });\n    }\n    return entry.get();\n  };\n  _proto.set = function set(key, value) {\n    var hasKey = this.has_(key);\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: hasKey ? UPDATE : ADD,\n        object: this,\n        newValue: value,\n        name: key\n      });\n      if (!change) {\n        return this;\n      }\n      value = change.newValue;\n    }\n    if (hasKey) {\n      this.updateValue_(key, value);\n    } else {\n      this.addValue_(key, value);\n    }\n    return this;\n  };\n  _proto[\"delete\"] = function _delete(key) {\n    var _this3 = this;\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: DELETE,\n        object: this,\n        name: key\n      });\n      if (!change) {\n        return false;\n      }\n    }\n    if (this.has_(key)) {\n      var notifySpy = isSpyEnabled();\n      var notify = hasListeners(this);\n      var _change = notify || notifySpy ? {\n        observableKind: \"map\",\n        debugObjectName: this.name_,\n        type: DELETE,\n        object: this,\n        oldValue: this.data_.get(key).value_,\n        name: key\n      } : null;\n      if ( true && notifySpy) {\n        spyReportStart(_change);\n      } // TODO fix type\n      transaction(function () {\n        var _this3$hasMap_$get;\n        _this3.keysAtom_.reportChanged();\n        (_this3$hasMap_$get = _this3.hasMap_.get(key)) == null ? void 0 : _this3$hasMap_$get.setNewValue_(false);\n        var observable = _this3.data_.get(key);\n        observable.setNewValue_(undefined);\n        _this3.data_[\"delete\"](key);\n      });\n      if (notify) {\n        notifyListeners(this, _change);\n      }\n      if ( true && notifySpy) {\n        spyReportEnd();\n      }\n      return true;\n    }\n    return false;\n  };\n  _proto.updateValue_ = function updateValue_(key, newValue) {\n    var observable = this.data_.get(key);\n    newValue = observable.prepareNewValue_(newValue);\n    if (newValue !== globalState.UNCHANGED) {\n      var notifySpy = isSpyEnabled();\n      var notify = hasListeners(this);\n      var change = notify || notifySpy ? {\n        observableKind: \"map\",\n        debugObjectName: this.name_,\n        type: UPDATE,\n        object: this,\n        oldValue: observable.value_,\n        name: key,\n        newValue: newValue\n      } : null;\n      if ( true && notifySpy) {\n        spyReportStart(change);\n      } // TODO fix type\n      observable.setNewValue_(newValue);\n      if (notify) {\n        notifyListeners(this, change);\n      }\n      if ( true && notifySpy) {\n        spyReportEnd();\n      }\n    }\n  };\n  _proto.addValue_ = function addValue_(key, newValue) {\n    var _this4 = this;\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n    transaction(function () {\n      var _this4$hasMap_$get;\n      var observable = new ObservableValue(newValue, _this4.enhancer_,  true ? _this4.name_ + \".\" + stringifyKey(key) : 0, false);\n      _this4.data_.set(key, observable);\n      newValue = observable.value_; // value might have been changed\n      (_this4$hasMap_$get = _this4.hasMap_.get(key)) == null ? void 0 : _this4$hasMap_$get.setNewValue_(true);\n      _this4.keysAtom_.reportChanged();\n    });\n    var notifySpy = isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: \"map\",\n      debugObjectName: this.name_,\n      type: ADD,\n      object: this,\n      name: key,\n      newValue: newValue\n    } : null;\n    if ( true && notifySpy) {\n      spyReportStart(change);\n    } // TODO fix type\n    if (notify) {\n      notifyListeners(this, change);\n    }\n    if ( true && notifySpy) {\n      spyReportEnd();\n    }\n  };\n  _proto.get = function get(key) {\n    if (this.has(key)) {\n      return this.dehanceValue_(this.data_.get(key).get());\n    }\n    return this.dehanceValue_(undefined);\n  };\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n    return value;\n  };\n  _proto.keys = function keys() {\n    this.keysAtom_.reportObserved();\n    return this.data_.keys();\n  };\n  _proto.values = function values() {\n    var self = this;\n    var keys = this.keys();\n    return makeIterable({\n      next: function next() {\n        var _keys$next = keys.next(),\n          done = _keys$next.done,\n          value = _keys$next.value;\n        return {\n          done: done,\n          value: done ? undefined : self.get(value)\n        };\n      }\n    });\n  };\n  _proto.entries = function entries() {\n    var self = this;\n    var keys = this.keys();\n    return makeIterable({\n      next: function next() {\n        var _keys$next2 = keys.next(),\n          done = _keys$next2.done,\n          value = _keys$next2.value;\n        return {\n          done: done,\n          value: done ? undefined : [value, self.get(value)]\n        };\n      }\n    });\n  };\n  _proto[_Symbol$iterator] = function () {\n    return this.entries();\n  };\n  _proto.forEach = function forEach(callback, thisArg) {\n    for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n        key = _step$value[0],\n        value = _step$value[1];\n      callback.call(thisArg, value, key, this);\n    }\n  }\n  /** Merge another object into this object, returns this. */;\n  _proto.merge = function merge(other) {\n    var _this5 = this;\n    if (isObservableMap(other)) {\n      other = new Map(other);\n    }\n    transaction(function () {\n      if (isPlainObject(other)) {\n        getPlainObjectKeys(other).forEach(function (key) {\n          return _this5.set(key, other[key]);\n        });\n      } else if (Array.isArray(other)) {\n        other.forEach(function (_ref) {\n          var key = _ref[0],\n            value = _ref[1];\n          return _this5.set(key, value);\n        });\n      } else if (isES6Map(other)) {\n        if (other.constructor !== Map) {\n          die(19, other);\n        }\n        other.forEach(function (value, key) {\n          return _this5.set(key, value);\n        });\n      } else if (other !== null && other !== undefined) {\n        die(20, other);\n      }\n    });\n    return this;\n  };\n  _proto.clear = function clear() {\n    var _this6 = this;\n    transaction(function () {\n      untracked(function () {\n        for (var _iterator2 = _createForOfIteratorHelperLoose(_this6.keys()), _step2; !(_step2 = _iterator2()).done;) {\n          var key = _step2.value;\n          _this6[\"delete\"](key);\n        }\n      });\n    });\n  };\n  _proto.replace = function replace(values) {\n    var _this7 = this;\n    // Implementation requirements:\n    // - respect ordering of replacement map\n    // - allow interceptors to run and potentially prevent individual operations\n    // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)\n    // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)\n    // - note that result map may differ from replacement map due to the interceptors\n    transaction(function () {\n      // Convert to map so we can do quick key lookups\n      var replacementMap = convertToMap(values);\n      var orderedData = new Map();\n      // Used for optimization\n      var keysReportChangedCalled = false;\n      // Delete keys that don't exist in replacement map\n      // if the key deletion is prevented by interceptor\n      // add entry at the beginning of the result map\n      for (var _iterator3 = _createForOfIteratorHelperLoose(_this7.data_.keys()), _step3; !(_step3 = _iterator3()).done;) {\n        var key = _step3.value;\n        // Concurrently iterating/deleting keys\n        // iterator should handle this correctly\n        if (!replacementMap.has(key)) {\n          var deleted = _this7[\"delete\"](key);\n          // Was the key removed?\n          if (deleted) {\n            // _keysAtom.reportChanged() was already called\n            keysReportChangedCalled = true;\n          } else {\n            // Delete prevented by interceptor\n            var value = _this7.data_.get(key);\n            orderedData.set(key, value);\n          }\n        }\n      }\n      // Merge entries\n      for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done;) {\n        var _step4$value = _step4.value,\n          _key = _step4$value[0],\n          _value = _step4$value[1];\n        // We will want to know whether a new key is added\n        var keyExisted = _this7.data_.has(_key);\n        // Add or update value\n        _this7.set(_key, _value);\n        // The addition could have been prevent by interceptor\n        if (_this7.data_.has(_key)) {\n          // The update could have been prevented by interceptor\n          // and also we want to preserve existing values\n          // so use value from _data map (instead of replacement map)\n          var _value2 = _this7.data_.get(_key);\n          orderedData.set(_key, _value2);\n          // Was a new key added?\n          if (!keyExisted) {\n            // _keysAtom.reportChanged() was already called\n            keysReportChangedCalled = true;\n          }\n        }\n      }\n      // Check for possible key order change\n      if (!keysReportChangedCalled) {\n        if (_this7.data_.size !== orderedData.size) {\n          // If size differs, keys are definitely modified\n          _this7.keysAtom_.reportChanged();\n        } else {\n          var iter1 = _this7.data_.keys();\n          var iter2 = orderedData.keys();\n          var next1 = iter1.next();\n          var next2 = iter2.next();\n          while (!next1.done) {\n            if (next1.value !== next2.value) {\n              _this7.keysAtom_.reportChanged();\n              break;\n            }\n            next1 = iter1.next();\n            next2 = iter2.next();\n          }\n        }\n      }\n      // Use correctly ordered map\n      _this7.data_ = orderedData;\n    });\n    return this;\n  };\n  _proto.toString = function toString() {\n    return \"[object ObservableMap]\";\n  };\n  _proto.toJSON = function toJSON() {\n    return Array.from(this);\n  };\n  /**\r\n   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.\r\n   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\r\n   * for callback details\r\n   */\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if ( true && fireImmediately === true) {\n      die(\"`observe` doesn't support fireImmediately=true in combination with maps.\");\n    }\n    return registerListener(this, listener);\n  };\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n  _createClass(ObservableMap, [{\n    key: \"size\",\n    get: function get() {\n      this.keysAtom_.reportObserved();\n      return this.data_.size;\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return \"Map\";\n    }\n  }]);\n  return ObservableMap;\n}();\n// eslint-disable-next-line\nvar isObservableMap = /*#__PURE__*/createInstanceofPredicate(\"ObservableMap\", ObservableMap);\nfunction convertToMap(dataStructure) {\n  if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {\n    return dataStructure;\n  } else if (Array.isArray(dataStructure)) {\n    return new Map(dataStructure);\n  } else if (isPlainObject(dataStructure)) {\n    var map = new Map();\n    for (var key in dataStructure) {\n      map.set(key, dataStructure[key]);\n    }\n    return map;\n  } else {\n    return die(21, dataStructure);\n  }\n}\n\nvar _Symbol$iterator$1, _Symbol$toStringTag$1;\nvar ObservableSetMarker = {};\n_Symbol$iterator$1 = Symbol.iterator;\n_Symbol$toStringTag$1 = Symbol.toStringTag;\nvar ObservableSet = /*#__PURE__*/function () {\n  function ObservableSet(initialData, enhancer, name_) {\n    if (enhancer === void 0) {\n      enhancer = deepEnhancer;\n    }\n    if (name_ === void 0) {\n      name_ =  true ? \"ObservableSet@\" + getNextId() : 0;\n    }\n    this.name_ = void 0;\n    this[$mobx] = ObservableSetMarker;\n    this.data_ = new Set();\n    this.atom_ = void 0;\n    this.changeListeners_ = void 0;\n    this.interceptors_ = void 0;\n    this.dehancer = void 0;\n    this.enhancer_ = void 0;\n    this.name_ = name_;\n    if (!isFunction(Set)) {\n      die(22);\n    }\n    this.atom_ = createAtom(this.name_);\n    this.enhancer_ = function (newV, oldV) {\n      return enhancer(newV, oldV, name_);\n    };\n    if (initialData) {\n      this.replace(initialData);\n    }\n  }\n  var _proto = ObservableSet.prototype;\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n    return value;\n  };\n  _proto.clear = function clear() {\n    var _this = this;\n    transaction(function () {\n      untracked(function () {\n        for (var _iterator = _createForOfIteratorHelperLoose(_this.data_.values()), _step; !(_step = _iterator()).done;) {\n          var value = _step.value;\n          _this[\"delete\"](value);\n        }\n      });\n    });\n  };\n  _proto.forEach = function forEach(callbackFn, thisArg) {\n    for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done;) {\n      var value = _step2.value;\n      callbackFn.call(thisArg, value, value, this);\n    }\n  };\n  _proto.add = function add(value) {\n    var _this2 = this;\n    checkIfStateModificationsAreAllowed(this.atom_);\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: ADD,\n        object: this,\n        newValue: value\n      });\n      if (!change) {\n        return this;\n      }\n      // ideally, value = change.value would be done here, so that values can be\n      // changed by interceptor. Same applies for other Set and Map api's.\n    }\n\n    if (!this.has(value)) {\n      transaction(function () {\n        _this2.data_.add(_this2.enhancer_(value, undefined));\n        _this2.atom_.reportChanged();\n      });\n      var notifySpy =  true && isSpyEnabled();\n      var notify = hasListeners(this);\n      var _change = notify || notifySpy ? {\n        observableKind: \"set\",\n        debugObjectName: this.name_,\n        type: ADD,\n        object: this,\n        newValue: value\n      } : null;\n      if (notifySpy && \"development\" !== \"production\") {\n        spyReportStart(_change);\n      }\n      if (notify) {\n        notifyListeners(this, _change);\n      }\n      if (notifySpy && \"development\" !== \"production\") {\n        spyReportEnd();\n      }\n    }\n    return this;\n  };\n  _proto[\"delete\"] = function _delete(value) {\n    var _this3 = this;\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: DELETE,\n        object: this,\n        oldValue: value\n      });\n      if (!change) {\n        return false;\n      }\n    }\n    if (this.has(value)) {\n      var notifySpy =  true && isSpyEnabled();\n      var notify = hasListeners(this);\n      var _change2 = notify || notifySpy ? {\n        observableKind: \"set\",\n        debugObjectName: this.name_,\n        type: DELETE,\n        object: this,\n        oldValue: value\n      } : null;\n      if (notifySpy && \"development\" !== \"production\") {\n        spyReportStart(_change2);\n      }\n      transaction(function () {\n        _this3.atom_.reportChanged();\n        _this3.data_[\"delete\"](value);\n      });\n      if (notify) {\n        notifyListeners(this, _change2);\n      }\n      if (notifySpy && \"development\" !== \"production\") {\n        spyReportEnd();\n      }\n      return true;\n    }\n    return false;\n  };\n  _proto.has = function has(value) {\n    this.atom_.reportObserved();\n    return this.data_.has(this.dehanceValue_(value));\n  };\n  _proto.entries = function entries() {\n    var nextIndex = 0;\n    var keys = Array.from(this.keys());\n    var values = Array.from(this.values());\n    return makeIterable({\n      next: function next() {\n        var index = nextIndex;\n        nextIndex += 1;\n        return index < values.length ? {\n          value: [keys[index], values[index]],\n          done: false\n        } : {\n          done: true\n        };\n      }\n    });\n  };\n  _proto.keys = function keys() {\n    return this.values();\n  };\n  _proto.values = function values() {\n    this.atom_.reportObserved();\n    var self = this;\n    var nextIndex = 0;\n    var observableValues = Array.from(this.data_.values());\n    return makeIterable({\n      next: function next() {\n        return nextIndex < observableValues.length ? {\n          value: self.dehanceValue_(observableValues[nextIndex++]),\n          done: false\n        } : {\n          done: true\n        };\n      }\n    });\n  };\n  _proto.replace = function replace(other) {\n    var _this4 = this;\n    if (isObservableSet(other)) {\n      other = new Set(other);\n    }\n    transaction(function () {\n      if (Array.isArray(other)) {\n        _this4.clear();\n        other.forEach(function (value) {\n          return _this4.add(value);\n        });\n      } else if (isES6Set(other)) {\n        _this4.clear();\n        other.forEach(function (value) {\n          return _this4.add(value);\n        });\n      } else if (other !== null && other !== undefined) {\n        die(\"Cannot initialize set from \" + other);\n      }\n    });\n    return this;\n  };\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    // ... 'fireImmediately' could also be true?\n    if ( true && fireImmediately === true) {\n      die(\"`observe` doesn't support fireImmediately=true in combination with sets.\");\n    }\n    return registerListener(this, listener);\n  };\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n  _proto.toJSON = function toJSON() {\n    return Array.from(this);\n  };\n  _proto.toString = function toString() {\n    return \"[object ObservableSet]\";\n  };\n  _proto[_Symbol$iterator$1] = function () {\n    return this.values();\n  };\n  _createClass(ObservableSet, [{\n    key: \"size\",\n    get: function get() {\n      this.atom_.reportObserved();\n      return this.data_.size;\n    }\n  }, {\n    key: _Symbol$toStringTag$1,\n    get: function get() {\n      return \"Set\";\n    }\n  }]);\n  return ObservableSet;\n}();\n// eslint-disable-next-line\nvar isObservableSet = /*#__PURE__*/createInstanceofPredicate(\"ObservableSet\", ObservableSet);\n\nvar descriptorCache = /*#__PURE__*/Object.create(null);\nvar REMOVE = \"remove\";\nvar ObservableObjectAdministration = /*#__PURE__*/function () {\n  function ObservableObjectAdministration(target_, values_, name_,\n  // Used anytime annotation is not explicitely provided\n  defaultAnnotation_) {\n    if (values_ === void 0) {\n      values_ = new Map();\n    }\n    if (defaultAnnotation_ === void 0) {\n      defaultAnnotation_ = autoAnnotation;\n    }\n    this.target_ = void 0;\n    this.values_ = void 0;\n    this.name_ = void 0;\n    this.defaultAnnotation_ = void 0;\n    this.keysAtom_ = void 0;\n    this.changeListeners_ = void 0;\n    this.interceptors_ = void 0;\n    this.proxy_ = void 0;\n    this.isPlainObject_ = void 0;\n    this.appliedAnnotations_ = void 0;\n    this.pendingKeys_ = void 0;\n    this.target_ = target_;\n    this.values_ = values_;\n    this.name_ = name_;\n    this.defaultAnnotation_ = defaultAnnotation_;\n    this.keysAtom_ = new Atom( true ? this.name_ + \".keys\" : 0);\n    // Optimization: we use this frequently\n    this.isPlainObject_ = isPlainObject(this.target_);\n    if ( true && !isAnnotation(this.defaultAnnotation_)) {\n      die(\"defaultAnnotation must be valid annotation\");\n    }\n    if (true) {\n      // Prepare structure for tracking which fields were already annotated\n      this.appliedAnnotations_ = {};\n    }\n  }\n  var _proto = ObservableObjectAdministration.prototype;\n  _proto.getObservablePropValue_ = function getObservablePropValue_(key) {\n    return this.values_.get(key).get();\n  };\n  _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {\n    var observable = this.values_.get(key);\n    if (observable instanceof ComputedValue) {\n      observable.set(newValue);\n      return true;\n    }\n    // intercept\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: UPDATE,\n        object: this.proxy_ || this.target_,\n        name: key,\n        newValue: newValue\n      });\n      if (!change) {\n        return null;\n      }\n      newValue = change.newValue;\n    }\n    newValue = observable.prepareNewValue_(newValue);\n    // notify spy & observers\n    if (newValue !== globalState.UNCHANGED) {\n      var notify = hasListeners(this);\n      var notifySpy =  true && isSpyEnabled();\n      var _change = notify || notifySpy ? {\n        type: UPDATE,\n        observableKind: \"object\",\n        debugObjectName: this.name_,\n        object: this.proxy_ || this.target_,\n        oldValue: observable.value_,\n        name: key,\n        newValue: newValue\n      } : null;\n      if ( true && notifySpy) {\n        spyReportStart(_change);\n      }\n      observable.setNewValue_(newValue);\n      if (notify) {\n        notifyListeners(this, _change);\n      }\n      if ( true && notifySpy) {\n        spyReportEnd();\n      }\n    }\n    return true;\n  };\n  _proto.get_ = function get_(key) {\n    if (globalState.trackingDerivation && !hasProp(this.target_, key)) {\n      // Key doesn't exist yet, subscribe for it in case it's added later\n      this.has_(key);\n    }\n    return this.target_[key];\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {any} value\r\n   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\r\n   * @param {boolean} proxyTrap whether it's called from proxy trap\r\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n   */;\n  _proto.set_ = function set_(key, value, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    // Don't use .has(key) - we care about own\n    if (hasProp(this.target_, key)) {\n      // Existing prop\n      if (this.values_.has(key)) {\n        // Observable (can be intercepted)\n        return this.setObservablePropValue_(key, value);\n      } else if (proxyTrap) {\n        // Non-observable - proxy\n        return Reflect.set(this.target_, key, value);\n      } else {\n        // Non-observable\n        this.target_[key] = value;\n        return true;\n      }\n    } else {\n      // New prop\n      return this.extend_(key, {\n        value: value,\n        enumerable: true,\n        writable: true,\n        configurable: true\n      }, this.defaultAnnotation_, proxyTrap);\n    }\n  }\n  // Trap for \"in\"\n  ;\n  _proto.has_ = function has_(key) {\n    if (!globalState.trackingDerivation) {\n      // Skip key subscription outside derivation\n      return key in this.target_;\n    }\n    this.pendingKeys_ || (this.pendingKeys_ = new Map());\n    var entry = this.pendingKeys_.get(key);\n    if (!entry) {\n      entry = new ObservableValue(key in this.target_, referenceEnhancer,  true ? this.name_ + \".\" + stringifyKey(key) + \"?\" : 0, false);\n      this.pendingKeys_.set(key, entry);\n    }\n    return entry.get();\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {Annotation|boolean} annotation true - use default annotation, false - ignore prop\r\n   */;\n  _proto.make_ = function make_(key, annotation) {\n    if (annotation === true) {\n      annotation = this.defaultAnnotation_;\n    }\n    if (annotation === false) {\n      return;\n    }\n    assertAnnotable(this, annotation, key);\n    if (!(key in this.target_)) {\n      var _this$target_$storedA;\n      // Throw on missing key, except for decorators:\n      // Decorator annotations are collected from whole prototype chain.\n      // When called from super() some props may not exist yet.\n      // However we don't have to worry about missing prop,\n      // because the decorator must have been applied to something.\n      if ((_this$target_$storedA = this.target_[storedAnnotationsSymbol]) != null && _this$target_$storedA[key]) {\n        return; // will be annotated by subclass constructor\n      } else {\n        die(1, annotation.annotationType_, this.name_ + \".\" + key.toString());\n      }\n    }\n    var source = this.target_;\n    while (source && source !== objectPrototype) {\n      var descriptor = getDescriptor(source, key);\n      if (descriptor) {\n        var outcome = annotation.make_(this, key, descriptor, source);\n        if (outcome === 0 /* Cancel */) {\n          return;\n        }\n        if (outcome === 1 /* Break */) {\n          break;\n        }\n      }\n      source = Object.getPrototypeOf(source);\n    }\n    recordAnnotationApplied(this, annotation, key);\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {PropertyDescriptor} descriptor\r\n   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\r\n   * @param {boolean} proxyTrap whether it's called from proxy trap\r\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n   */;\n  _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    if (annotation === true) {\n      annotation = this.defaultAnnotation_;\n    }\n    if (annotation === false) {\n      return this.defineProperty_(key, descriptor, proxyTrap);\n    }\n    assertAnnotable(this, annotation, key);\n    var outcome = annotation.extend_(this, key, descriptor, proxyTrap);\n    if (outcome) {\n      recordAnnotationApplied(this, annotation, key);\n    }\n    return outcome;\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {PropertyDescriptor} descriptor\r\n   * @param {boolean} proxyTrap whether it's called from proxy trap\r\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n   */;\n  _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    try {\n      startBatch();\n      // Delete\n      var deleteOutcome = this.delete_(key);\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      }\n      // ADD interceptor\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: descriptor.value\n        });\n        if (!change) {\n          return null;\n        }\n        var newValue = change.newValue;\n        if (descriptor.value !== newValue) {\n          descriptor = _extends({}, descriptor, {\n            value: newValue\n          });\n        }\n      }\n      // Define\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      }\n      // Notify\n      this.notifyPropertyAddition_(key, descriptor.value);\n    } finally {\n      endBatch();\n    }\n    return true;\n  }\n  // If original descriptor becomes relevant, move this to annotation directly\n  ;\n  _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    try {\n      startBatch();\n      // Delete\n      var deleteOutcome = this.delete_(key);\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      }\n      // ADD interceptor\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: value\n        });\n        if (!change) {\n          return null;\n        }\n        value = change.newValue;\n      }\n      var cachedDescriptor = getCachedObservablePropDescriptor(key);\n      var descriptor = {\n        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n        enumerable: true,\n        get: cachedDescriptor.get,\n        set: cachedDescriptor.set\n      };\n      // Define\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      }\n      var observable = new ObservableValue(value, enhancer,  true ? this.name_ + \".\" + key.toString() : 0, false);\n      this.values_.set(key, observable);\n      // Notify (value possibly changed by ObservableValue)\n      this.notifyPropertyAddition_(key, observable.value_);\n    } finally {\n      endBatch();\n    }\n    return true;\n  }\n  // If original descriptor becomes relevant, move this to annotation directly\n  ;\n  _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    try {\n      startBatch();\n      // Delete\n      var deleteOutcome = this.delete_(key);\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      }\n      // ADD interceptor\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: undefined\n        });\n        if (!change) {\n          return null;\n        }\n      }\n      options.name || (options.name =  true ? this.name_ + \".\" + key.toString() : 0);\n      options.context = this.proxy_ || this.target_;\n      var cachedDescriptor = getCachedObservablePropDescriptor(key);\n      var descriptor = {\n        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n        enumerable: false,\n        get: cachedDescriptor.get,\n        set: cachedDescriptor.set\n      };\n      // Define\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      }\n      this.values_.set(key, new ComputedValue(options));\n      // Notify\n      this.notifyPropertyAddition_(key, undefined);\n    } finally {\n      endBatch();\n    }\n    return true;\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {PropertyDescriptor} descriptor\r\n   * @param {boolean} proxyTrap whether it's called from proxy trap\r\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n   */;\n  _proto.delete_ = function delete_(key, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    // No such prop\n    if (!hasProp(this.target_, key)) {\n      return true;\n    }\n    // Intercept\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this.proxy_ || this.target_,\n        name: key,\n        type: REMOVE\n      });\n      // Cancelled\n      if (!change) {\n        return null;\n      }\n    }\n    // Delete\n    try {\n      var _this$pendingKeys_, _this$pendingKeys_$ge;\n      startBatch();\n      var notify = hasListeners(this);\n      var notifySpy =  true && isSpyEnabled();\n      var observable = this.values_.get(key);\n      // Value needed for spies/listeners\n      var value = undefined;\n      // Optimization: don't pull the value unless we will need it\n      if (!observable && (notify || notifySpy)) {\n        var _getDescriptor;\n        value = (_getDescriptor = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor.value;\n      }\n      // delete prop (do first, may fail)\n      if (proxyTrap) {\n        if (!Reflect.deleteProperty(this.target_, key)) {\n          return false;\n        }\n      } else {\n        delete this.target_[key];\n      }\n      // Allow re-annotating this field\n      if (true) {\n        delete this.appliedAnnotations_[key];\n      }\n      // Clear observable\n      if (observable) {\n        this.values_[\"delete\"](key);\n        // for computed, value is undefined\n        if (observable instanceof ObservableValue) {\n          value = observable.value_;\n        }\n        // Notify: autorun(() => obj[key]), see #1796\n        propagateChanged(observable);\n      }\n      // Notify \"keys/entries/values\" observers\n      this.keysAtom_.reportChanged();\n      // Notify \"has\" observers\n      // \"in\" as it may still exist in proto\n      (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_);\n      // Notify spies/listeners\n      if (notify || notifySpy) {\n        var _change2 = {\n          type: REMOVE,\n          observableKind: \"object\",\n          object: this.proxy_ || this.target_,\n          debugObjectName: this.name_,\n          oldValue: value,\n          name: key\n        };\n        if ( true && notifySpy) {\n          spyReportStart(_change2);\n        }\n        if (notify) {\n          notifyListeners(this, _change2);\n        }\n        if ( true && notifySpy) {\n          spyReportEnd();\n        }\n      }\n    } finally {\n      endBatch();\n    }\n    return true;\n  }\n  /**\r\n   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.\r\n   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\r\n   * for callback details\r\n   */;\n  _proto.observe_ = function observe_(callback, fireImmediately) {\n    if ( true && fireImmediately === true) {\n      die(\"`observe` doesn't support the fire immediately property for observable objects.\");\n    }\n    return registerListener(this, callback);\n  };\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n  _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {\n    var _this$pendingKeys_2, _this$pendingKeys_2$g;\n    var notify = hasListeners(this);\n    var notifySpy =  true && isSpyEnabled();\n    if (notify || notifySpy) {\n      var change = notify || notifySpy ? {\n        type: ADD,\n        observableKind: \"object\",\n        debugObjectName: this.name_,\n        object: this.proxy_ || this.target_,\n        name: key,\n        newValue: value\n      } : null;\n      if ( true && notifySpy) {\n        spyReportStart(change);\n      }\n      if (notify) {\n        notifyListeners(this, change);\n      }\n      if ( true && notifySpy) {\n        spyReportEnd();\n      }\n    }\n    (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true);\n    // Notify \"keys/entries/values\" observers\n    this.keysAtom_.reportChanged();\n  };\n  _proto.ownKeys_ = function ownKeys_() {\n    this.keysAtom_.reportObserved();\n    return ownKeys(this.target_);\n  };\n  _proto.keys_ = function keys_() {\n    // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.\n    // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.\n    // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)\n    // We choose to over-report in Object.keys(object), because:\n    // - typically it's used with simple data objects\n    // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected\n    this.keysAtom_.reportObserved();\n    return Object.keys(this.target_);\n  };\n  return ObservableObjectAdministration;\n}();\nfunction asObservableObject(target, options) {\n  var _options$name;\n  if ( true && options && isObservableObject(target)) {\n    die(\"Options can't be provided for already observable objects.\");\n  }\n  if (hasProp(target, $mobx)) {\n    if ( true && !(getAdministration(target) instanceof ObservableObjectAdministration)) {\n      die(\"Cannot convert '\" + getDebugName(target) + \"' into observable object:\" + \"\\nThe target is already observable of different type.\" + \"\\nExtending builtins is not supported.\");\n    }\n    return target;\n  }\n  if ( true && !Object.isExtensible(target)) {\n    die(\"Cannot make the designated object observable; it is not extensible\");\n  }\n  var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name :  true ? (isPlainObject(target) ? \"ObservableObject\" : target.constructor.name) + \"@\" + getNextId() : 0;\n  var adm = new ObservableObjectAdministration(target, new Map(), String(name), getAnnotationFromOptions(options));\n  addHiddenProp(target, $mobx, adm);\n  return target;\n}\nvar isObservableObjectAdministration = /*#__PURE__*/createInstanceofPredicate(\"ObservableObjectAdministration\", ObservableObjectAdministration);\nfunction getCachedObservablePropDescriptor(key) {\n  return descriptorCache[key] || (descriptorCache[key] = {\n    get: function get() {\n      return this[$mobx].getObservablePropValue_(key);\n    },\n    set: function set(value) {\n      return this[$mobx].setObservablePropValue_(key, value);\n    }\n  });\n}\nfunction isObservableObject(thing) {\n  if (isObject(thing)) {\n    return isObservableObjectAdministration(thing[$mobx]);\n  }\n  return false;\n}\nfunction recordAnnotationApplied(adm, annotation, key) {\n  var _adm$target_$storedAn;\n  if (true) {\n    adm.appliedAnnotations_[key] = annotation;\n  }\n  // Remove applied decorator annotation so we don't try to apply it again in subclass constructor\n  (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];\n}\nfunction assertAnnotable(adm, annotation, key) {\n  // Valid annotation\n  if ( true && !isAnnotation(annotation)) {\n    die(\"Cannot annotate '\" + adm.name_ + \".\" + key.toString() + \"': Invalid annotation.\");\n  }\n  /*\r\n  // Configurable, not sealed, not frozen\r\n  // Possibly not needed, just a little better error then the one thrown by engine.\r\n  // Cases where this would be useful the most (subclass field initializer) are not interceptable by this.\r\n  if (__DEV__) {\r\n      const configurable = getDescriptor(adm.target_, key)?.configurable\r\n      const frozen = Object.isFrozen(adm.target_)\r\n      const sealed = Object.isSealed(adm.target_)\r\n      if (!configurable || frozen || sealed) {\r\n          const fieldName = `${adm.name_}.${key.toString()}`\r\n          const requestedAnnotationType = annotation.annotationType_\r\n          let error = `Cannot apply '${requestedAnnotationType}' to '${fieldName}':`\r\n          if (frozen) {\r\n              error += `\\nObject is frozen.`\r\n          }\r\n          if (sealed) {\r\n              error += `\\nObject is sealed.`\r\n          }\r\n          if (!configurable) {\r\n              error += `\\nproperty is not configurable.`\r\n              // Mention only if caused by us to avoid confusion\r\n              if (hasProp(adm.appliedAnnotations!, key)) {\r\n                  error += `\\nTo prevent accidental re-definition of a field by a subclass, `\r\n                  error += `all annotated fields of non-plain objects (classes) are not configurable.`\r\n              }\r\n          }\r\n          die(error)\r\n      }\r\n  }\r\n  */\n  // Not annotated\n  if ( true && !isOverride(annotation) && hasProp(adm.appliedAnnotations_, key)) {\n    var fieldName = adm.name_ + \".\" + key.toString();\n    var currentAnnotationType = adm.appliedAnnotations_[key].annotationType_;\n    var requestedAnnotationType = annotation.annotationType_;\n    die(\"Cannot apply '\" + requestedAnnotationType + \"' to '\" + fieldName + \"':\" + (\"\\nThe field is already annotated with '\" + currentAnnotationType + \"'.\") + \"\\nRe-annotating fields is not allowed.\" + \"\\nUse 'override' annotation for methods overridden by subclass.\");\n  }\n}\n\n// Bug in safari 9.* (or iOS 9 safari mobile). See #364\nvar ENTRY_0 = /*#__PURE__*/createArrayEntryDescriptor(0);\n/**\r\n * This array buffer contains two lists of properties, so that all arrays\r\n * can recycle their property definitions, which significantly improves performance of creating\r\n * properties on the fly.\r\n */\nvar OBSERVABLE_ARRAY_BUFFER_SIZE = 0;\n// Typescript workaround to make sure ObservableArray extends Array\nvar StubArray = function StubArray() {};\nfunction inherit(ctor, proto) {\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(ctor.prototype, proto);\n  } else if (ctor.prototype.__proto__ !== undefined) {\n    ctor.prototype.__proto__ = proto;\n  } else {\n    ctor.prototype = proto;\n  }\n}\ninherit(StubArray, Array.prototype);\n// Weex proto freeze protection was here,\n// but it is unclear why the hack is need as MobX never changed the prototype\n// anyway, so removed it in V6\nvar LegacyObservableArray = /*#__PURE__*/function (_StubArray, _Symbol$toStringTag, _Symbol$iterator) {\n  _inheritsLoose(LegacyObservableArray, _StubArray);\n  function LegacyObservableArray(initialValues, enhancer, name, owned) {\n    var _this;\n    if (name === void 0) {\n      name =  true ? \"ObservableArray@\" + getNextId() : 0;\n    }\n    if (owned === void 0) {\n      owned = false;\n    }\n    _this = _StubArray.call(this) || this;\n    var adm = new ObservableArrayAdministration(name, enhancer, owned, true);\n    adm.proxy_ = _assertThisInitialized(_this);\n    addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);\n    if (initialValues && initialValues.length) {\n      var prev = allowStateChangesStart(true);\n      // @ts-ignore\n      _this.spliceWithArray(0, 0, initialValues);\n      allowStateChangesEnd(prev);\n    }\n    {\n      // Seems that Safari won't use numeric prototype setter untill any * numeric property is\n      // defined on the instance. After that it works fine, even if this property is deleted.\n      Object.defineProperty(_assertThisInitialized(_this), \"0\", ENTRY_0);\n    }\n    return _this;\n  }\n  var _proto = LegacyObservableArray.prototype;\n  _proto.concat = function concat() {\n    this[$mobx].atom_.reportObserved();\n    for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n      arrays[_key] = arguments[_key];\n    }\n    return Array.prototype.concat.apply(this.slice(),\n    //@ts-ignore\n    arrays.map(function (a) {\n      return isObservableArray(a) ? a.slice() : a;\n    }));\n  };\n  _proto[_Symbol$iterator] = function () {\n    var self = this;\n    var nextIndex = 0;\n    return makeIterable({\n      next: function next() {\n        return nextIndex < self.length ? {\n          value: self[nextIndex++],\n          done: false\n        } : {\n          done: true,\n          value: undefined\n        };\n      }\n    });\n  };\n  _createClass(LegacyObservableArray, [{\n    key: \"length\",\n    get: function get() {\n      return this[$mobx].getArrayLength_();\n    },\n    set: function set(newLength) {\n      this[$mobx].setArrayLength_(newLength);\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return \"Array\";\n    }\n  }]);\n  return LegacyObservableArray;\n}(StubArray, Symbol.toStringTag, Symbol.iterator);\nObject.entries(arrayExtensions).forEach(function (_ref) {\n  var prop = _ref[0],\n    fn = _ref[1];\n  if (prop !== \"concat\") {\n    addHiddenProp(LegacyObservableArray.prototype, prop, fn);\n  }\n});\nfunction createArrayEntryDescriptor(index) {\n  return {\n    enumerable: false,\n    configurable: true,\n    get: function get() {\n      return this[$mobx].get_(index);\n    },\n    set: function set(value) {\n      this[$mobx].set_(index, value);\n    }\n  };\n}\nfunction createArrayBufferItem(index) {\n  defineProperty(LegacyObservableArray.prototype, \"\" + index, createArrayEntryDescriptor(index));\n}\nfunction reserveArrayBuffer(max) {\n  if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {\n    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {\n      createArrayBufferItem(index);\n    }\n    OBSERVABLE_ARRAY_BUFFER_SIZE = max;\n  }\n}\nreserveArrayBuffer(1000);\nfunction createLegacyArray(initialValues, enhancer, name) {\n  return new LegacyObservableArray(initialValues, enhancer, name);\n}\n\nfunction getAtom(thing, property) {\n  if (typeof thing === \"object\" && thing !== null) {\n    if (isObservableArray(thing)) {\n      if (property !== undefined) {\n        die(23);\n      }\n      return thing[$mobx].atom_;\n    }\n    if (isObservableSet(thing)) {\n      return thing.atom_;\n    }\n    if (isObservableMap(thing)) {\n      if (property === undefined) {\n        return thing.keysAtom_;\n      }\n      var observable = thing.data_.get(property) || thing.hasMap_.get(property);\n      if (!observable) {\n        die(25, property, getDebugName(thing));\n      }\n      return observable;\n    }\n    if (isObservableObject(thing)) {\n      if (!property) {\n        return die(26);\n      }\n      var _observable = thing[$mobx].values_.get(property);\n      if (!_observable) {\n        die(27, property, getDebugName(thing));\n      }\n      return _observable;\n    }\n    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n      return thing;\n    }\n  } else if (isFunction(thing)) {\n    if (isReaction(thing[$mobx])) {\n      // disposer function\n      return thing[$mobx];\n    }\n  }\n  die(28);\n}\nfunction getAdministration(thing, property) {\n  if (!thing) {\n    die(29);\n  }\n  if (property !== undefined) {\n    return getAdministration(getAtom(thing, property));\n  }\n  if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n    return thing;\n  }\n  if (isObservableMap(thing) || isObservableSet(thing)) {\n    return thing;\n  }\n  if (thing[$mobx]) {\n    return thing[$mobx];\n  }\n  die(24, thing);\n}\nfunction getDebugName(thing, property) {\n  var named;\n  if (property !== undefined) {\n    named = getAtom(thing, property);\n  } else if (isAction(thing)) {\n    return thing.name;\n  } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {\n    named = getAdministration(thing);\n  } else {\n    // valid for arrays as well\n    named = getAtom(thing);\n  }\n  return named.name_;\n}\n\nvar toString = objectPrototype.toString;\nfunction deepEqual(a, b, depth) {\n  if (depth === void 0) {\n    depth = -1;\n  }\n  return eq(a, b, depth);\n}\n// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289\n// Internal recursive comparison function for `isEqual`.\nfunction eq(a, b, depth, aStack, bStack) {\n  // Identical objects are equal. `0 === -0`, but they aren't identical.\n  // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n  if (a === b) {\n    return a !== 0 || 1 / a === 1 / b;\n  }\n  // `null` or `undefined` only equal to itself (strict comparison).\n  if (a == null || b == null) {\n    return false;\n  }\n  // `NaN`s are equivalent, but non-reflexive.\n  if (a !== a) {\n    return b !== b;\n  }\n  // Exhaust primitive checks\n  var type = typeof a;\n  if (type !== \"function\" && type !== \"object\" && typeof b != \"object\") {\n    return false;\n  }\n  // Compare `[[Class]]` names.\n  var className = toString.call(a);\n  if (className !== toString.call(b)) {\n    return false;\n  }\n  switch (className) {\n    // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n    case \"[object RegExp]\":\n    // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n    case \"[object String]\":\n      // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n      // equivalent to `new String(\"5\")`.\n      return \"\" + a === \"\" + b;\n    case \"[object Number]\":\n      // `NaN`s are equivalent, but non-reflexive.\n      // Object(NaN) is equivalent to NaN.\n      if (+a !== +a) {\n        return +b !== +b;\n      }\n      // An `egal` comparison is performed for other numeric values.\n      return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n    case \"[object Date]\":\n    case \"[object Boolean]\":\n      // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n      // millisecond representations. Note that invalid dates with millisecond representations\n      // of `NaN` are not equivalent.\n      return +a === +b;\n    case \"[object Symbol]\":\n      return typeof Symbol !== \"undefined\" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);\n    case \"[object Map]\":\n    case \"[object Set]\":\n      // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.\n      // Hide this extra level by increasing the depth.\n      if (depth >= 0) {\n        depth++;\n      }\n      break;\n  }\n  // Unwrap any wrapped objects.\n  a = unwrap(a);\n  b = unwrap(b);\n  var areArrays = className === \"[object Array]\";\n  if (!areArrays) {\n    if (typeof a != \"object\" || typeof b != \"object\") {\n      return false;\n    }\n    // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n    // from different frames are.\n    var aCtor = a.constructor,\n      bCtor = b.constructor;\n    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && \"constructor\" in a && \"constructor\" in b) {\n      return false;\n    }\n  }\n  if (depth === 0) {\n    return false;\n  } else if (depth < 0) {\n    depth = -1;\n  }\n  // Assume equality for cyclic structures. The algorithm for detecting cyclic\n  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n  // Initializing stack of traversed objects.\n  // It's done here since we only need them for objects and arrays comparison.\n  aStack = aStack || [];\n  bStack = bStack || [];\n  var length = aStack.length;\n  while (length--) {\n    // Linear search. Performance is inversely proportional to the number of\n    // unique nested structures.\n    if (aStack[length] === a) {\n      return bStack[length] === b;\n    }\n  }\n  // Add the first object to the stack of traversed objects.\n  aStack.push(a);\n  bStack.push(b);\n  // Recursively compare objects and arrays.\n  if (areArrays) {\n    // Compare array lengths to determine if a deep comparison is necessary.\n    length = a.length;\n    if (length !== b.length) {\n      return false;\n    }\n    // Deep compare the contents, ignoring non-numeric properties.\n    while (length--) {\n      if (!eq(a[length], b[length], depth - 1, aStack, bStack)) {\n        return false;\n      }\n    }\n  } else {\n    // Deep compare objects.\n    var keys = Object.keys(a);\n    var key;\n    length = keys.length;\n    // Ensure that both objects contain the same number of properties before comparing deep equality.\n    if (Object.keys(b).length !== length) {\n      return false;\n    }\n    while (length--) {\n      // Deep compare each member\n      key = keys[length];\n      if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) {\n        return false;\n      }\n    }\n  }\n  // Remove the first object from the stack of traversed objects.\n  aStack.pop();\n  bStack.pop();\n  return true;\n}\nfunction unwrap(a) {\n  if (isObservableArray(a)) {\n    return a.slice();\n  }\n  if (isES6Map(a) || isObservableMap(a)) {\n    return Array.from(a.entries());\n  }\n  if (isES6Set(a) || isObservableSet(a)) {\n    return Array.from(a.entries());\n  }\n  return a;\n}\n\nfunction makeIterable(iterator) {\n  iterator[Symbol.iterator] = getSelf;\n  return iterator;\n}\nfunction getSelf() {\n  return this;\n}\n\nfunction isAnnotation(thing) {\n  return (\n    // Can be function\n    thing instanceof Object && typeof thing.annotationType_ === \"string\" && isFunction(thing.make_) && isFunction(thing.extend_)\n  );\n}\n\n/**\r\n * (c) Michel Weststrate 2015 - 2020\r\n * MIT Licensed\r\n *\r\n * Welcome to the mobx sources! To get a global overview of how MobX internally works,\r\n * this is a good place to start:\r\n * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74\r\n *\r\n * Source folders:\r\n * ===============\r\n *\r\n * - api/     Most of the public static methods exposed by the module can be found here.\r\n * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.\r\n * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.\r\n * - utils/   Utility stuff.\r\n *\r\n */\n[\"Symbol\", \"Map\", \"Set\"].forEach(function (m) {\n  var g = getGlobal();\n  if (typeof g[m] === \"undefined\") {\n    die(\"MobX requires global '\" + m + \"' to be available or polyfilled\");\n  }\n});\nif (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === \"object\") {\n  // See: https://github.com/andykog/mobx-devtools/\n  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({\n    spy: spy,\n    extras: {\n      getDebugName: getDebugName\n    },\n    $mobx: $mobx\n  });\n}\n\n\n//# sourceMappingURL=mobx.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/mobx/dist/mobx.esm.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/polyfills/process.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/process.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = __webpack_require__.g.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = __webpack_require__.g.process) == null ? void 0 : _global_process1.env) === \"object\" ? __webpack_require__.g.process : __webpack_require__(/*! ../../compiled/process */ \"./node_modules/next/dist/compiled/process/browser.js\");\n\n//# sourceMappingURL=process.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3BvbHlmaWxscy9wcm9jZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSxxQ0FBcUMscUJBQU0saUZBQWlGLHFCQUFNLGtFQUFrRSxxQkFBTSxXQUFXLG1CQUFPLENBQUMsb0ZBQXdCOztBQUVyUCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3BvbHlmaWxscy9wcm9jZXNzLmpzP2NhNjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX2dsb2JhbF9wcm9jZXNzLCBfZ2xvYmFsX3Byb2Nlc3MxO1xubW9kdWxlLmV4cG9ydHMgPSAoKF9nbG9iYWxfcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzKSA9PSBudWxsID8gdm9pZCAwIDogX2dsb2JhbF9wcm9jZXNzLmVudikgJiYgdHlwZW9mICgoX2dsb2JhbF9wcm9jZXNzMSA9IGdsb2JhbC5wcm9jZXNzKSA9PSBudWxsID8gdm9pZCAwIDogX2dsb2JhbF9wcm9jZXNzMS5lbnYpID09PSBcIm9iamVjdFwiID8gZ2xvYmFsLnByb2Nlc3MgOiByZXF1aXJlKFwiLi4vLi4vY29tcGlsZWQvcHJvY2Vzc1wiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvY2Vzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/polyfills/process.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!":
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app! ***!
  \*******************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/_app\",\n      function () {\n        return __webpack_require__(/*! private-next-pages/_app */ \"./src/pages/_app.tsx\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/_app\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD1wcml2YXRlLW5leHQtcGFnZXMlMkZfYXBwJnBhZ2U9JTJGX2FwcCEiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxxREFBeUI7QUFDaEQ7QUFDQTtBQUNBLE9BQU8sSUFBVTtBQUNqQixNQUFNLFVBQVU7QUFDaEI7QUFDQSxPQUFPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvPzY3ODIiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgKHdpbmRvdy5fX05FWFRfUCA9IHdpbmRvdy5fX05FWFRfUCB8fCBbXSkucHVzaChbXG4gICAgICBcIi9fYXBwXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlKFwicHJpdmF0ZS1uZXh0LXBhZ2VzL19hcHBcIik7XG4gICAgICB9XG4gICAgXSk7XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Ll9fTkVYVF9QLnB1c2goW1wiL19hcHBcIl0pXG4gICAgICB9KTtcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!\n"));

/***/ }),

/***/ "./src/containers/Layout/Layout.tsx":
/*!******************************************!*\
  !*** ./src/containers/Layout/Layout.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Layout: function() { return /* binding */ Layout; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_tagged_template_literal */ \"./node_modules/@swc/helpers/esm/_tagged_template_literal.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! styled-components */ \"./node_modules/styled-components/dist/styled-components.browser.esm.js\");\n\nfunction _templateObject() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n  padding: 60px;\\n  min-height: 100vh;\\n  height: 100%;\\n\"\n    ]);\n    _templateObject = function() {\n        return data;\n    };\n    return data;\n}\n\n\n\nconst Layout = (param)=>/*#__PURE__*/ {\n    let { children } = param;\n    return (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(Container, {\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/NAPAS/sudoku/src/containers/Layout/Layout.tsx\",\n        lineNumber: 5,\n        columnNumber: 3\n    }, undefined);\n};\n_c = Layout;\nconst Container = styled_components__WEBPACK_IMPORTED_MODULE_3__[\"default\"].div(_templateObject());\n_c1 = Container;\nvar _c, _c1;\n$RefreshReg$(_c, \"Layout\");\n$RefreshReg$(_c1, \"Container\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29udGFpbmVycy9MYXlvdXQvTGF5b3V0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBeUI7QUFDYTtBQUUvQixNQUFNRSxTQUFtQjtRQUFDLEVBQUVDLFFBQVEsRUFBRTtXQUMzQyw4REFBQ0M7a0JBQVdEOzs7Ozs7QUFBb0IsRUFDakM7S0FGWUQ7QUFJYixNQUFNRSxZQUFZSCw2REFBVTtNQUF0QkciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbnRhaW5lcnMvTGF5b3V0L0xheW91dC50c3g/YjUxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5leHBvcnQgY29uc3QgTGF5b3V0OiBSZWFjdC5GQyA9ICh7IGNoaWxkcmVuIH0pID0+IChcbiAgPENvbnRhaW5lcj57Y2hpbGRyZW59PC9Db250YWluZXI+XG4pXG5cbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDYwcHg7XG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xuICBoZWlnaHQ6IDEwMCU7XG5gXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJzdHlsZWQiLCJMYXlvdXQiLCJjaGlsZHJlbiIsIkNvbnRhaW5lciIsImRpdiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/containers/Layout/Layout.tsx\n"));

/***/ }),

/***/ "./src/containers/index.ts":
/*!*********************************!*\
  !*** ./src/containers/index.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Layout_Layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Layout/Layout */ \"./src/containers/Layout/Layout.tsx\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _Layout_Layout__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _Layout_Layout__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29udGFpbmVycy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29udGFpbmVycy9pbmRleC50cz84MDZiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vTGF5b3V0L0xheW91dCdcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/containers/index.ts\n"));

/***/ }),

/***/ "./src/pages/_app.tsx":
/*!****************************!*\
  !*** ./src/pages/_app.tsx ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _containers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @containers */ \"./src/containers/index.ts\");\n/* harmony import */ var _store_initStore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @store/initStore */ \"./src/store/initStore.ts\");\n/* harmony import */ var mobx_react_lite__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! mobx-react-lite */ \"./node_modules/mobx-react-lite/es/index.js\");\n/* harmony import */ var mobx_store_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! mobx-store-provider */ \"./node_modules/mobx-store-provider/lib/index.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\nconst Application = _s((0,mobx_react_lite__WEBPACK_IMPORTED_MODULE_4__.observer)(_c = _s((param)=>{\n    let { Component, router, pageProps = {} } = param;\n    _s();\n    const store = (0,mobx_store_provider__WEBPACK_IMPORTED_MODULE_5__.useCreateStore)(()=>{\n        var _pageProps;\n        return (0,_store_initStore__WEBPACK_IMPORTED_MODULE_3__.initRootStore)((_pageProps = pageProps) === null || _pageProps === void 0 ? void 0 : _pageProps.initialState, {\n            router\n        });\n    });\n    const Provider = (0,mobx_store_provider__WEBPACK_IMPORTED_MODULE_5__.useProvider)();\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Provider, {\n        value: store,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_containers__WEBPACK_IMPORTED_MODULE_2__.Layout, {\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n                ...pageProps,\n                router: router\n            }, void 0, false, {\n                fileName: \"/Users/NAPAS/sudoku/src/pages/_app.tsx\",\n                lineNumber: 19,\n                columnNumber: 11\n            }, undefined)\n        }, void 0, false, {\n            fileName: \"/Users/NAPAS/sudoku/src/pages/_app.tsx\",\n            lineNumber: 18,\n            columnNumber: 9\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"/Users/NAPAS/sudoku/src/pages/_app.tsx\",\n        lineNumber: 17,\n        columnNumber: 7\n    }, undefined);\n}, \"IKDZIF3PAn9nx32UweZQ74RmRMk=\", false, function() {\n    return [\n        mobx_store_provider__WEBPACK_IMPORTED_MODULE_5__.useCreateStore,\n        mobx_store_provider__WEBPACK_IMPORTED_MODULE_5__.useProvider\n    ];\n})), \"IKDZIF3PAn9nx32UweZQ74RmRMk=\", false, function() {\n    return [\n        mobx_store_provider__WEBPACK_IMPORTED_MODULE_5__.useCreateStore,\n        mobx_store_provider__WEBPACK_IMPORTED_MODULE_5__.useProvider\n    ];\n});\n_c1 = Application;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Application);\nvar _c, _c1;\n$RefreshReg$(_c, \"Application$observer\");\n$RefreshReg$(_c1, \"Application\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGFnZXMvX2FwcC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBeUI7QUFDVztBQUNZO0FBQ047QUFDdUI7QUFHakUsTUFBTU0sY0FBY0gsR0FBQUEseURBQVFBLFNBQzFCO1FBQUMsRUFBRUksU0FBUyxFQUFFQyxNQUFNLEVBQUVDLFlBQVksQ0FBQyxDQUFDLEVBQThCOztJQUNoRSxNQUFNQyxRQUFRTixtRUFBY0EsQ0FBQztZQUNiSztlQUFkUCwrREFBYUEsRUFBQ08sYUFBQUEsdUJBQUFBLGlDQUFBQSxXQUFXRSxZQUFZLEVBQUU7WUFBRUg7UUFBTzs7SUFHbEQsTUFBTUksV0FBV1AsZ0VBQVdBO0lBRTVCLHFCQUNFLDhEQUFDTztRQUFTQyxPQUFPSDtrQkFDZiw0RUFBQ1QsK0NBQU1BO3NCQUNMLDRFQUFDTTtnQkFBVyxHQUFHRSxTQUFTO2dCQUFFRCxRQUFRQTs7Ozs7Ozs7Ozs7Ozs7OztBQUkxQzs7UUFiZ0JKLCtEQUFjQTtRQUlYQyw0REFBV0E7Ozs7UUFKZEQsK0RBQWNBO1FBSVhDLDREQUFXQTs7OztBQVloQywrREFBZUMsV0FBV0EsRUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvcGFnZXMvX2FwcC50c3g/ZjlkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBMYXlvdXQgfSBmcm9tICdAY29udGFpbmVycydcbmltcG9ydCB7IGluaXRSb290U3RvcmUgfSBmcm9tICdAc3RvcmUvaW5pdFN0b3JlJ1xuaW1wb3J0IHsgb2JzZXJ2ZXIgfSBmcm9tICdtb2J4LXJlYWN0LWxpdGUnXG5pbXBvcnQgeyB1c2VDcmVhdGVTdG9yZSwgdXNlUHJvdmlkZXIgfSBmcm9tICdtb2J4LXN0b3JlLXByb3ZpZGVyJ1xuaW1wb3J0IHsgQXBwSW5pdGlhbFByb3BzLCBBcHBQcm9wcyB9IGZyb20gJ25leHQvYXBwJ1xuXG5jb25zdCBBcHBsaWNhdGlvbiA9IG9ic2VydmVyKFxuICAoeyBDb21wb25lbnQsIHJvdXRlciwgcGFnZVByb3BzID0ge30gfTogQXBwUHJvcHMgJiBBcHBJbml0aWFsUHJvcHMpID0+IHtcbiAgICBjb25zdCBzdG9yZSA9IHVzZUNyZWF0ZVN0b3JlKCgpID0+XG4gICAgICBpbml0Um9vdFN0b3JlKHBhZ2VQcm9wcz8uaW5pdGlhbFN0YXRlLCB7IHJvdXRlciB9KSxcbiAgICApXG5cbiAgICBjb25zdCBQcm92aWRlciA9IHVzZVByb3ZpZGVyKClcblxuICAgIHJldHVybiAoXG4gICAgICA8UHJvdmlkZXIgdmFsdWU9e3N0b3JlfT5cbiAgICAgICAgPExheW91dD5cbiAgICAgICAgICA8Q29tcG9uZW50IHsuLi5wYWdlUHJvcHN9IHJvdXRlcj17cm91dGVyfSAvPlxuICAgICAgICA8L0xheW91dD5cbiAgICAgIDwvUHJvdmlkZXI+XG4gICAgKVxuICB9LFxuKVxuXG5leHBvcnQgZGVmYXVsdCBBcHBsaWNhdGlvblxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiTGF5b3V0IiwiaW5pdFJvb3RTdG9yZSIsIm9ic2VydmVyIiwidXNlQ3JlYXRlU3RvcmUiLCJ1c2VQcm92aWRlciIsIkFwcGxpY2F0aW9uIiwiQ29tcG9uZW50Iiwicm91dGVyIiwicGFnZVByb3BzIiwic3RvcmUiLCJpbml0aWFsU3RhdGUiLCJQcm92aWRlciIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/pages/_app.tsx\n"));

/***/ }),

/***/ "./src/store/contexts.ts":
/*!*******************************!*\
  !*** ./src/store/contexts.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   routerCtx: function() { return /* binding */ routerCtx; }\n/* harmony export */ });\n/* harmony import */ var mobx_keystone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx-keystone */ \"./node_modules/mobx-keystone/dist/mobx-keystone.esm.mjs\");\n\n// import { api } from '@app/services/data/Api'\n// export const apiCtx = createContext(api)\nconst routerCtx = (0,mobx_keystone__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RvcmUvY29udGV4dHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkM7QUFHN0MsK0NBQStDO0FBRS9DLDJDQUEyQztBQUNwQyxNQUFNQyxZQUFZRCw0REFBYUEsR0FBNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3N0b3JlL2NvbnRleHRzLnRzP2ExYzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ21vYngta2V5c3RvbmUnXG5pbXBvcnQgUm91dGVyIGZyb20gJ25leHQvcm91dGVyJ1xuXG4vLyBpbXBvcnQgeyBhcGkgfSBmcm9tICdAYXBwL3NlcnZpY2VzL2RhdGEvQXBpJ1xuXG4vLyBleHBvcnQgY29uc3QgYXBpQ3R4ID0gY3JlYXRlQ29udGV4dChhcGkpXG5leHBvcnQgY29uc3Qgcm91dGVyQ3R4ID0gY3JlYXRlQ29udGV4dDwodHlwZW9mIFJvdXRlcilbJ3JvdXRlciddPigpXG4iXSwibmFtZXMiOlsiY3JlYXRlQ29udGV4dCIsInJvdXRlckN0eCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/store/contexts.ts\n"));

/***/ }),

/***/ "./src/store/initStore.ts":
/*!********************************!*\
  !*** ./src/store/initStore.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initRootStore: function() { return /* binding */ initRootStore; }\n/* harmony export */ });\n/* harmony import */ var mobx_keystone__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mobx-keystone */ \"./node_modules/mobx-keystone/dist/mobx-keystone.esm.mjs\");\n/* harmony import */ var mobx_react_lite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx-react-lite */ \"./node_modules/mobx-react-lite/es/index.js\");\n/* harmony import */ var _stores_root__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stores/root */ \"./src/store/stores/root.ts\");\n/* harmony import */ var _contexts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contexts */ \"./src/store/contexts.ts\");\n\n\n\n\n(0,mobx_keystone__WEBPACK_IMPORTED_MODULE_3__.setGlobalConfig)({\n    modelAutoTypeChecking: mobx_keystone__WEBPACK_IMPORTED_MODULE_3__.ModelAutoTypeCheckingMode.DevModeOnly\n});\n(0,mobx_react_lite__WEBPACK_IMPORTED_MODULE_0__.enableStaticRendering)(\"object\" === \"undefined\");\nlet store;\nfunction initRootStore(snapshot) {\n    let { router } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    store =  false ? 0 : snapshot ? (0,mobx_keystone__WEBPACK_IMPORTED_MODULE_3__.fromSnapshot)(snapshot) : new _stores_root__WEBPACK_IMPORTED_MODULE_1__.RootStore({});\n    if (router) _contexts__WEBPACK_IMPORTED_MODULE_2__.routerCtx.set(store, router);\n    if (!(0,mobx_keystone__WEBPACK_IMPORTED_MODULE_3__.isRootStore)(store)) (0,mobx_keystone__WEBPACK_IMPORTED_MODULE_3__.registerRootStore)(store);\n    return store;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RvcmUvaW5pdFN0b3JlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBT3NCO0FBQ2lDO0FBR2Q7QUFDSDtBQUt0Q0ksOERBQWVBLENBQUM7SUFDZEksdUJBQXVCTixvRUFBeUJBLENBQUNPLFdBQVc7QUFDOUQ7QUFFQUosc0VBQXFCQSxDQUFDLGFBQWtCO0FBRXhDLElBQUlLO0FBRUcsU0FBU0MsY0FDZEMsUUFBa0M7UUFDbEMsRUFBRUMsTUFBTSxFQUFvQixHQUE1QixpRUFBK0IsQ0FBQztJQUVoQ0gsUUFDRSxNQUFrQixHQUNkLENBQWlCLEdBQ2pCRSxXQUNBWiwyREFBWUEsQ0FBWVksWUFDeEIsSUFBSU4sbURBQVNBLENBQUMsQ0FBQztJQUVyQixJQUFJTyxRQUFRTixnREFBU0EsQ0FBQ08sR0FBRyxDQUFDSixPQUFPRztJQUVqQyxJQUFJLENBQUNaLDBEQUFXQSxDQUFDUyxRQUFRUCxnRUFBaUJBLENBQUNPO0lBRTNDLE9BQU9BO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3N0b3JlL2luaXRTdG9yZS50cz9mMWI5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGZyb21TbmFwc2hvdCxcbiAgaXNSb290U3RvcmUsXG4gIE1vZGVsQXV0b1R5cGVDaGVja2luZ01vZGUsXG4gIHJlZ2lzdGVyUm9vdFN0b3JlLFxuICBzZXRHbG9iYWxDb25maWcsXG4gIFNuYXBzaG90SW5PZixcbn0gZnJvbSAnbW9ieC1rZXlzdG9uZSdcbmltcG9ydCB7IGVuYWJsZVN0YXRpY1JlbmRlcmluZyB9IGZyb20gJ21vYngtcmVhY3QtbGl0ZSdcbmltcG9ydCBSb3V0ZXIgZnJvbSAnbmV4dC9yb3V0ZXInXG5cbmltcG9ydCB7IFJvb3RTdG9yZSB9IGZyb20gJy4vc3RvcmVzL3Jvb3QnXG5pbXBvcnQgeyByb3V0ZXJDdHggfSBmcm9tICcuL2NvbnRleHRzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIEluaXRTdG9yZU9wdGlvbnMge1xuICByb3V0ZXI/OiAodHlwZW9mIFJvdXRlcilbJ3JvdXRlciddXG59XG5zZXRHbG9iYWxDb25maWcoe1xuICBtb2RlbEF1dG9UeXBlQ2hlY2tpbmc6IE1vZGVsQXV0b1R5cGVDaGVja2luZ01vZGUuRGV2TW9kZU9ubHksXG59KVxuXG5lbmFibGVTdGF0aWNSZW5kZXJpbmcodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpXG5cbmxldCBzdG9yZTogUm9vdFN0b3JlIHwgdW5kZWZpbmVkXG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0Um9vdFN0b3JlKFxuICBzbmFwc2hvdD86IFNuYXBzaG90SW5PZjxSb290U3RvcmU+LFxuICB7IHJvdXRlciB9OiBJbml0U3RvcmVPcHRpb25zID0ge30sXG4pIHtcbiAgc3RvcmUgPVxuICAgIHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnXG4gICAgICA/IG5ldyBSb290U3RvcmUoe30pXG4gICAgICA6IHNuYXBzaG90XG4gICAgICA/IGZyb21TbmFwc2hvdDxSb290U3RvcmU+KHNuYXBzaG90KVxuICAgICAgOiBuZXcgUm9vdFN0b3JlKHt9KVxuXG4gIGlmIChyb3V0ZXIpIHJvdXRlckN0eC5zZXQoc3RvcmUsIHJvdXRlcilcblxuICBpZiAoIWlzUm9vdFN0b3JlKHN0b3JlKSkgcmVnaXN0ZXJSb290U3RvcmUoc3RvcmUpXG5cbiAgcmV0dXJuIHN0b3JlXG59XG4iXSwibmFtZXMiOlsiZnJvbVNuYXBzaG90IiwiaXNSb290U3RvcmUiLCJNb2RlbEF1dG9UeXBlQ2hlY2tpbmdNb2RlIiwicmVnaXN0ZXJSb290U3RvcmUiLCJzZXRHbG9iYWxDb25maWciLCJlbmFibGVTdGF0aWNSZW5kZXJpbmciLCJSb290U3RvcmUiLCJyb3V0ZXJDdHgiLCJtb2RlbEF1dG9UeXBlQ2hlY2tpbmciLCJEZXZNb2RlT25seSIsInN0b3JlIiwiaW5pdFJvb3RTdG9yZSIsInNuYXBzaG90Iiwicm91dGVyIiwic2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/store/initStore.ts\n"));

/***/ }),

/***/ "./src/store/stores/root.ts":
/*!**********************************!*\
  !*** ./src/store/stores/root.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RootStore: function() { return /* binding */ RootStore; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/_/_ts_decorate */ \"./node_modules/@swc/helpers/esm/_ts_decorate.js\");\n/* harmony import */ var mobx_keystone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx-keystone */ \"./node_modules/mobx-keystone/dist/mobx-keystone.esm.mjs\");\n\n\nlet RootStore = class RootStore extends (0,mobx_keystone__WEBPACK_IMPORTED_MODULE_0__.Model)({\n}) {\n};\nRootStore = (0,_swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_1__._)([\n    (0,mobx_keystone__WEBPACK_IMPORTED_MODULE_0__.model)(\"app\")\n], RootStore);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RvcmUvc3RvcmVzL3Jvb3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0RDtBQUdyRCxJQUFNRSxZQUFOLHdCQUF3QkYsb0RBQUtBLENBQUM7QUFHckM7QUFXQTtBQWRhRSxZQUFBQSwyREFBQUE7SUFEWkQsb0RBQUtBLENBQUM7R0FDTUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3N0b3JlL3N0b3Jlcy9yb290LnRzP2M2MmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX2FzeW5jLCBfYXdhaXQsIE1vZGVsLCBtb2RlbCB9IGZyb20gJ21vYngta2V5c3RvbmUnXG5cbkBtb2RlbCgnYXBwJylcbmV4cG9ydCBjbGFzcyBSb290U3RvcmUgZXh0ZW5kcyBNb2RlbCh7XG4gIC8vIHRvZG9zOiBwcm9wKCgpID0+IG5ldyBUb2Rvcyh7IGxpc3Q6IFtdIH0pKSxcbiAgLy8gZmF2b3JpdGVzOiBwcm9wKCgpID0+IG5ldyBGYXZvcml0ZXMoeyBsaXN0OiBbXSB9KSksXG59KSB7XG4gIC8vIEBtb2RlbEZsb3dcbiAgLy8gcHVibGljIGxvYWRJbml0aWFsRGF0YSA9IF9hc3luYyhmdW5jdGlvbiogKHRoaXM6IFJvb3RTdG9yZSkge1xuICAvLyAgIHlpZWxkKiBfYXdhaXQoXG4gIC8vICAgICBQcm9taXNlLmFsbChbXG4gIC8vICAgICAgIHRoaXMucmVzb3VyY2VzLmdldEdyb3VwcygpLFxuICAvLyAgICAgICB0aGlzLnJlc291cmNlcy5nZXRPcHRpb25Hcm91cHMoKSxcbiAgLy8gICAgICAgdGhpcy5yZW1vdGVDb25maWcubG9hZFJlbW90ZUNvbmZpZygpLFxuICAvLyAgICAgXSksXG4gIC8vICAgKVxuICAvLyB9KVxufVxuIl0sIm5hbWVzIjpbIk1vZGVsIiwibW9kZWwiLCJSb290U3RvcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/store/stores/root.ts\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/process/browser.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/compiled/process/browser.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsWUFBWSxPQUFPLGdCQUFnQixtQkFBbUIsTUFBTSxNQUFNLDRCQUE0QixtREFBbUQsK0JBQStCLHFEQUFxRCxZQUFZLElBQUksbUNBQW1DLGFBQWEsS0FBSyxvQkFBb0IsU0FBUyxtQkFBbUIsSUFBSSxxQ0FBcUMsZUFBZSxLQUFLLHVCQUF1QixTQUFTLHVCQUF1QixJQUFJLHVCQUF1QixtQkFBbUIsdUJBQXVCLDJDQUEyQyxhQUFhLHVCQUF1QixJQUFJLGNBQWMsU0FBUyxJQUFJLHdCQUF3QixTQUFTLDBCQUEwQiw0QkFBNEIscUJBQXFCLHVCQUF1QixnREFBZ0QsZUFBZSx1QkFBdUIsSUFBSSxZQUFZLFNBQVMsSUFBSSxzQkFBc0IsU0FBUyx3QkFBd0IsU0FBUyxZQUFZLE1BQU0sU0FBUywyQkFBMkIsV0FBVyxPQUFPLFFBQVEsYUFBYSxjQUFjLEtBQUssS0FBSyxhQUFhLGNBQWMsc0JBQXNCLE1BQU0sT0FBTyxrQ0FBa0MsT0FBTyxlQUFlLFNBQVMsSUFBSSxLQUFLLGFBQWEsTUFBTSxZQUFZLEtBQUssV0FBVyxPQUFPLFFBQVEsbUJBQW1CLHVCQUF1QixvQ0FBb0MsdUJBQXVCLFlBQVksbUJBQW1CLEtBQUsscUJBQXFCLHNCQUFzQixxQkFBcUIseUJBQXlCLG1CQUFtQixXQUFXLGFBQWEsOEJBQThCLGlDQUFpQyxrQkFBa0IsZUFBZSxTQUFTLFVBQVUsYUFBYSxjQUFjLGlCQUFpQixVQUFVLG1CQUFtQixZQUFZLFdBQVcsc0JBQXNCLDBCQUEwQixZQUFZLHVCQUF1QiwyQkFBMkIsd0JBQXdCLFVBQVUsc0JBQXNCLHFEQUFxRCxpQkFBaUIsV0FBVyxvQkFBb0IsbURBQW1ELG1CQUFtQixZQUFZLFNBQVMsZ0NBQWdDLFdBQVcsa0JBQWtCLGlCQUFpQixZQUFZLFlBQVksV0FBVyxJQUFJLHNDQUFzQyxRQUFRLFFBQVEsaUJBQWlCLGlCQUFpQixtRUFBbUUsU0FBUyxLQUFLLCtCQUErQixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9wcm9jZXNzL2Jyb3dzZXIuanM/MWIxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXt2YXIgZT17MjI5OmZ1bmN0aW9uKGUpe3ZhciB0PWUuZXhwb3J0cz17fTt2YXIgcjt2YXIgbjtmdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfShmdW5jdGlvbigpe3RyeXtpZih0eXBlb2Ygc2V0VGltZW91dD09PVwiZnVuY3Rpb25cIil7cj1zZXRUaW1lb3V0fWVsc2V7cj1kZWZhdWx0U2V0VGltb3V0fX1jYXRjaChlKXtyPWRlZmF1bHRTZXRUaW1vdXR9dHJ5e2lmKHR5cGVvZiBjbGVhclRpbWVvdXQ9PT1cImZ1bmN0aW9uXCIpe249Y2xlYXJUaW1lb3V0fWVsc2V7bj1kZWZhdWx0Q2xlYXJUaW1lb3V0fX1jYXRjaChlKXtuPWRlZmF1bHRDbGVhclRpbWVvdXR9fSkoKTtmdW5jdGlvbiBydW5UaW1lb3V0KGUpe2lmKHI9PT1zZXRUaW1lb3V0KXtyZXR1cm4gc2V0VGltZW91dChlLDApfWlmKChyPT09ZGVmYXVsdFNldFRpbW91dHx8IXIpJiZzZXRUaW1lb3V0KXtyPXNldFRpbWVvdXQ7cmV0dXJuIHNldFRpbWVvdXQoZSwwKX10cnl7cmV0dXJuIHIoZSwwKX1jYXRjaCh0KXt0cnl7cmV0dXJuIHIuY2FsbChudWxsLGUsMCl9Y2F0Y2godCl7cmV0dXJuIHIuY2FsbCh0aGlzLGUsMCl9fX1mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQoZSl7aWYobj09PWNsZWFyVGltZW91dCl7cmV0dXJuIGNsZWFyVGltZW91dChlKX1pZigobj09PWRlZmF1bHRDbGVhclRpbWVvdXR8fCFuKSYmY2xlYXJUaW1lb3V0KXtuPWNsZWFyVGltZW91dDtyZXR1cm4gY2xlYXJUaW1lb3V0KGUpfXRyeXtyZXR1cm4gbihlKX1jYXRjaCh0KXt0cnl7cmV0dXJuIG4uY2FsbChudWxsLGUpfWNhdGNoKHQpe3JldHVybiBuLmNhbGwodGhpcyxlKX19fXZhciBpPVtdO3ZhciBvPWZhbHNlO3ZhciB1O3ZhciBhPS0xO2Z1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpe2lmKCFvfHwhdSl7cmV0dXJufW89ZmFsc2U7aWYodS5sZW5ndGgpe2k9dS5jb25jYXQoaSl9ZWxzZXthPS0xfWlmKGkubGVuZ3RoKXtkcmFpblF1ZXVlKCl9fWZ1bmN0aW9uIGRyYWluUXVldWUoKXtpZihvKXtyZXR1cm59dmFyIGU9cnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO289dHJ1ZTt2YXIgdD1pLmxlbmd0aDt3aGlsZSh0KXt1PWk7aT1bXTt3aGlsZSgrK2E8dCl7aWYodSl7dVthXS5ydW4oKX19YT0tMTt0PWkubGVuZ3RofXU9bnVsbDtvPWZhbHNlO3J1bkNsZWFyVGltZW91dChlKX10Lm5leHRUaWNrPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSl7Zm9yKHZhciByPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl7dFtyLTFdPWFyZ3VtZW50c1tyXX19aS5wdXNoKG5ldyBJdGVtKGUsdCkpO2lmKGkubGVuZ3RoPT09MSYmIW8pe3J1blRpbWVvdXQoZHJhaW5RdWV1ZSl9fTtmdW5jdGlvbiBJdGVtKGUsdCl7dGhpcy5mdW49ZTt0aGlzLmFycmF5PXR9SXRlbS5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7dGhpcy5mdW4uYXBwbHkobnVsbCx0aGlzLmFycmF5KX07dC50aXRsZT1cImJyb3dzZXJcIjt0LmJyb3dzZXI9dHJ1ZTt0LmVudj17fTt0LmFyZ3Y9W107dC52ZXJzaW9uPVwiXCI7dC52ZXJzaW9ucz17fTtmdW5jdGlvbiBub29wKCl7fXQub249bm9vcDt0LmFkZExpc3RlbmVyPW5vb3A7dC5vbmNlPW5vb3A7dC5vZmY9bm9vcDt0LnJlbW92ZUxpc3RlbmVyPW5vb3A7dC5yZW1vdmVBbGxMaXN0ZW5lcnM9bm9vcDt0LmVtaXQ9bm9vcDt0LnByZXBlbmRMaXN0ZW5lcj1ub29wO3QucHJlcGVuZE9uY2VMaXN0ZW5lcj1ub29wO3QubGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVybltdfTt0LmJpbmRpbmc9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWRcIil9O3QuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuXCIvXCJ9O3QuY2hkaXI9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkXCIpfTt0LnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9fX07dmFyIHQ9e307ZnVuY3Rpb24gX19uY2N3cGNrX3JlcXVpcmVfXyhyKXt2YXIgbj10W3JdO2lmKG4hPT11bmRlZmluZWQpe3JldHVybiBuLmV4cG9ydHN9dmFyIGk9dFtyXT17ZXhwb3J0czp7fX07dmFyIG89dHJ1ZTt0cnl7ZVtyXShpLGkuZXhwb3J0cyxfX25jY3dwY2tfcmVxdWlyZV9fKTtvPWZhbHNlfWZpbmFsbHl7aWYobylkZWxldGUgdFtyXX1yZXR1cm4gaS5leHBvcnRzfWlmKHR5cGVvZiBfX25jY3dwY2tfcmVxdWlyZV9fIT09XCJ1bmRlZmluZWRcIilfX25jY3dwY2tfcmVxdWlyZV9fLmFiPV9fZGlybmFtZStcIi9cIjt2YXIgcj1fX25jY3dwY2tfcmVxdWlyZV9fKDIyOSk7bW9kdWxlLmV4cG9ydHM9cn0pKCk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/process/browser.js\n"));

/***/ }),

/***/ "./node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/** @license React v16.13.1\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n// (unstable) APIs that have been removed. Can we remove the symbols?\n\nvar REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;\nvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\nvar REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;\nvar REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\nvar REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\nvar REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n}\n\nfunction typeOf(object) {\n  if (typeof object === 'object' && object !== null) {\n    var $$typeof = object.$$typeof;\n\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        var type = object.type;\n\n        switch (type) {\n          case REACT_ASYNC_MODE_TYPE:\n          case REACT_CONCURRENT_MODE_TYPE:\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n            return type;\n\n          default:\n            var $$typeofType = type && type.$$typeof;\n\n            switch ($$typeofType) {\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_LAZY_TYPE:\n              case REACT_MEMO_TYPE:\n              case REACT_PROVIDER_TYPE:\n                return $$typeofType;\n\n              default:\n                return $$typeof;\n            }\n\n        }\n\n      case REACT_PORTAL_TYPE:\n        return $$typeof;\n    }\n  }\n\n  return undefined;\n} // AsyncMode is deprecated along with isAsyncMode\n\nvar AsyncMode = REACT_ASYNC_MODE_TYPE;\nvar ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\nvar ContextConsumer = REACT_CONTEXT_TYPE;\nvar ContextProvider = REACT_PROVIDER_TYPE;\nvar Element = REACT_ELEMENT_TYPE;\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\nvar Fragment = REACT_FRAGMENT_TYPE;\nvar Lazy = REACT_LAZY_TYPE;\nvar Memo = REACT_MEMO_TYPE;\nvar Portal = REACT_PORTAL_TYPE;\nvar Profiler = REACT_PROFILER_TYPE;\nvar StrictMode = REACT_STRICT_MODE_TYPE;\nvar Suspense = REACT_SUSPENSE_TYPE;\nvar hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated\n\nfunction isAsyncMode(object) {\n  {\n    if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n\n      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');\n    }\n  }\n\n  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n}\nfunction isConcurrentMode(object) {\n  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n}\nfunction isContextConsumer(object) {\n  return typeOf(object) === REACT_CONTEXT_TYPE;\n}\nfunction isContextProvider(object) {\n  return typeOf(object) === REACT_PROVIDER_TYPE;\n}\nfunction isElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction isForwardRef(object) {\n  return typeOf(object) === REACT_FORWARD_REF_TYPE;\n}\nfunction isFragment(object) {\n  return typeOf(object) === REACT_FRAGMENT_TYPE;\n}\nfunction isLazy(object) {\n  return typeOf(object) === REACT_LAZY_TYPE;\n}\nfunction isMemo(object) {\n  return typeOf(object) === REACT_MEMO_TYPE;\n}\nfunction isPortal(object) {\n  return typeOf(object) === REACT_PORTAL_TYPE;\n}\nfunction isProfiler(object) {\n  return typeOf(object) === REACT_PROFILER_TYPE;\n}\nfunction isStrictMode(object) {\n  return typeOf(object) === REACT_STRICT_MODE_TYPE;\n}\nfunction isSuspense(object) {\n  return typeOf(object) === REACT_SUSPENSE_TYPE;\n}\n\nexports.AsyncMode = AsyncMode;\nexports.ConcurrentMode = ConcurrentMode;\nexports.ContextConsumer = ContextConsumer;\nexports.ContextProvider = ContextProvider;\nexports.Element = Element;\nexports.ForwardRef = ForwardRef;\nexports.Fragment = Fragment;\nexports.Lazy = Lazy;\nexports.Memo = Memo;\nexports.Portal = Portal;\nexports.Profiler = Profiler;\nexports.StrictMode = StrictMode;\nexports.Suspense = Suspense;\nexports.isAsyncMode = isAsyncMode;\nexports.isConcurrentMode = isConcurrentMode;\nexports.isContextConsumer = isContextConsumer;\nexports.isContextProvider = isContextProvider;\nexports.isElement = isElement;\nexports.isForwardRef = isForwardRef;\nexports.isFragment = isFragment;\nexports.isLazy = isLazy;\nexports.isMemo = isMemo;\nexports.isPortal = isPortal;\nexports.isProfiler = isProfiler;\nexports.isStrictMode = isStrictMode;\nexports.isSuspense = isSuspense;\nexports.isValidElementType = isValidElementType;\nexports.typeOf = typeOf;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-is/cjs/react-is.development.js\n"));

/***/ }),

/***/ "./node_modules/react-is/index.js":
/*!****************************************!*\
  !*** ./node_modules/react-is/index.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ \"./node_modules/react-is/cjs/react-is.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLGdJQUF5RDtBQUMzRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanM/YjMxMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-is/index.js\n"));

/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_MODULE_REFERENCE;\n\n{\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n}\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner$1.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object') {\n      return;\n    }\n\n    if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else if (node) {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\n\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV$1 =  jsxWithValidation ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV$1;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "./node_modules/react/jsx-dev-runtime.js":
/*!***********************************************!*\
  !*** ./node_modules/react/jsx-dev-runtime.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"./node_modules/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSx1SkFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz81Nzc3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "./node_modules/shallowequal/index.js":
/*!********************************************!*\
  !*** ./node_modules/shallowequal/index.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("//\n\nmodule.exports = function shallowEqual(objA, objB, compare, compareContext) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== \"object\" || !objA || typeof objB !== \"object\" || !objB) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n\n  // Test for A's keys different from B.\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n\n    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (ret === false || (ret === void 0 && valueA !== valueB)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2hhbGxvd2VxdWFsL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxvQkFBb0Isb0JBQW9CO0FBQ3hDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3NoYWxsb3dlcXVhbC9pbmRleC5qcz83MTgxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIsIGNvbXBhcmUsIGNvbXBhcmVDb250ZXh0KSB7XG4gIHZhciByZXQgPSBjb21wYXJlID8gY29tcGFyZS5jYWxsKGNvbXBhcmVDb250ZXh0LCBvYmpBLCBvYmpCKSA6IHZvaWQgMDtcblxuICBpZiAocmV0ICE9PSB2b2lkIDApIHtcbiAgICByZXR1cm4gISFyZXQ7XG4gIH1cblxuICBpZiAob2JqQSA9PT0gb2JqQikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSBcIm9iamVjdFwiIHx8ICFvYmpBIHx8IHR5cGVvZiBvYmpCICE9PSBcIm9iamVjdFwiIHx8ICFvYmpCKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBiSGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmJpbmQob2JqQik7XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwga2V5c0EubGVuZ3RoOyBpZHgrKykge1xuICAgIHZhciBrZXkgPSBrZXlzQVtpZHhdO1xuXG4gICAgaWYgKCFiSGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZUEgPSBvYmpBW2tleV07XG4gICAgdmFyIHZhbHVlQiA9IG9iakJba2V5XTtcblxuICAgIHJldCA9IGNvbXBhcmUgPyBjb21wYXJlLmNhbGwoY29tcGFyZUNvbnRleHQsIHZhbHVlQSwgdmFsdWVCLCBrZXkpIDogdm9pZCAwO1xuXG4gICAgaWYgKHJldCA9PT0gZmFsc2UgfHwgKHJldCA9PT0gdm9pZCAwICYmIHZhbHVlQSAhPT0gdmFsdWVCKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/shallowequal/index.js\n"));

/***/ }),

/***/ "./node_modules/styled-components/dist/styled-components.browser.esm.js":
/*!******************************************************************************!*\
  !*** ./node_modules/styled-components/dist/styled-components.browser.esm.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServerStyleSheet: function() { return /* binding */ Ue; },\n/* harmony export */   StyleSheetConsumer: function() { return /* binding */ ue; },\n/* harmony export */   StyleSheetContext: function() { return /* binding */ ce; },\n/* harmony export */   StyleSheetManager: function() { return /* binding */ me; },\n/* harmony export */   ThemeConsumer: function() { return /* binding */ Ge; },\n/* harmony export */   ThemeContext: function() { return /* binding */ Me; },\n/* harmony export */   ThemeProvider: function() { return /* binding */ Le; },\n/* harmony export */   __PRIVATE__: function() { return /* binding */ Ze; },\n/* harmony export */   createGlobalStyle: function() { return /* binding */ $e; },\n/* harmony export */   css: function() { return /* binding */ Ae; },\n/* harmony export */   isStyledComponent: function() { return /* binding */ _; },\n/* harmony export */   keyframes: function() { return /* binding */ We; },\n/* harmony export */   useTheme: function() { return /* binding */ Xe; },\n/* harmony export */   version: function() { return /* binding */ A; },\n/* harmony export */   withTheme: function() { return /* binding */ Je; }\n/* harmony export */ });\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-is */ \"./node_modules/react-is/index.js\");\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_is__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shallowequal */ \"./node_modules/shallowequal/index.js\");\n/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(shallowequal__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_stylis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/stylis */ \"./node_modules/@emotion/stylis/dist/stylis.browser.esm.js\");\n/* harmony import */ var _emotion_unitless__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/unitless */ \"./node_modules/@emotion/unitless/dist/unitless.browser.esm.js\");\n/* harmony import */ var _emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/is-prop-valid */ \"./node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js\");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! hoist-non-react-statics */ \"./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6__);\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\nfunction y(){return(y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var v=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},g=function(t){return null!==t&&\"object\"==typeof t&&\"[object Object]\"===(t.toString?t.toString():Object.prototype.toString.call(t))&&!(0,react_is__WEBPACK_IMPORTED_MODULE_0__.typeOf)(t)},S=Object.freeze([]),w=Object.freeze({});function E(e){return\"function\"==typeof e}function b(e){return true&&\"string\"==typeof e&&e||e.displayName||e.name||\"Component\"}function _(e){return e&&\"string\"==typeof e.styledComponentId}var N=\"undefined\"!=typeof process&&void 0!==process.env&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||\"data-styled\",A=\"5.3.11\",C=\"undefined\"!=typeof window&&\"HTMLElement\"in window,I=Boolean(\"boolean\"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:\"undefined\"!=typeof process&&void 0!==process.env&&(void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&\"\"!==process.env.REACT_APP_SC_DISABLE_SPEEDY?\"false\"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:void 0!==process.env.SC_DISABLE_SPEEDY&&\"\"!==process.env.SC_DISABLE_SPEEDY?\"false\"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY:\"production\"!==\"development\")),P={},O= true?{1:\"Cannot create styled-component for component: %s.\\n\\n\",2:\"Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\\n\\n- Are you trying to reuse it across renders?\\n- Are you accidentally calling collectStyles twice?\\n\\n\",3:\"Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\\n\\n\",4:\"The `StyleSheetManager` expects a valid target or sheet prop!\\n\\n- Does this error occur on the client and is your target falsy?\\n- Does this error occur on the server and is the sheet falsy?\\n\\n\",5:\"The clone method cannot be used on the client!\\n\\n- Are you running in a client-like environment on the server?\\n- Are you trying to run SSR on the client?\\n\\n\",6:\"Trying to insert a new style tag, but the given Node is unmounted!\\n\\n- Are you using a custom target that isn't mounted?\\n- Does your document not have a valid head element?\\n- Have you accidentally removed a style tag manually?\\n\\n\",7:'ThemeProvider: Please return an object from your \"theme\" prop function, e.g.\\n\\n```js\\ntheme={() => ({})}\\n```\\n\\n',8:'ThemeProvider: Please make your \"theme\" prop an object.\\n\\n',9:\"Missing document `<head>`\\n\\n\",10:\"Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\\n\\n\",11:\"_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\\n\\n\",12:\"It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\\\`\\\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\\n\\n\",13:\"%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\\n\\n\",14:'ThemeProvider: \"theme\" prop is required.\\n\\n',15:\"A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\\n\\n```js\\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\\n```\\n\\n\",16:\"Reached the limit of how many styled components may be created at group %s.\\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\\nas for instance in your render method then you may be running into this limitation.\\n\\n\",17:\"CSSStyleSheet could not be found on HTMLStyleElement.\\nHas styled-components' style tag been unmounted or altered by another script?\\n\"}:0;function R(){for(var e=arguments.length<=0?void 0:arguments[0],t=[],n=1,r=arguments.length;n<r;n+=1)t.push(n<0||arguments.length<=n?void 0:arguments[n]);return t.forEach((function(t){e=e.replace(/%[a-z]/,t)})),e}function D(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw false?0:new Error(R.apply(void 0,[O[e]].concat(n)).trim())}var j=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&D(16,\"\"+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var s=r;s<o;s++)this.groupSizes[s]=0}for(var i=this.indexOfGroup(e+1),a=0,c=t.length;a<c;a++)this.tag.insertRule(i,t[a])&&(this.groupSizes[e]++,i++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t=\"\";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,s=r;s<o;s++)t+=this.tag.getRule(s)+\"/*!sc*/\\n\";return t},e}(),T=new Map,x=new Map,k=1,V=function(e){if(T.has(e))return T.get(e);for(;x.has(k);)k++;var t=k++;return true&&((0|t)<0||t>1<<30)&&D(16,\"\"+t),T.set(e,t),x.set(t,e),t},B=function(e){return x.get(e)},z=function(e,t){t>=k&&(k=t+1),T.set(e,t),x.set(t,e)},M=\"style[\"+N+'][data-styled-version=\"5.3.11\"]',G=new RegExp(\"^\"+N+'\\\\.g(\\\\d+)\\\\[id=\"([\\\\w\\\\d-]+)\"\\\\].*?\"([^\"]*)'),L=function(e,t,n){for(var r,o=n.split(\",\"),s=0,i=o.length;s<i;s++)(r=o[s])&&e.registerName(t,r)},F=function(e,t){for(var n=(t.textContent||\"\").split(\"/*!sc*/\\n\"),r=[],o=0,s=n.length;o<s;o++){var i=n[o].trim();if(i){var a=i.match(G);if(a){var c=0|parseInt(a[1],10),u=a[2];0!==c&&(z(u,c),L(e,u,a[3]),e.getTag().insertRules(c,r)),r.length=0}else r.push(i)}}},Y=function(){return true?__webpack_require__.nc:0},q=function(e){var t=document.head,n=e||t,r=document.createElement(\"style\"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(N))return r}}(n),s=void 0!==o?o.nextSibling:null;r.setAttribute(N,\"active\"),r.setAttribute(\"data-styled-version\",\"5.3.11\");var i=Y();return i&&r.setAttribute(\"nonce\",i),n.insertBefore(r,s),r},H=function(){function e(e){var t=this.element=q(e);t.appendChild(document.createTextNode(\"\")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}D(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&\"string\"==typeof t.cssText?t.cssText:\"\"},e}(),$=function(){function e(e){var t=this.element=q(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:\"\"},e}(),W=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:\"\"},e}(),U=C,J={isServer:!C,useCSSOMInjection:!I},X=function(){function e(e,t,n){void 0===e&&(e=w),void 0===t&&(t={}),this.options=y({},J,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&C&&U&&(U=!1,function(e){for(var t=document.querySelectorAll(M),n=0,r=t.length;n<r;n++){var o=t[n];o&&\"active\"!==o.getAttribute(N)&&(F(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return V(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(y({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new W(o):r?new H(o):new $(o),new j(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(V(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(V(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(V(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r=\"\",o=0;o<n;o++){var s=B(o);if(void 0!==s){var i=e.names.get(s),a=t.getGroup(o);if(i&&a&&i.size){var c=N+\".g\"+o+'[id=\"'+s+'\"]',u=\"\";void 0!==i&&i.forEach((function(e){e.length>0&&(u+=e+\",\")})),r+=\"\"+a+c+'{content:\"'+u+'\"}/*!sc*/\\n'}}}return r}(this)},e}(),Z=/(a)(d)/gi,K=function(e){return String.fromCharCode(e+(e>25?39:97))};function Q(e){var t,n=\"\";for(t=Math.abs(e);t>52;t=t/52|0)n=K(t%52)+n;return(K(t%52)+n).replace(Z,\"$1-$2\")}var ee=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},te=function(e){return ee(5381,e)};function ne(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(E(n)&&!_(n))return!1}return!0}var re=te(\"5.3.11\"),oe=function(){function e(e,t,n){this.rules=e,this.staticRulesId=\"\",this.isStatic= false&&0,this.componentId=t,this.baseHash=ee(re,t),this.baseStyle=n,X.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var s=_e(this.rules,e,t,n).join(\"\"),i=Q(ee(this.baseHash,s)>>>0);if(!t.hasNameForId(r,i)){var a=n(s,\".\"+i,void 0,r);t.insertRules(r,i,a)}o.push(i),this.staticRulesId=i}else{for(var c=this.rules.length,u=ee(this.baseHash,n.hash),l=\"\",d=0;d<c;d++){var h=this.rules[d];if(\"string\"==typeof h)l+=h, true&&(u=ee(u,h+d));else if(h){var p=_e(h,e,t,n),f=Array.isArray(p)?p.join(\"\"):p;u=ee(u,f+d),l+=f}}if(l){var m=Q(u>>>0);if(!t.hasNameForId(r,m)){var y=n(l,\".\"+m,void 0,r);t.insertRules(r,m,y)}o.push(m)}}return o.join(\" \")},e}(),se=/^\\s*\\/\\/.*$/gm,ie=[\":\",\"[\",\".\",\"#\"];function ae(e){var t,n,r,o,s=void 0===e?w:e,i=s.options,a=void 0===i?w:i,c=s.plugins,u=void 0===c?S:c,l=new _emotion_stylis__WEBPACK_IMPORTED_MODULE_3__[\"default\"](a),d=[],p=function(e){function t(t){if(t)try{e(t+\"}\")}catch(e){}}return function(n,r,o,s,i,a,c,u,l,d){switch(n){case 1:if(0===l&&64===r.charCodeAt(0))return e(r+\";\"),\"\";break;case 2:if(0===u)return r+\"/*|*/\";break;case 3:switch(u){case 102:case 112:return e(o[0]+r),\"\";default:return r+(0===d?\"/*|*/\":\"\")}case-2:r.split(\"/*|*/}\").forEach(t)}}}((function(e){d.push(e)})),f=function(e,r,s){return 0===r&&-1!==ie.indexOf(s[n.length])||s.match(o)?e:\".\"+t};function m(e,s,i,a){void 0===a&&(a=\"&\");var c=e.replace(se,\"\"),u=s&&i?i+\" \"+s+\" { \"+c+\" }\":c;return t=a,n=s,r=new RegExp(\"\\\\\"+n+\"\\\\b\",\"g\"),o=new RegExp(\"(\\\\\"+n+\"\\\\b){2,}\"),l(i||!s?\"\":s,u)}return l.use([].concat(u,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,f))},p,function(e){if(-2===e){var t=d;return d=[],t}}])),m.hash=u.length?u.reduce((function(e,t){return t.name||D(15),ee(e,t.name)}),5381).toString():\"\",m}var ce=react__WEBPACK_IMPORTED_MODULE_1___default().createContext(),ue=ce.Consumer,le=react__WEBPACK_IMPORTED_MODULE_1___default().createContext(),de=(le.Consumer,new X),he=ae();function pe(){return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ce)||de}function fe(){return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(le)||he}function me(e){var t=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(e.stylisPlugins),n=t[0],s=t[1],c=pe(),u=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((function(){var t=c;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),l=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((function(){return ae({options:{prefix:!e.disableVendorPrefixes},plugins:n})}),[e.disableVendorPrefixes,n]);return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)((function(){shallowequal__WEBPACK_IMPORTED_MODULE_2___default()(n,e.stylisPlugins)||s(e.stylisPlugins)}),[e.stylisPlugins]),react__WEBPACK_IMPORTED_MODULE_1___default().createElement(ce.Provider,{value:u},react__WEBPACK_IMPORTED_MODULE_1___default().createElement(le.Provider,{value:l}, true?react__WEBPACK_IMPORTED_MODULE_1___default().Children.only(e.children):0))}var ye=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=he);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,\"@keyframes\"))},this.toString=function(){return D(12,String(n.name))},this.name=e,this.id=\"sc-keyframes-\"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=he),this.name+e.hash},e}(),ve=/([A-Z])/,ge=/([A-Z])/g,Se=/^ms-/,we=function(e){return\"-\"+e.toLowerCase()};function Ee(e){return ve.test(e)?e.replace(ge,we).replace(Se,\"-ms-\"):e}var be=function(e){return null==e||!1===e||\"\"===e};function _e(e,n,r,o){if(Array.isArray(e)){for(var s,i=[],a=0,c=e.length;a<c;a+=1)\"\"!==(s=_e(e[a],n,r,o))&&(Array.isArray(s)?i.push.apply(i,s):i.push(s));return i}if(be(e))return\"\";if(_(e))return\".\"+e.styledComponentId;if(E(e)){if(\"function\"!=typeof(l=e)||l.prototype&&l.prototype.isReactComponent||!n)return e;var u=e(n);return true&&(0,react_is__WEBPACK_IMPORTED_MODULE_0__.isElement)(u)&&console.warn(b(e)+\" is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\"),_e(u,n,r,o)}var l;return e instanceof ye?r?(e.inject(r,o),e.getName(o)):e:g(e)?function e(t,n){var r,o,s=[];for(var i in t)t.hasOwnProperty(i)&&!be(t[i])&&(Array.isArray(t[i])&&t[i].isCss||E(t[i])?s.push(Ee(i)+\":\",t[i],\";\"):g(t[i])?s.push.apply(s,e(t[i],i)):s.push(Ee(i)+\": \"+(r=i,null==(o=t[i])||\"boolean\"==typeof o||\"\"===o?\"\":\"number\"!=typeof o||0===o||r in _emotion_unitless__WEBPACK_IMPORTED_MODULE_4__[\"default\"]||r.startsWith(\"--\")?String(o).trim():o+\"px\")+\";\"));return n?[n+\" {\"].concat(s,[\"}\"]):s}(e):e.toString()}var Ne=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function Ae(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return E(e)||g(e)?Ne(_e(v(S,[e].concat(n)))):0===n.length&&1===e.length&&\"string\"==typeof e[0]?e:Ne(_e(v(e,n)))}var Ce=/invalid hook call/i,Ie=new Set,Pe=function(e,t){if(true){var n=\"The component \"+e+(t?' with the id of \"'+t+'\"':\"\")+\" has been created dynamically.\\nYou may see this warning because you've called styled inside another component.\\nTo resolve this only create new StyledComponents outside of any render method and function component.\",r=console.error;try{var o=!0;console.error=function(e){if(Ce.test(e))o=!1,Ie.delete(n);else{for(var t=arguments.length,s=new Array(t>1?t-1:0),i=1;i<t;i++)s[i-1]=arguments[i];r.apply(void 0,[e].concat(s))}},(0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(),o&&!Ie.has(n)&&(console.warn(n),Ie.add(n))}catch(e){Ce.test(e.message)&&Ie.delete(n)}finally{console.error=r}}},Oe=function(e,t,n){return void 0===n&&(n=w),e.theme!==n.theme&&e.theme||t||n.theme},Re=/[!\"#$%&'()*+,./:;<=>?@[\\\\\\]^`{|}~-]+/g,De=/(^-|-$)/g;function je(e){return e.replace(Re,\"-\").replace(De,\"\")}var Te=function(e){return Q(te(e)>>>0)};function xe(e){return\"string\"==typeof e&&( false||e.charAt(0)===e.charAt(0).toLowerCase())}var ke=function(e){return\"function\"==typeof e||\"object\"==typeof e&&null!==e&&!Array.isArray(e)},Ve=function(e){return\"__proto__\"!==e&&\"constructor\"!==e&&\"prototype\"!==e};function Be(e,t,n){var r=e[n];ke(t)&&ke(r)?ze(r,t):e[n]=t}function ze(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,s=n;o<s.length;o++){var i=s[o];if(ke(i))for(var a in i)Ve(a)&&Be(e,i[a],a)}return e}var Me=react__WEBPACK_IMPORTED_MODULE_1___default().createContext(),Ge=Me.Consumer;function Le(e){var t=(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Me),n=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((function(){return function(e,t){if(!e)return D(14);if(E(e)){var n=e(t);return false||null!==n&&!Array.isArray(n)&&\"object\"==typeof n?n:D(7)}return Array.isArray(e)||\"object\"!=typeof e?D(8):t?y({},t,{},e):e}(e.theme,t)}),[e.theme,t]);return e.children?react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Me.Provider,{value:n},e.children):null}var Fe={};function Ye(e,t,n){var o=_(e),i=!xe(e),a=t.attrs,c=void 0===a?S:a,l=t.componentId,d=void 0===l?function(e,t){var n=\"string\"!=typeof e?\"sc\":je(e);Fe[n]=(Fe[n]||0)+1;var r=n+\"-\"+Te(\"5.3.11\"+n+Fe[n]);return t?t+\"-\"+r:r}(t.displayName,t.parentComponentId):l,h=t.displayName,p=void 0===h?function(e){return xe(e)?\"styled.\"+e:\"Styled(\"+b(e)+\")\"}(e):h,v=t.displayName&&t.componentId?je(t.displayName)+\"-\"+t.componentId:t.componentId||d,g=o&&e.attrs?Array.prototype.concat(e.attrs,c).filter(Boolean):c,N=t.shouldForwardProp;o&&e.shouldForwardProp&&(N=t.shouldForwardProp?function(n,r,o){return e.shouldForwardProp(n,r,o)&&t.shouldForwardProp(n,r,o)}:e.shouldForwardProp);var A,C=new oe(n,v,o?e.componentStyle:void 0),I=C.isStatic&&0===c.length,P=function(e,t){return function(e,t,n,r){var o=e.attrs,i=e.componentStyle,a=e.defaultProps,c=e.foldedComponentIds,l=e.shouldForwardProp,d=e.styledComponentId,h=e.target,p=function(e,t,n){void 0===e&&(e=w);var r=y({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,s,i=e;for(t in E(i)&&(i=i(r)),i)r[t]=o[t]=\"className\"===t?(n=o[t],s=i[t],n&&s?n+\" \"+s:n||s):i[t]})),[r,o]}(Oe(t,(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Me),a)||w,t,o),m=p[0],v=p[1],g=function(e,t,n,r){var o=pe(),s=fe(),i=t?e.generateAndInjectStyles(w,o,s):e.generateAndInjectStyles(n,o,s);return true&&!t&&r&&r(i),i}(i,r,m, true?e.warnTooManyClasses:0),S=n,b=v.$as||t.$as||v.as||t.as||h,_=xe(b),N=v!==t?y({},t,{},v):t,A={};for(var C in N)\"$\"!==C[0]&&\"as\"!==C&&(\"forwardedAs\"===C?A.as=N[C]:(l?l(C,_emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__[\"default\"],b):!_||(0,_emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(C))&&(A[C]=N[C]));return t.style&&v.style!==t.style&&(A.style=y({},t.style,{},v.style)),A.className=Array.prototype.concat(c,d,g!==d?g:null,t.className,v.className).filter(Boolean).join(\" \"),A.ref=S,(0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(b,A)}(A,e,t,I)};return P.displayName=p,(A=react__WEBPACK_IMPORTED_MODULE_1___default().forwardRef(P)).attrs=g,A.componentStyle=C,A.displayName=p,A.shouldForwardProp=N,A.foldedComponentIds=o?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):S,A.styledComponentId=v,A.target=o?e.target:e,A.withComponent=function(e){var r=t.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,[\"componentId\"]),s=r&&r+\"-\"+(xe(e)?e:je(b(e)));return Ye(e,y({},o,{attrs:g,componentId:s}),n)},Object.defineProperty(A,\"defaultProps\",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=o?ze({},e.defaultProps,t):t}}), true&&(Pe(p,v),A.warnTooManyClasses=function(e,t){var n={},r=!1;return function(o){if(!r&&(n[o]=!0,Object.keys(n).length>=200)){var s=t?' with the id of \"'+t+'\"':\"\";console.warn(\"Over 200 classes were generated for component \"+e+s+\".\\nConsider using the attrs method, together with a style object for frequently changed styles.\\nExample:\\n  const Component = styled.div.attrs(props => ({\\n    style: {\\n      background: props.background,\\n    },\\n  }))`width: 100%;`\\n\\n  <Component />\"),r=!0,n={}}}}(p,v)),Object.defineProperty(A,\"toString\",{value:function(){return\".\"+A.styledComponentId}}),i&&hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default()(A,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),A}var qe=function(e){return function e(t,r,o){if(void 0===o&&(o=w),!(0,react_is__WEBPACK_IMPORTED_MODULE_0__.isValidElementType)(r))return D(1,String(r));var s=function(){return t(r,o,Ae.apply(void 0,arguments))};return s.withConfig=function(n){return e(t,r,y({},o,{},n))},s.attrs=function(n){return e(t,r,y({},o,{attrs:Array.prototype.concat(o.attrs,n).filter(Boolean)}))},s}(Ye,e)};[\"a\",\"abbr\",\"address\",\"area\",\"article\",\"aside\",\"audio\",\"b\",\"base\",\"bdi\",\"bdo\",\"big\",\"blockquote\",\"body\",\"br\",\"button\",\"canvas\",\"caption\",\"cite\",\"code\",\"col\",\"colgroup\",\"data\",\"datalist\",\"dd\",\"del\",\"details\",\"dfn\",\"dialog\",\"div\",\"dl\",\"dt\",\"em\",\"embed\",\"fieldset\",\"figcaption\",\"figure\",\"footer\",\"form\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"head\",\"header\",\"hgroup\",\"hr\",\"html\",\"i\",\"iframe\",\"img\",\"input\",\"ins\",\"kbd\",\"keygen\",\"label\",\"legend\",\"li\",\"link\",\"main\",\"map\",\"mark\",\"marquee\",\"menu\",\"menuitem\",\"meta\",\"meter\",\"nav\",\"noscript\",\"object\",\"ol\",\"optgroup\",\"option\",\"output\",\"p\",\"param\",\"picture\",\"pre\",\"progress\",\"q\",\"rp\",\"rt\",\"ruby\",\"s\",\"samp\",\"script\",\"section\",\"select\",\"small\",\"source\",\"span\",\"strong\",\"style\",\"sub\",\"summary\",\"sup\",\"table\",\"tbody\",\"td\",\"textarea\",\"tfoot\",\"th\",\"thead\",\"time\",\"title\",\"tr\",\"track\",\"u\",\"ul\",\"var\",\"video\",\"wbr\",\"circle\",\"clipPath\",\"defs\",\"ellipse\",\"foreignObject\",\"g\",\"image\",\"line\",\"linearGradient\",\"marker\",\"mask\",\"path\",\"pattern\",\"polygon\",\"polyline\",\"radialGradient\",\"rect\",\"stop\",\"svg\",\"text\",\"textPath\",\"tspan\"].forEach((function(e){qe[e]=qe(e)}));var He=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=ne(e),X.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(_e(this.rules,t,n,r).join(\"\"),\"\"),s=this.componentId+e;n.insertRules(s,s,o)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&X.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();function $e(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];var i=Ae.apply(void 0,[e].concat(n)),a=\"sc-global-\"+Te(JSON.stringify(i)),u=new He(i,a);function d(e){var t=pe(),n=fe(),o=(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Me),d=(0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(t.allocateGSInstance(a)).current;return true&&react__WEBPACK_IMPORTED_MODULE_1___default().Children.count(e.children)&&console.warn(\"The global style component \"+a+\" was given child JSX. createGlobalStyle does not render children.\"), true&&i.some((function(e){return\"string\"==typeof e&&-1!==e.indexOf(\"@import\")}))&&console.warn(\"Please do not use @import CSS syntax in createGlobalStyle at this time, as the CSSOM APIs we use in production do not handle it well. Instead, we recommend using a library such as react-helmet to inject a typical <link> meta tag to the stylesheet, or simply embedding it manually in your index.html <head> section for a simpler app.\"),t.server&&h(d,e,t,o,n),(0,react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect)((function(){if(!t.server)return h(d,e,t,o,n),function(){return u.removeStyles(d,t)}}),[d,e,t,o,n]),null}function h(e,t,n,r,o){if(u.isStatic)u.renderStyles(e,P,n,o);else{var s=y({},t,{theme:Oe(t,r,d.defaultProps)});u.renderStyles(e,s,n,o)}}return true&&Pe(a),react__WEBPACK_IMPORTED_MODULE_1___default().memo(d)}function We(e){ true&&\"undefined\"!=typeof navigator&&\"ReactNative\"===navigator.product&&console.warn(\"`keyframes` cannot be used on ReactNative, only on the web. To do animation in ReactNative please use Animated.\");for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=Ae.apply(void 0,[e].concat(n)).join(\"\"),s=Te(o);return new ye(s,o)}var Ue=function(){function e(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return\"\";var n=Y();return\"<style \"+[n&&'nonce=\"'+n+'\"',N+'=\"true\"','data-styled-version=\"5.3.11\"'].filter(Boolean).join(\" \")+\">\"+t+\"</style>\"},this.getStyleTags=function(){return e.sealed?D(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return D(2);var n=((t={})[N]=\"\",t[\"data-styled-version\"]=\"5.3.11\",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),o=Y();return o&&(n.nonce=o),[react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"style\",y({},n,{key:\"sc-0-0\"}))]},this.seal=function(){e.sealed=!0},this.instance=new X({isServer:!0}),this.sealed=!1}var t=e.prototype;return t.collectStyles=function(e){return this.sealed?D(2):react__WEBPACK_IMPORTED_MODULE_1___default().createElement(me,{sheet:this.instance},e)},t.interleaveWithNodeStream=function(e){return D(3)},e}(),Je=function(e){var t=react__WEBPACK_IMPORTED_MODULE_1___default().forwardRef((function(t,n){var o=(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Me),i=e.defaultProps,a=Oe(t,o,i);return true&&void 0===a&&console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps in component class \"'+b(e)+'\"'),react__WEBPACK_IMPORTED_MODULE_1___default().createElement(e,y({},t,{theme:a,ref:n}))}));return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default()(t,e),t.displayName=\"WithTheme(\"+b(e)+\")\",t},Xe=function(){return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Me)},Ze={StyleSheet:X,masterSheet:de}; true&&\"undefined\"!=typeof navigator&&\"ReactNative\"===navigator.product&&console.warn(\"It looks like you've imported 'styled-components' on React Native.\\nPerhaps you're looking to import 'styled-components/native'?\\nRead more about this at https://www.styled-components.com/docs/basics#react-native\"), true&&\"undefined\"!=typeof window&&(window[\"__styled-components-init__\"]=window[\"__styled-components-init__\"]||0,1===window[\"__styled-components-init__\"]&&console.warn(\"It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\\n\\nSee https://s-c.sh/2BAXzed for more info.\"),window[\"__styled-components-init__\"]+=1);/* harmony default export */ __webpack_exports__[\"default\"] = (qe);\n//# sourceMappingURL=styled-components.browser.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvZGlzdC9zdHlsZWQtY29tcG9uZW50cy5icm93c2VyLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc1gsYUFBYSxvQ0FBb0MsWUFBWSxtQkFBbUIsS0FBSyxtQkFBbUIsc0VBQXNFLFNBQVMsd0JBQXdCLG9CQUFvQixnQ0FBZ0MsSUFBSSx5QkFBeUIsU0FBUyxlQUFlLHVIQUF1SCxnREFBQyxJQUFJLHVDQUF1QyxFQUFFLGNBQWMsMkJBQTJCLGNBQWMsTUFBTSxLQUFtQyw0REFBNEQsY0FBYywrQ0FBK0MsMEJBQTBCLE9BQU8sV0FBVyxPQUFPLE9BQU8sT0FBTyx3QkFBd0IsT0FBTyxpTEFBaUwsT0FBTyxXQUFXLE9BQU8sZ0JBQWdCLE9BQU8sdUNBQXVDLE9BQU8sMkNBQTJDLE9BQU8sa0NBQWtDLE9BQU8sMENBQTBDLE9BQU8sNkJBQTZCLE9BQU8saUNBQWlDLE9BQU8sd0JBQXdCLE9BQU8sc0NBQXNDLGFBQW9CLE9BQU8sR0FBRyxLQUFtQyxFQUFFLHlYQUF5WCxzdkJBQXN2QixTQUFTLEVBQUUsaytDQUFrK0MsR0FBRyxtSEFBbUgsMkJBQTJCLEVBQUUsaWFBQWlhLENBQUMsQ0FBRSxDQUFDLGFBQWEsOEVBQThFLElBQUksMERBQTBELDhCQUE4Qix3QkFBd0IsS0FBSyxjQUFjLHNEQUFzRCxJQUFJLHdCQUF3QixLQUFLLE1BQW1DLENBQUMsQ0FBMkgsb0RBQW9ELGlCQUFpQixjQUFjLGdFQUFnRSxrQkFBa0Isa0NBQWtDLGdCQUFnQixJQUFJLDBCQUEwQixTQUFTLDZCQUE2Qiw4QkFBOEIseUNBQXlDLEtBQUssdUJBQXVCLHdFQUF3RSxZQUFZLElBQUkseUJBQXlCLGdEQUFnRCxJQUFJLDREQUE0RCwwQkFBMEIsa0JBQWtCLHNEQUFzRCxxQkFBcUIsWUFBWSxJQUFJLDRCQUE0Qix3QkFBd0IsU0FBUyxtREFBbUQsOERBQThELElBQUksdUNBQXVDLFNBQVMsR0FBRyx5Q0FBeUMsNEJBQTRCLEtBQUssU0FBUyxLQUFLLFVBQVUsTUFBTSxLQUFtQyx5REFBeUQsZUFBZSxnQkFBZ0IsaUJBQWlCLG9DQUFvQyxxSUFBcUksd0NBQXdDLElBQUksa0NBQWtDLGlCQUFpQixxRUFBcUUsSUFBSSxLQUFLLGtCQUFrQixNQUFNLGlCQUFpQixNQUFNLGlDQUFpQyxtRUFBbUUsaUJBQWlCLGNBQWMsTUFBTSxLQUFxQyxDQUFDLHNCQUFpQixDQUFDLENBQUksQ0FBQyxlQUFlLDJFQUEyRSxrQ0FBa0MsS0FBSyxLQUFLLFdBQVcsa0RBQWtELG9DQUFvQywwRUFBMEUsVUFBVSwwREFBMEQsY0FBYyxjQUFjLHdCQUF3QixrRUFBa0UsMEJBQTBCLDhDQUE4QyxJQUFJLEtBQUssV0FBVyw0QkFBNEIsTUFBTSxrQkFBa0Isa0JBQWtCLGtDQUFrQyxJQUFJLG1EQUFtRCxTQUFTLFVBQVUsMEJBQTBCLHVDQUF1Qyx1QkFBdUIsNkJBQTZCLDJEQUEyRCxHQUFHLGdCQUFnQixjQUFjLHdCQUF3QixzQ0FBc0Msa0JBQWtCLGtDQUFrQyx5QkFBeUIsaURBQWlELDZEQUE2RCxTQUFTLDBCQUEwQixzREFBc0QsdUJBQXVCLGtEQUFrRCxHQUFHLGdCQUFnQixjQUFjLDRCQUE0QixrQkFBa0Isa0NBQWtDLG1FQUFtRSwwQkFBMEIscUNBQXFDLHVCQUF1QixzQ0FBc0MsR0FBRyxVQUFVLGlDQUFpQyxjQUFjLGtCQUFrQixtQ0FBbUMsbUJBQW1CLEtBQUssbUdBQW1HLHNEQUFzRCxJQUFJLEtBQUssV0FBVyxxRkFBcUYsUUFBUSx5QkFBeUIsYUFBYSxrQkFBa0IsOENBQThDLG9DQUFvQyxnQkFBZ0IsbUNBQW1DLGtDQUFrQyxvQ0FBb0MscUJBQXFCLHFJQUFxSSxjQUFjLDhCQUE4QixtREFBbUQsOEJBQThCLG1EQUFtRCxLQUFLLGNBQWMsOEJBQThCLCtCQUErQix5REFBeUQsMEJBQTBCLDZDQUE2QywwQkFBMEIsa0RBQWtELHVCQUF1QixnQkFBZ0IsdUJBQXVCLG1CQUFtQix5Q0FBeUMsSUFBSSxLQUFLLFdBQVcsZUFBZSxxQ0FBcUMsaUJBQWlCLG1DQUFtQyxtQ0FBbUMsdUJBQXVCLGVBQWUsZ0JBQWdCLGFBQWEsU0FBUyxPQUFPLEdBQUcsOEJBQThCLDRDQUE0QyxjQUFjLFdBQVcsa0JBQWtCLEtBQUsscUJBQXFCLHFDQUFxQyxxQkFBcUIsbUJBQW1CLEVBQUUsMEJBQTBCLFNBQVMsZ0JBQWdCLG1CQUFtQixlQUFlLFlBQVksV0FBVyxNQUFNLFdBQVcsd0JBQXdCLFNBQVMsa0NBQWtDLGtCQUFrQixpREFBaUQsTUFBNkQsRUFBRSxDQUFLLDRFQUE0RSwyREFBMkQsNEJBQTRCLHVMQUF1TCxLQUFLLGlFQUFpRSx5QkFBeUIsMEJBQTBCLHFCQUFxQiwrQkFBK0IsS0FBSyxnRUFBZ0UsSUFBSSxLQUFLLG9CQUFvQiwyQkFBMkIsS0FBbUMsZ0JBQWdCLFdBQVcsa0RBQWtELGtCQUFrQixNQUFNLGVBQWUseUJBQXlCLDBCQUEwQixxQkFBcUIsV0FBVyxtQkFBbUIsR0FBRywyQ0FBMkMsZUFBZSw2RkFBNkYsdURBQUMsdUJBQXVCLGNBQWMsU0FBUyxNQUFNLEdBQUcsV0FBVyxxQ0FBcUMsVUFBVSxtREFBbUQsTUFBTSxNQUFNLGlDQUFpQyxNQUFNLGlCQUFpQixzQ0FBc0Msb0NBQW9DLHNCQUFzQixnQkFBZ0IsY0FBYyxVQUFVLHFCQUFxQixnRUFBZ0Usb0JBQW9CLG9CQUFvQiwwQ0FBMEMsT0FBTyxJQUFJLHlFQUF5RSxHQUFHLG1CQUFtQiwwQ0FBMEMsaUVBQWlFLGVBQWUsV0FBVyxRQUFRLGVBQWUsNENBQTRDLGtDQUFrQyx3QkFBd0IsT0FBTywwREFBZSxxQkFBcUIsMERBQWUsa0NBQWtDLGNBQWMsT0FBTyxpREFBQyxTQUFTLGNBQWMsT0FBTyxpREFBQyxTQUFTLGVBQWUsTUFBTSwrQ0FBQyx5Q0FBeUMsOENBQUMsYUFBYSxRQUFRLGdFQUFnRSxnQkFBZ0IsNERBQTRELHFCQUFxQixLQUFLLGdEQUFnRCw4Q0FBQyxhQUFhLFdBQVcsU0FBUyxnQ0FBZ0MsV0FBVyxFQUFFLCtCQUErQixPQUFPLGdEQUFDLGFBQWEsbURBQUMsd0NBQXdDLHFCQUFxQiwwREFBZSxjQUFjLFFBQVEsQ0FBQywwREFBZSxjQUFjLFFBQVEsQ0FBQyxLQUFtQyxDQUFDLHFEQUFVLGtCQUFrQixDQUFVLEdBQUcsa0JBQWtCLGdCQUFnQixXQUFXLDBCQUEwQixtQkFBbUIsb0JBQW9CLHdFQUF3RSwwQkFBMEIsNEJBQTRCLG9EQUFvRCx1Q0FBdUMsMkNBQTJDLEdBQUcsdURBQXVELDJCQUEyQixlQUFlLHdEQUF3RCxtQkFBbUIsZ0NBQWdDLHFCQUFxQixxQkFBcUIsOEJBQThCLElBQUksNkVBQTZFLFNBQVMsa0JBQWtCLHNDQUFzQyxTQUFTLG1GQUFtRixXQUFXLE1BQU0sS0FBbUMsRUFBRSxtREFBQyx1TkFBdU4sTUFBTSw2RUFBNkUsYUFBYSxpSEFBaUgsMklBQTJJLHlEQUFDLGdEQUFnRCxJQUFJLGVBQWUsZUFBZSxNQUFNLGlCQUFpQixtQkFBbUIseUNBQXlDLGVBQWUsc0RBQXNELElBQUksd0JBQXdCLGdIQUFnSCx3REFBd0QsR0FBRyxJQUFtQyxFQUFFLG1TQUFtUyxJQUFJLFNBQVMsMEJBQTBCLGdDQUFnQyxLQUFLLHNEQUFzRCxJQUFJLHdCQUF3QiwrQkFBK0IsQ0FBQyw2Q0FBQyw4Q0FBOEMsU0FBUyxpQ0FBaUMsUUFBUSxrQkFBa0Isb0JBQW9CLGdFQUFnRSxzQkFBc0IsYUFBYSxFQUFFLHFCQUFxQixlQUFlLHdDQUF3QyxtQkFBbUIscUJBQXFCLGVBQWUsMkJBQTJCLE1BQW1DLDJDQUEyQyxtQkFBbUIsNEVBQTRFLGdCQUFnQiwyREFBMkQsbUJBQW1CLFdBQVcsNEJBQTRCLGVBQWUsc0RBQXNELElBQUksd0JBQXdCLGdCQUFnQixXQUFXLEtBQUssV0FBVyw0Q0FBNEMsU0FBUyxPQUFPLDBEQUFlLGtCQUFrQixlQUFlLE1BQU0saURBQUMsT0FBTyw4Q0FBQyxhQUFhLHFCQUFxQixtQkFBbUIsU0FBUyxXQUFXLE1BQU0sTUFBbUMseURBQXlELHVEQUF1RCxLQUFLLE1BQU0sWUFBWSxlQUFlLGtCQUFrQiwwREFBZSxjQUFjLFFBQVEsa0JBQWtCLFVBQVUsbUJBQW1CLDBGQUEwRixvQ0FBb0MsbUJBQW1CLGlDQUFpQyxtQkFBbUIsK0VBQStFLDRDQUE0QyxpTEFBaUwsK0RBQStELDhEQUE4RCxzQkFBc0IseUZBQXlGLHlCQUF5QixrSkFBa0osa0JBQWtCLFVBQVUsSUFBSSxRQUFRLE9BQU8sOEJBQThCLGNBQWMsMkZBQTJGLFNBQVMsTUFBTSxpREFBQyxrREFBa0Qsd0ZBQXdGLE1BQU0sS0FBbUMsZ0JBQWdCLE9BQU8sS0FBbUMsc0JBQXNCLENBQU0sd0RBQXdELEtBQUssV0FBVyx5RUFBeUUsOERBQUMsUUFBUSxrRUFBQyxtQkFBbUIsZ0RBQWdELFdBQVcsMEhBQTBILG9EQUFDLE1BQU0sV0FBVywwQkFBMEIsdURBQVksd09BQXdPLG9DQUFvQyxvQkFBb0IsWUFBWSxrQkFBa0IsUUFBUSxXQUFXLHdDQUF3QyxTQUFTLGtEQUFrRCxnQkFBZ0IsSUFBSSxzQkFBc0IsS0FBSyx5Q0FBeUMsZUFBZSxnQ0FBZ0MsaUJBQWlCLGdDQUFnQyxzQkFBc0IsRUFBRSxLQUFtQyw4Q0FBOEMsUUFBUSxNQUFNLG1CQUFtQiw2Q0FBNkMscUNBQXFDLDhOQUE4TixjQUFjLDRDQUE0QyxNQUFNLGVBQWUsbUNBQW1DLDJDQUEyQyxpQkFBaUIsK0JBQStCLEtBQUssOERBQUMsTUFBTSxxSUFBcUksSUFBSSxtQkFBbUIseUJBQXlCLHNCQUFzQiw0REFBQywwQkFBMEIsaUJBQWlCLDBDQUEwQyxnQ0FBZ0MsaUJBQWlCLEtBQUssS0FBSyxxQkFBcUIsaUJBQWlCLElBQUksd0RBQXdELEdBQUcsR0FBRyxRQUFRLDJpQ0FBMmlDLFlBQVksR0FBRyxrQkFBa0IsZ0JBQWdCLHFGQUFxRixrQkFBa0Isd0NBQXdDLCtEQUErRCxxQkFBcUIsOEJBQThCLGlDQUFpQyxrQ0FBa0Msd0ZBQXdGLEdBQUcsR0FBRyxlQUFlLHNEQUFzRCxJQUFJLHdCQUF3Qix3RkFBd0YsY0FBYyxvQkFBb0IsaURBQUMsT0FBTyw2Q0FBQyxrQ0FBa0MsTUFBTSxLQUFtQyxFQUFFLHFEQUFVLHNJQUFzSSxLQUFtQyxzQkFBc0Isb0RBQW9ELHdYQUF3WCxzREFBQyxhQUFhLDRDQUE0Qyw0QkFBNEIsb0JBQW9CLHNCQUFzQixzQ0FBc0MsS0FBSyxVQUFVLElBQUksNkJBQTZCLEVBQUUseUJBQXlCLE1BQU0sS0FBbUMsUUFBUSxpREFBTSxJQUFJLGVBQWUsS0FBbUMsb01BQW9NLHNEQUFzRCxJQUFJLHdCQUF3QixzREFBc0QsbUJBQW1CLGtCQUFrQixhQUFhLFdBQVcsOEJBQThCLDRCQUE0QixlQUFlLFVBQVUsMkhBQTJILDhCQUE4Qix1Q0FBdUMsaUNBQWlDLE1BQU0sd0JBQXdCLFlBQVkscUVBQXFFLDZCQUE2QixVQUFVLHVCQUF1QiwwREFBZSxhQUFhLElBQUksYUFBYSxJQUFJLHNCQUFzQixZQUFZLHNCQUFzQixZQUFZLGlCQUFpQixrQkFBa0IsbUNBQW1DLHdCQUF3QiwwREFBZSxLQUFLLG9CQUFvQixJQUFJLHdDQUF3QyxZQUFZLEdBQUcsa0JBQWtCLE1BQU0sdURBQVksZ0JBQWdCLE1BQU0saURBQUMsa0NBQWtDLE1BQU0sS0FBbUMsOEpBQThKLDBEQUFlLE9BQU8sSUFBSSxjQUFjLEdBQUcsR0FBRyxPQUFPLDhEQUFDLDRDQUE0QyxlQUFlLE9BQU8saURBQUMsS0FBSyxLQUFLLDZCQUE2QixLQUFtQyx5U0FBeVMsS0FBa0Usd2dCQUF3Z0IsK0RBQWUsRUFBRSxFQUEyUztBQUNueDBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9kaXN0L3N0eWxlZC1jb21wb25lbnRzLmJyb3dzZXIuZXNtLmpzP2VlZTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0e3R5cGVPZiBhcyBlLGlzRWxlbWVudCBhcyB0LGlzVmFsaWRFbGVtZW50VHlwZSBhcyBufWZyb21cInJlYWN0LWlzXCI7aW1wb3J0IHIse3VzZVN0YXRlIGFzIG8sdXNlQ29udGV4dCBhcyBzLHVzZU1lbW8gYXMgaSx1c2VFZmZlY3QgYXMgYSx1c2VSZWYgYXMgYyxjcmVhdGVFbGVtZW50IGFzIHUsdXNlTGF5b3V0RWZmZWN0IGFzIGx9ZnJvbVwicmVhY3RcIjtpbXBvcnQgZCBmcm9tXCJzaGFsbG93ZXF1YWxcIjtpbXBvcnQgaCBmcm9tXCJAZW1vdGlvbi9zdHlsaXNcIjtpbXBvcnQgcCBmcm9tXCJAZW1vdGlvbi91bml0bGVzc1wiO2ltcG9ydCBmIGZyb21cIkBlbW90aW9uL2lzLXByb3AtdmFsaWRcIjtpbXBvcnQgbSBmcm9tXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiO2Z1bmN0aW9uIHkoKXtyZXR1cm4oeT1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgbj1hcmd1bWVudHNbdF07Zm9yKHZhciByIGluIG4pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4scikmJihlW3JdPW5bcl0pfXJldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciB2PWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVtlWzBdXSxyPTAsbz10Lmxlbmd0aDtyPG87cis9MSluLnB1c2godFtyXSxlW3IrMV0pO3JldHVybiBufSxnPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT09dCYmXCJvYmplY3RcIj09dHlwZW9mIHQmJlwiW29iamVjdCBPYmplY3RdXCI9PT0odC50b1N0cmluZz90LnRvU3RyaW5nKCk6T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKSYmIWUodCl9LFM9T2JqZWN0LmZyZWV6ZShbXSksdz1PYmplY3QuZnJlZXplKHt9KTtmdW5jdGlvbiBFKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV9ZnVuY3Rpb24gYihlKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInN0cmluZ1wiPT10eXBlb2YgZSYmZXx8ZS5kaXNwbGF5TmFtZXx8ZS5uYW1lfHxcIkNvbXBvbmVudFwifWZ1bmN0aW9uIF8oZSl7cmV0dXJuIGUmJlwic3RyaW5nXCI9PXR5cGVvZiBlLnN0eWxlZENvbXBvbmVudElkfXZhciBOPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiZ2b2lkIDAhPT1wcm9jZXNzLmVudiYmKHByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19BVFRSfHxwcm9jZXNzLmVudi5TQ19BVFRSKXx8XCJkYXRhLXN0eWxlZFwiLEE9XCI1LjMuMTFcIixDPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJlwiSFRNTEVsZW1lbnRcImluIHdpbmRvdyxJPUJvb2xlYW4oXCJib29sZWFuXCI9PXR5cGVvZiBTQ19ESVNBQkxFX1NQRUVEWT9TQ19ESVNBQkxFX1NQRUVEWTpcInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2VzcyYmdm9pZCAwIT09cHJvY2Vzcy5lbnYmJih2b2lkIDAhPT1wcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkmJlwiXCIhPT1wcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFk/XCJmYWxzZVwiIT09cHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZJiZwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFk6dm9pZCAwIT09cHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFkmJlwiXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWT9cImZhbHNlXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWSYmcHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFk6XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVikpLFA9e30sTz1cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3sxOlwiQ2Fubm90IGNyZWF0ZSBzdHlsZWQtY29tcG9uZW50IGZvciBjb21wb25lbnQ6ICVzLlxcblxcblwiLDI6XCJDYW4ndCBjb2xsZWN0IHN0eWxlcyBvbmNlIHlvdSd2ZSBjb25zdW1lZCBhIGBTZXJ2ZXJTdHlsZVNoZWV0YCdzIHN0eWxlcyEgYFNlcnZlclN0eWxlU2hlZXRgIGlzIGEgb25lIG9mZiBpbnN0YW5jZSBmb3IgZWFjaCBzZXJ2ZXItc2lkZSByZW5kZXIgY3ljbGUuXFxuXFxuLSBBcmUgeW91IHRyeWluZyB0byByZXVzZSBpdCBhY3Jvc3MgcmVuZGVycz9cXG4tIEFyZSB5b3UgYWNjaWRlbnRhbGx5IGNhbGxpbmcgY29sbGVjdFN0eWxlcyB0d2ljZT9cXG5cXG5cIiwzOlwiU3RyZWFtaW5nIFNTUiBpcyBvbmx5IHN1cHBvcnRlZCBpbiBhIE5vZGUuanMgZW52aXJvbm1lbnQ7IFBsZWFzZSBkbyBub3QgdHJ5IHRvIGNhbGwgdGhpcyBtZXRob2QgaW4gdGhlIGJyb3dzZXIuXFxuXFxuXCIsNDpcIlRoZSBgU3R5bGVTaGVldE1hbmFnZXJgIGV4cGVjdHMgYSB2YWxpZCB0YXJnZXQgb3Igc2hlZXQgcHJvcCFcXG5cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgY2xpZW50IGFuZCBpcyB5b3VyIHRhcmdldCBmYWxzeT9cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgc2VydmVyIGFuZCBpcyB0aGUgc2hlZXQgZmFsc3k/XFxuXFxuXCIsNTpcIlRoZSBjbG9uZSBtZXRob2QgY2Fubm90IGJlIHVzZWQgb24gdGhlIGNsaWVudCFcXG5cXG4tIEFyZSB5b3UgcnVubmluZyBpbiBhIGNsaWVudC1saWtlIGVudmlyb25tZW50IG9uIHRoZSBzZXJ2ZXI/XFxuLSBBcmUgeW91IHRyeWluZyB0byBydW4gU1NSIG9uIHRoZSBjbGllbnQ/XFxuXFxuXCIsNjpcIlRyeWluZyB0byBpbnNlcnQgYSBuZXcgc3R5bGUgdGFnLCBidXQgdGhlIGdpdmVuIE5vZGUgaXMgdW5tb3VudGVkIVxcblxcbi0gQXJlIHlvdSB1c2luZyBhIGN1c3RvbSB0YXJnZXQgdGhhdCBpc24ndCBtb3VudGVkP1xcbi0gRG9lcyB5b3VyIGRvY3VtZW50IG5vdCBoYXZlIGEgdmFsaWQgaGVhZCBlbGVtZW50P1xcbi0gSGF2ZSB5b3UgYWNjaWRlbnRhbGx5IHJlbW92ZWQgYSBzdHlsZSB0YWcgbWFudWFsbHk/XFxuXFxuXCIsNzonVGhlbWVQcm92aWRlcjogUGxlYXNlIHJldHVybiBhbiBvYmplY3QgZnJvbSB5b3VyIFwidGhlbWVcIiBwcm9wIGZ1bmN0aW9uLCBlLmcuXFxuXFxuYGBganNcXG50aGVtZT17KCkgPT4gKHt9KX1cXG5gYGBcXG5cXG4nLDg6J1RoZW1lUHJvdmlkZXI6IFBsZWFzZSBtYWtlIHlvdXIgXCJ0aGVtZVwiIHByb3AgYW4gb2JqZWN0LlxcblxcbicsOTpcIk1pc3NpbmcgZG9jdW1lbnQgYDxoZWFkPmBcXG5cXG5cIiwxMDpcIkNhbm5vdCBmaW5kIGEgU3R5bGVTaGVldCBpbnN0YW5jZS4gVXN1YWxseSB0aGlzIGhhcHBlbnMgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvcGllcyBvZiBzdHlsZWQtY29tcG9uZW50cyBsb2FkZWQgYXQgb25jZS4gQ2hlY2sgb3V0IHRoaXMgaXNzdWUgZm9yIGhvdyB0byB0cm91Ymxlc2hvb3QgYW5kIGZpeCB0aGUgY29tbW9uIGNhc2VzIHdoZXJlIHRoaXMgc2l0dWF0aW9uIGNhbiBoYXBwZW46IGh0dHBzOi8vZ2l0aHViLmNvbS9zdHlsZWQtY29tcG9uZW50cy9zdHlsZWQtY29tcG9uZW50cy9pc3N1ZXMvMTk0MSNpc3N1ZWNvbW1lbnQtNDE3ODYyMDIxXFxuXFxuXCIsMTE6XCJfVGhpcyBlcnJvciB3YXMgcmVwbGFjZWQgd2l0aCBhIGRldi10aW1lIHdhcm5pbmcsIGl0IHdpbGwgYmUgZGVsZXRlZCBmb3IgdjQgZmluYWwuXyBbY3JlYXRlR2xvYmFsU3R5bGVdIHJlY2VpdmVkIGNoaWxkcmVuIHdoaWNoIHdpbGwgbm90IGJlIHJlbmRlcmVkLiBQbGVhc2UgdXNlIHRoZSBjb21wb25lbnQgd2l0aG91dCBwYXNzaW5nIGNoaWxkcmVuIGVsZW1lbnRzLlxcblxcblwiLDEyOlwiSXQgc2VlbXMgeW91IGFyZSBpbnRlcnBvbGF0aW5nIGEga2V5ZnJhbWUgZGVjbGFyYXRpb24gKCVzKSBpbnRvIGFuIHVudGFnZ2VkIHN0cmluZy4gVGhpcyB3YXMgc3VwcG9ydGVkIGluIHN0eWxlZC1jb21wb25lbnRzIHYzLCBidXQgaXMgbm90IGxvbmdlciBzdXBwb3J0ZWQgaW4gdjQgYXMga2V5ZnJhbWVzIGFyZSBub3cgaW5qZWN0ZWQgb24tZGVtYW5kLiBQbGVhc2Ugd3JhcCB5b3VyIHN0cmluZyBpbiB0aGUgY3NzXFxcXGBcXFxcYCBoZWxwZXIgd2hpY2ggZW5zdXJlcyB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBjb3JyZWN0bHkuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hcGkjY3NzXFxuXFxuXCIsMTM6XCIlcyBpcyBub3QgYSBzdHlsZWQgY29tcG9uZW50IGFuZCBjYW5ub3QgYmUgcmVmZXJyZWQgdG8gdmlhIGNvbXBvbmVudCBzZWxlY3Rvci4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FkdmFuY2VkI3JlZmVycmluZy10by1vdGhlci1jb21wb25lbnRzIGZvciBtb3JlIGRldGFpbHMuXFxuXFxuXCIsMTQ6J1RoZW1lUHJvdmlkZXI6IFwidGhlbWVcIiBwcm9wIGlzIHJlcXVpcmVkLlxcblxcbicsMTU6XCJBIHN0eWxpcyBwbHVnaW4gaGFzIGJlZW4gc3VwcGxpZWQgdGhhdCBpcyBub3QgbmFtZWQuIFdlIG5lZWQgYSBuYW1lIGZvciBlYWNoIHBsdWdpbiB0byBiZSBhYmxlIHRvIHByZXZlbnQgc3R5bGluZyBjb2xsaXNpb25zIGJldHdlZW4gZGlmZmVyZW50IHN0eWxpcyBjb25maWd1cmF0aW9ucyB3aXRoaW4gdGhlIHNhbWUgYXBwLiBCZWZvcmUgeW91IHBhc3MgeW91ciBwbHVnaW4gdG8gYDxTdHlsZVNoZWV0TWFuYWdlciBzdHlsaXNQbHVnaW5zPXtbXX0+YCwgcGxlYXNlIG1ha2Ugc3VyZSBlYWNoIHBsdWdpbiBpcyB1bmlxdWVseS1uYW1lZCwgZS5nLlxcblxcbmBgYGpzXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGltcG9ydGVkUGx1Z2luLCAnbmFtZScsIHsgdmFsdWU6ICdzb21lLXVuaXF1ZS1uYW1lJyB9KTtcXG5gYGBcXG5cXG5cIiwxNjpcIlJlYWNoZWQgdGhlIGxpbWl0IG9mIGhvdyBtYW55IHN0eWxlZCBjb21wb25lbnRzIG1heSBiZSBjcmVhdGVkIGF0IGdyb3VwICVzLlxcbllvdSBtYXkgb25seSBjcmVhdGUgdXAgdG8gMSwwNzMsNzQxLDgyNCBjb21wb25lbnRzLiBJZiB5b3UncmUgY3JlYXRpbmcgY29tcG9uZW50cyBkeW5hbWljYWxseSxcXG5hcyBmb3IgaW5zdGFuY2UgaW4geW91ciByZW5kZXIgbWV0aG9kIHRoZW4geW91IG1heSBiZSBydW5uaW5nIGludG8gdGhpcyBsaW1pdGF0aW9uLlxcblxcblwiLDE3OlwiQ1NTU3R5bGVTaGVldCBjb3VsZCBub3QgYmUgZm91bmQgb24gSFRNTFN0eWxlRWxlbWVudC5cXG5IYXMgc3R5bGVkLWNvbXBvbmVudHMnIHN0eWxlIHRhZyBiZWVuIHVubW91bnRlZCBvciBhbHRlcmVkIGJ5IGFub3RoZXIgc2NyaXB0P1xcblwifTp7fTtmdW5jdGlvbiBSKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGg8PTA/dm9pZCAwOmFyZ3VtZW50c1swXSx0PVtdLG49MSxyPWFyZ3VtZW50cy5sZW5ndGg7bjxyO24rPTEpdC5wdXNoKG48MHx8YXJndW1lbnRzLmxlbmd0aDw9bj92b2lkIDA6YXJndW1lbnRzW25dKTtyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0KXtlPWUucmVwbGFjZSgvJVthLXpdLyx0KX0pKSxlfWZ1bmN0aW9uIEQoZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO3Rocm93XCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVj9uZXcgRXJyb3IoXCJBbiBlcnJvciBvY2N1cnJlZC4gU2VlIGh0dHBzOi8vZ2l0LmlvL0pVSWFFI1wiK2UrXCIgZm9yIG1vcmUgaW5mb3JtYXRpb24uXCIrKG4ubGVuZ3RoPjA/XCIgQXJnczogXCIrbi5qb2luKFwiLCBcIik6XCJcIikpOm5ldyBFcnJvcihSLmFwcGx5KHZvaWQgMCxbT1tlXV0uY29uY2F0KG4pKS50cmltKCkpfXZhciBqPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLmdyb3VwU2l6ZXM9bmV3IFVpbnQzMkFycmF5KDUxMiksdGhpcy5sZW5ndGg9NTEyLHRoaXMudGFnPWV9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaW5kZXhPZkdyb3VwPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLG49MDtuPGU7bisrKXQrPXRoaXMuZ3JvdXBTaXplc1tuXTtyZXR1cm4gdH0sdC5pbnNlcnRSdWxlcz1mdW5jdGlvbihlLHQpe2lmKGU+PXRoaXMuZ3JvdXBTaXplcy5sZW5ndGgpe2Zvcih2YXIgbj10aGlzLmdyb3VwU2l6ZXMscj1uLmxlbmd0aCxvPXI7ZT49bzspKG88PD0xKTwwJiZEKDE2LFwiXCIrZSk7dGhpcy5ncm91cFNpemVzPW5ldyBVaW50MzJBcnJheShvKSx0aGlzLmdyb3VwU2l6ZXMuc2V0KG4pLHRoaXMubGVuZ3RoPW87Zm9yKHZhciBzPXI7czxvO3MrKyl0aGlzLmdyb3VwU2l6ZXNbc109MH1mb3IodmFyIGk9dGhpcy5pbmRleE9mR3JvdXAoZSsxKSxhPTAsYz10Lmxlbmd0aDthPGM7YSsrKXRoaXMudGFnLmluc2VydFJ1bGUoaSx0W2FdKSYmKHRoaXMuZ3JvdXBTaXplc1tlXSsrLGkrKyl9LHQuY2xlYXJHcm91cD1mdW5jdGlvbihlKXtpZihlPHRoaXMubGVuZ3RoKXt2YXIgdD10aGlzLmdyb3VwU2l6ZXNbZV0sbj10aGlzLmluZGV4T2ZHcm91cChlKSxyPW4rdDt0aGlzLmdyb3VwU2l6ZXNbZV09MDtmb3IodmFyIG89bjtvPHI7bysrKXRoaXMudGFnLmRlbGV0ZVJ1bGUobil9fSx0LmdldEdyb3VwPWZ1bmN0aW9uKGUpe3ZhciB0PVwiXCI7aWYoZT49dGhpcy5sZW5ndGh8fDA9PT10aGlzLmdyb3VwU2l6ZXNbZV0pcmV0dXJuIHQ7Zm9yKHZhciBuPXRoaXMuZ3JvdXBTaXplc1tlXSxyPXRoaXMuaW5kZXhPZkdyb3VwKGUpLG89cituLHM9cjtzPG87cysrKXQrPXRoaXMudGFnLmdldFJ1bGUocykrXCIvKiFzYyovXFxuXCI7cmV0dXJuIHR9LGV9KCksVD1uZXcgTWFwLHg9bmV3IE1hcCxrPTEsVj1mdW5jdGlvbihlKXtpZihULmhhcyhlKSlyZXR1cm4gVC5nZXQoZSk7Zm9yKDt4LmhhcyhrKTspaysrO3ZhciB0PWsrKztyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoKDB8dCk8MHx8dD4xPDwzMCkmJkQoMTYsXCJcIit0KSxULnNldChlLHQpLHguc2V0KHQsZSksdH0sQj1mdW5jdGlvbihlKXtyZXR1cm4geC5nZXQoZSl9LHo9ZnVuY3Rpb24oZSx0KXt0Pj1rJiYoaz10KzEpLFQuc2V0KGUsdCkseC5zZXQodCxlKX0sTT1cInN0eWxlW1wiK04rJ11bZGF0YS1zdHlsZWQtdmVyc2lvbj1cIjUuMy4xMVwiXScsRz1uZXcgUmVnRXhwKFwiXlwiK04rJ1xcXFwuZyhcXFxcZCspXFxcXFtpZD1cIihbXFxcXHdcXFxcZC1dKylcIlxcXFxdLio/XCIoW15cIl0qKScpLEw9ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcixvPW4uc3BsaXQoXCIsXCIpLHM9MCxpPW8ubGVuZ3RoO3M8aTtzKyspKHI9b1tzXSkmJmUucmVnaXN0ZXJOYW1lKHQscil9LEY9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49KHQudGV4dENvbnRlbnR8fFwiXCIpLnNwbGl0KFwiLyohc2MqL1xcblwiKSxyPVtdLG89MCxzPW4ubGVuZ3RoO288cztvKyspe3ZhciBpPW5bb10udHJpbSgpO2lmKGkpe3ZhciBhPWkubWF0Y2goRyk7aWYoYSl7dmFyIGM9MHxwYXJzZUludChhWzFdLDEwKSx1PWFbMl07MCE9PWMmJih6KHUsYyksTChlLHUsYVszXSksZS5nZXRUYWcoKS5pbnNlcnRSdWxlcyhjLHIpKSxyLmxlbmd0aD0wfWVsc2Ugci5wdXNoKGkpfX19LFk9ZnVuY3Rpb24oKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgX193ZWJwYWNrX25vbmNlX18/X193ZWJwYWNrX25vbmNlX186bnVsbH0scT1mdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5oZWFkLG49ZXx8dCxyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxvPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmNoaWxkTm9kZXMsbj10Lmxlbmd0aDtuPj0wO24tLSl7dmFyIHI9dFtuXTtpZihyJiYxPT09ci5ub2RlVHlwZSYmci5oYXNBdHRyaWJ1dGUoTikpcmV0dXJuIHJ9fShuKSxzPXZvaWQgMCE9PW8/by5uZXh0U2libGluZzpudWxsO3Iuc2V0QXR0cmlidXRlKE4sXCJhY3RpdmVcIiksci5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN0eWxlZC12ZXJzaW9uXCIsXCI1LjMuMTFcIik7dmFyIGk9WSgpO3JldHVybiBpJiZyLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsaSksbi5pbnNlcnRCZWZvcmUocixzKSxyfSxIPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD10aGlzLmVsZW1lbnQ9cShlKTt0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpKSx0aGlzLnNoZWV0PWZ1bmN0aW9uKGUpe2lmKGUuc2hlZXQpcmV0dXJuIGUuc2hlZXQ7Zm9yKHZhciB0PWRvY3VtZW50LnN0eWxlU2hlZXRzLG49MCxyPXQubGVuZ3RoO248cjtuKyspe3ZhciBvPXRbbl07aWYoby5vd25lck5vZGU9PT1lKXJldHVybiBvfUQoMTcpfSh0KSx0aGlzLmxlbmd0aD0wfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Lmluc2VydFJ1bGU9ZnVuY3Rpb24oZSx0KXt0cnl7cmV0dXJuIHRoaXMuc2hlZXQuaW5zZXJ0UnVsZSh0LGUpLHRoaXMubGVuZ3RoKyssITB9Y2F0Y2goZSl7cmV0dXJuITF9fSx0LmRlbGV0ZVJ1bGU9ZnVuY3Rpb24oZSl7dGhpcy5zaGVldC5kZWxldGVSdWxlKGUpLHRoaXMubGVuZ3RoLS19LHQuZ2V0UnVsZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnNoZWV0LmNzc1J1bGVzW2VdO3JldHVybiB2b2lkIDAhPT10JiZcInN0cmluZ1wiPT10eXBlb2YgdC5jc3NUZXh0P3QuY3NzVGV4dDpcIlwifSxlfSgpLCQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZhciB0PXRoaXMuZWxlbWVudD1xKGUpO3RoaXMubm9kZXM9dC5jaGlsZE5vZGVzLHRoaXMubGVuZ3RoPTB9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaW5zZXJ0UnVsZT1mdW5jdGlvbihlLHQpe2lmKGU8PXRoaXMubGVuZ3RoJiZlPj0wKXt2YXIgbj1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0KSxyPXRoaXMubm9kZXNbZV07cmV0dXJuIHRoaXMuZWxlbWVudC5pbnNlcnRCZWZvcmUobixyfHxudWxsKSx0aGlzLmxlbmd0aCsrLCEwfXJldHVybiExfSx0LmRlbGV0ZVJ1bGU9ZnVuY3Rpb24oZSl7dGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMubm9kZXNbZV0pLHRoaXMubGVuZ3RoLS19LHQuZ2V0UnVsZT1mdW5jdGlvbihlKXtyZXR1cm4gZTx0aGlzLmxlbmd0aD90aGlzLm5vZGVzW2VdLnRleHRDb250ZW50OlwiXCJ9LGV9KCksVz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5ydWxlcz1bXSx0aGlzLmxlbmd0aD0wfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Lmluc2VydFJ1bGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZTw9dGhpcy5sZW5ndGgmJih0aGlzLnJ1bGVzLnNwbGljZShlLDAsdCksdGhpcy5sZW5ndGgrKywhMCl9LHQuZGVsZXRlUnVsZT1mdW5jdGlvbihlKXt0aGlzLnJ1bGVzLnNwbGljZShlLDEpLHRoaXMubGVuZ3RoLS19LHQuZ2V0UnVsZT1mdW5jdGlvbihlKXtyZXR1cm4gZTx0aGlzLmxlbmd0aD90aGlzLnJ1bGVzW2VdOlwiXCJ9LGV9KCksVT1DLEo9e2lzU2VydmVyOiFDLHVzZUNTU09NSW5qZWN0aW9uOiFJfSxYPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQsbil7dm9pZCAwPT09ZSYmKGU9dyksdm9pZCAwPT09dCYmKHQ9e30pLHRoaXMub3B0aW9ucz15KHt9LEose30sZSksdGhpcy5ncz10LHRoaXMubmFtZXM9bmV3IE1hcChuKSx0aGlzLnNlcnZlcj0hIWUuaXNTZXJ2ZXIsIXRoaXMuc2VydmVyJiZDJiZVJiYoVT0hMSxmdW5jdGlvbihlKXtmb3IodmFyIHQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChNKSxuPTAscj10Lmxlbmd0aDtuPHI7bisrKXt2YXIgbz10W25dO28mJlwiYWN0aXZlXCIhPT1vLmdldEF0dHJpYnV0ZShOKSYmKEYoZSxvKSxvLnBhcmVudE5vZGUmJm8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKSl9fSh0aGlzKSl9ZS5yZWdpc3RlcklkPWZ1bmN0aW9uKGUpe3JldHVybiBWKGUpfTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5yZWNvbnN0cnVjdFdpdGhPcHRpb25zPWZ1bmN0aW9uKHQsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPSEwKSxuZXcgZSh5KHt9LHRoaXMub3B0aW9ucyx7fSx0KSx0aGlzLmdzLG4mJnRoaXMubmFtZXN8fHZvaWQgMCl9LHQuYWxsb2NhdGVHU0luc3RhbmNlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmdzW2VdPSh0aGlzLmdzW2VdfHwwKSsxfSx0LmdldFRhZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRhZ3x8KHRoaXMudGFnPShuPSh0PXRoaXMub3B0aW9ucykuaXNTZXJ2ZXIscj10LnVzZUNTU09NSW5qZWN0aW9uLG89dC50YXJnZXQsZT1uP25ldyBXKG8pOnI/bmV3IEgobyk6bmV3ICQobyksbmV3IGooZSkpKTt2YXIgZSx0LG4scixvfSx0Lmhhc05hbWVGb3JJZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm5hbWVzLmhhcyhlKSYmdGhpcy5uYW1lcy5nZXQoZSkuaGFzKHQpfSx0LnJlZ2lzdGVyTmFtZT1mdW5jdGlvbihlLHQpe2lmKFYoZSksdGhpcy5uYW1lcy5oYXMoZSkpdGhpcy5uYW1lcy5nZXQoZSkuYWRkKHQpO2Vsc2V7dmFyIG49bmV3IFNldDtuLmFkZCh0KSx0aGlzLm5hbWVzLnNldChlLG4pfX0sdC5pbnNlcnRSdWxlcz1mdW5jdGlvbihlLHQsbil7dGhpcy5yZWdpc3Rlck5hbWUoZSx0KSx0aGlzLmdldFRhZygpLmluc2VydFJ1bGVzKFYoZSksbil9LHQuY2xlYXJOYW1lcz1mdW5jdGlvbihlKXt0aGlzLm5hbWVzLmhhcyhlKSYmdGhpcy5uYW1lcy5nZXQoZSkuY2xlYXIoKX0sdC5jbGVhclJ1bGVzPWZ1bmN0aW9uKGUpe3RoaXMuZ2V0VGFnKCkuY2xlYXJHcm91cChWKGUpKSx0aGlzLmNsZWFyTmFtZXMoZSl9LHQuY2xlYXJUYWc9ZnVuY3Rpb24oKXt0aGlzLnRhZz12b2lkIDB9LHQudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuZ2V0VGFnKCksbj10Lmxlbmd0aCxyPVwiXCIsbz0wO288bjtvKyspe3ZhciBzPUIobyk7aWYodm9pZCAwIT09cyl7dmFyIGk9ZS5uYW1lcy5nZXQocyksYT10LmdldEdyb3VwKG8pO2lmKGkmJmEmJmkuc2l6ZSl7dmFyIGM9TitcIi5nXCIrbysnW2lkPVwiJytzKydcIl0nLHU9XCJcIjt2b2lkIDAhPT1pJiZpLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UubGVuZ3RoPjAmJih1Kz1lK1wiLFwiKX0pKSxyKz1cIlwiK2ErYysne2NvbnRlbnQ6XCInK3UrJ1wifS8qIXNjKi9cXG4nfX19cmV0dXJuIHJ9KHRoaXMpfSxlfSgpLFo9LyhhKShkKS9naSxLPWZ1bmN0aW9uKGUpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGUrKGU+MjU/Mzk6OTcpKX07ZnVuY3Rpb24gUShlKXt2YXIgdCxuPVwiXCI7Zm9yKHQ9TWF0aC5hYnMoZSk7dD41Mjt0PXQvNTJ8MCluPUsodCU1MikrbjtyZXR1cm4oSyh0JTUyKStuKS5yZXBsYWNlKFosXCIkMS0kMlwiKX12YXIgZWU9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49dC5sZW5ndGg7bjspZT0zMyplXnQuY2hhckNvZGVBdCgtLW4pO3JldHVybiBlfSx0ZT1mdW5jdGlvbihlKXtyZXR1cm4gZWUoNTM4MSxlKX07ZnVuY3Rpb24gbmUoZSl7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kz0xKXt2YXIgbj1lW3RdO2lmKEUobikmJiFfKG4pKXJldHVybiExfXJldHVybiEwfXZhciByZT10ZShcIjUuMy4xMVwiKSxvZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0LG4pe3RoaXMucnVsZXM9ZSx0aGlzLnN0YXRpY1J1bGVzSWQ9XCJcIix0aGlzLmlzU3RhdGljPVwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJih2b2lkIDA9PT1ufHxuLmlzU3RhdGljKSYmbmUoZSksdGhpcy5jb21wb25lbnRJZD10LHRoaXMuYmFzZUhhc2g9ZWUocmUsdCksdGhpcy5iYXNlU3R5bGU9bixYLnJlZ2lzdGVySWQodCl9cmV0dXJuIGUucHJvdG90eXBlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzLmNvbXBvbmVudElkLG89W107aWYodGhpcy5iYXNlU3R5bGUmJm8ucHVzaCh0aGlzLmJhc2VTdHlsZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhlLHQsbikpLHRoaXMuaXNTdGF0aWMmJiFuLmhhc2gpaWYodGhpcy5zdGF0aWNSdWxlc0lkJiZ0Lmhhc05hbWVGb3JJZChyLHRoaXMuc3RhdGljUnVsZXNJZCkpby5wdXNoKHRoaXMuc3RhdGljUnVsZXNJZCk7ZWxzZXt2YXIgcz1fZSh0aGlzLnJ1bGVzLGUsdCxuKS5qb2luKFwiXCIpLGk9UShlZSh0aGlzLmJhc2VIYXNoLHMpPj4+MCk7aWYoIXQuaGFzTmFtZUZvcklkKHIsaSkpe3ZhciBhPW4ocyxcIi5cIitpLHZvaWQgMCxyKTt0Lmluc2VydFJ1bGVzKHIsaSxhKX1vLnB1c2goaSksdGhpcy5zdGF0aWNSdWxlc0lkPWl9ZWxzZXtmb3IodmFyIGM9dGhpcy5ydWxlcy5sZW5ndGgsdT1lZSh0aGlzLmJhc2VIYXNoLG4uaGFzaCksbD1cIlwiLGQ9MDtkPGM7ZCsrKXt2YXIgaD10aGlzLnJ1bGVzW2RdO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBoKWwrPWgsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKHU9ZWUodSxoK2QpKTtlbHNlIGlmKGgpe3ZhciBwPV9lKGgsZSx0LG4pLGY9QXJyYXkuaXNBcnJheShwKT9wLmpvaW4oXCJcIik6cDt1PWVlKHUsZitkKSxsKz1mfX1pZihsKXt2YXIgbT1RKHU+Pj4wKTtpZighdC5oYXNOYW1lRm9ySWQocixtKSl7dmFyIHk9bihsLFwiLlwiK20sdm9pZCAwLHIpO3QuaW5zZXJ0UnVsZXMocixtLHkpfW8ucHVzaChtKX19cmV0dXJuIG8uam9pbihcIiBcIil9LGV9KCksc2U9L15cXHMqXFwvXFwvLiokL2dtLGllPVtcIjpcIixcIltcIixcIi5cIixcIiNcIl07ZnVuY3Rpb24gYWUoZSl7dmFyIHQsbixyLG8scz12b2lkIDA9PT1lP3c6ZSxpPXMub3B0aW9ucyxhPXZvaWQgMD09PWk/dzppLGM9cy5wbHVnaW5zLHU9dm9pZCAwPT09Yz9TOmMsbD1uZXcgaChhKSxkPVtdLHA9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtpZih0KXRyeXtlKHQrXCJ9XCIpfWNhdGNoKGUpe319cmV0dXJuIGZ1bmN0aW9uKG4scixvLHMsaSxhLGMsdSxsLGQpe3N3aXRjaChuKXtjYXNlIDE6aWYoMD09PWwmJjY0PT09ci5jaGFyQ29kZUF0KDApKXJldHVybiBlKHIrXCI7XCIpLFwiXCI7YnJlYWs7Y2FzZSAyOmlmKDA9PT11KXJldHVybiByK1wiLyp8Ki9cIjticmVhaztjYXNlIDM6c3dpdGNoKHUpe2Nhc2UgMTAyOmNhc2UgMTEyOnJldHVybiBlKG9bMF0rciksXCJcIjtkZWZhdWx0OnJldHVybiByKygwPT09ZD9cIi8qfCovXCI6XCJcIil9Y2FzZS0yOnIuc3BsaXQoXCIvKnwqL31cIikuZm9yRWFjaCh0KX19fSgoZnVuY3Rpb24oZSl7ZC5wdXNoKGUpfSkpLGY9ZnVuY3Rpb24oZSxyLHMpe3JldHVybiAwPT09ciYmLTEhPT1pZS5pbmRleE9mKHNbbi5sZW5ndGhdKXx8cy5tYXRjaChvKT9lOlwiLlwiK3R9O2Z1bmN0aW9uIG0oZSxzLGksYSl7dm9pZCAwPT09YSYmKGE9XCImXCIpO3ZhciBjPWUucmVwbGFjZShzZSxcIlwiKSx1PXMmJmk/aStcIiBcIitzK1wiIHsgXCIrYytcIiB9XCI6YztyZXR1cm4gdD1hLG49cyxyPW5ldyBSZWdFeHAoXCJcXFxcXCIrbitcIlxcXFxiXCIsXCJnXCIpLG89bmV3IFJlZ0V4cChcIihcXFxcXCIrbitcIlxcXFxiKXsyLH1cIiksbChpfHwhcz9cIlwiOnMsdSl9cmV0dXJuIGwudXNlKFtdLmNvbmNhdCh1LFtmdW5jdGlvbihlLHQsbyl7Mj09PWUmJm8ubGVuZ3RoJiZvWzBdLmxhc3RJbmRleE9mKG4pPjAmJihvWzBdPW9bMF0ucmVwbGFjZShyLGYpKX0scCxmdW5jdGlvbihlKXtpZigtMj09PWUpe3ZhciB0PWQ7cmV0dXJuIGQ9W10sdH19XSkpLG0uaGFzaD11Lmxlbmd0aD91LnJlZHVjZSgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5uYW1lfHxEKDE1KSxlZShlLHQubmFtZSl9KSw1MzgxKS50b1N0cmluZygpOlwiXCIsbX12YXIgY2U9ci5jcmVhdGVDb250ZXh0KCksdWU9Y2UuQ29uc3VtZXIsbGU9ci5jcmVhdGVDb250ZXh0KCksZGU9KGxlLkNvbnN1bWVyLG5ldyBYKSxoZT1hZSgpO2Z1bmN0aW9uIHBlKCl7cmV0dXJuIHMoY2UpfHxkZX1mdW5jdGlvbiBmZSgpe3JldHVybiBzKGxlKXx8aGV9ZnVuY3Rpb24gbWUoZSl7dmFyIHQ9byhlLnN0eWxpc1BsdWdpbnMpLG49dFswXSxzPXRbMV0sYz1wZSgpLHU9aSgoZnVuY3Rpb24oKXt2YXIgdD1jO3JldHVybiBlLnNoZWV0P3Q9ZS5zaGVldDplLnRhcmdldCYmKHQ9dC5yZWNvbnN0cnVjdFdpdGhPcHRpb25zKHt0YXJnZXQ6ZS50YXJnZXR9LCExKSksZS5kaXNhYmxlQ1NTT01JbmplY3Rpb24mJih0PXQucmVjb25zdHJ1Y3RXaXRoT3B0aW9ucyh7dXNlQ1NTT01JbmplY3Rpb246ITF9KSksdH0pLFtlLmRpc2FibGVDU1NPTUluamVjdGlvbixlLnNoZWV0LGUudGFyZ2V0XSksbD1pKChmdW5jdGlvbigpe3JldHVybiBhZSh7b3B0aW9uczp7cHJlZml4OiFlLmRpc2FibGVWZW5kb3JQcmVmaXhlc30scGx1Z2luczpufSl9KSxbZS5kaXNhYmxlVmVuZG9yUHJlZml4ZXMsbl0pO3JldHVybiBhKChmdW5jdGlvbigpe2QobixlLnN0eWxpc1BsdWdpbnMpfHxzKGUuc3R5bGlzUGx1Z2lucyl9KSxbZS5zdHlsaXNQbHVnaW5zXSksci5jcmVhdGVFbGVtZW50KGNlLlByb3ZpZGVyLHt2YWx1ZTp1fSxyLmNyZWF0ZUVsZW1lbnQobGUuUHJvdmlkZXIse3ZhbHVlOmx9LFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/ci5DaGlsZHJlbi5vbmx5KGUuY2hpbGRyZW4pOmUuY2hpbGRyZW4pKX12YXIgeWU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG49dGhpczt0aGlzLmluamVjdD1mdW5jdGlvbihlLHQpe3ZvaWQgMD09PXQmJih0PWhlKTt2YXIgcj1uLm5hbWUrdC5oYXNoO2UuaGFzTmFtZUZvcklkKG4uaWQscil8fGUuaW5zZXJ0UnVsZXMobi5pZCxyLHQobi5ydWxlcyxyLFwiQGtleWZyYW1lc1wiKSl9LHRoaXMudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gRCgxMixTdHJpbmcobi5uYW1lKSl9LHRoaXMubmFtZT1lLHRoaXMuaWQ9XCJzYy1rZXlmcmFtZXMtXCIrZSx0aGlzLnJ1bGVzPXR9cmV0dXJuIGUucHJvdG90eXBlLmdldE5hbWU9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPWhlKSx0aGlzLm5hbWUrZS5oYXNofSxlfSgpLHZlPS8oW0EtWl0pLyxnZT0vKFtBLVpdKS9nLFNlPS9ebXMtLyx3ZT1mdW5jdGlvbihlKXtyZXR1cm5cIi1cIitlLnRvTG93ZXJDYXNlKCl9O2Z1bmN0aW9uIEVlKGUpe3JldHVybiB2ZS50ZXN0KGUpP2UucmVwbGFjZShnZSx3ZSkucmVwbGFjZShTZSxcIi1tcy1cIik6ZX12YXIgYmU9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWV8fCExPT09ZXx8XCJcIj09PWV9O2Z1bmN0aW9uIF9lKGUsbixyLG8pe2lmKEFycmF5LmlzQXJyYXkoZSkpe2Zvcih2YXIgcyxpPVtdLGE9MCxjPWUubGVuZ3RoO2E8YzthKz0xKVwiXCIhPT0ocz1fZShlW2FdLG4scixvKSkmJihBcnJheS5pc0FycmF5KHMpP2kucHVzaC5hcHBseShpLHMpOmkucHVzaChzKSk7cmV0dXJuIGl9aWYoYmUoZSkpcmV0dXJuXCJcIjtpZihfKGUpKXJldHVyblwiLlwiK2Uuc3R5bGVkQ29tcG9uZW50SWQ7aWYoRShlKSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YobD1lKXx8bC5wcm90b3R5cGUmJmwucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnR8fCFuKXJldHVybiBlO3ZhciB1PWUobik7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmdCh1KSYmY29uc29sZS53YXJuKGIoZSkrXCIgaXMgbm90IGEgc3R5bGVkIGNvbXBvbmVudCBhbmQgY2Fubm90IGJlIHJlZmVycmVkIHRvIHZpYSBjb21wb25lbnQgc2VsZWN0b3IuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hZHZhbmNlZCNyZWZlcnJpbmctdG8tb3RoZXItY29tcG9uZW50cyBmb3IgbW9yZSBkZXRhaWxzLlwiKSxfZSh1LG4scixvKX12YXIgbDtyZXR1cm4gZSBpbnN0YW5jZW9mIHllP3I/KGUuaW5qZWN0KHIsbyksZS5nZXROYW1lKG8pKTplOmcoZSk/ZnVuY3Rpb24gZSh0LG4pe3ZhciByLG8scz1bXTtmb3IodmFyIGkgaW4gdCl0Lmhhc093blByb3BlcnR5KGkpJiYhYmUodFtpXSkmJihBcnJheS5pc0FycmF5KHRbaV0pJiZ0W2ldLmlzQ3NzfHxFKHRbaV0pP3MucHVzaChFZShpKStcIjpcIix0W2ldLFwiO1wiKTpnKHRbaV0pP3MucHVzaC5hcHBseShzLGUodFtpXSxpKSk6cy5wdXNoKEVlKGkpK1wiOiBcIisocj1pLG51bGw9PShvPXRbaV0pfHxcImJvb2xlYW5cIj09dHlwZW9mIG98fFwiXCI9PT1vP1wiXCI6XCJudW1iZXJcIiE9dHlwZW9mIG98fDA9PT1vfHxyIGluIHB8fHIuc3RhcnRzV2l0aChcIi0tXCIpP1N0cmluZyhvKS50cmltKCk6bytcInB4XCIpK1wiO1wiKSk7cmV0dXJuIG4/W24rXCIge1wiXS5jb25jYXQocyxbXCJ9XCJdKTpzfShlKTplLnRvU3RyaW5nKCl9dmFyIE5lPWZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpJiYoZS5pc0Nzcz0hMCksZX07ZnVuY3Rpb24gQWUoZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO3JldHVybiBFKGUpfHxnKGUpP05lKF9lKHYoUyxbZV0uY29uY2F0KG4pKSkpOjA9PT1uLmxlbmd0aCYmMT09PWUubGVuZ3RoJiZcInN0cmluZ1wiPT10eXBlb2YgZVswXT9lOk5lKF9lKHYoZSxuKSkpfXZhciBDZT0vaW52YWxpZCBob29rIGNhbGwvaSxJZT1uZXcgU2V0LFBlPWZ1bmN0aW9uKGUsdCl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIG49XCJUaGUgY29tcG9uZW50IFwiK2UrKHQ/JyB3aXRoIHRoZSBpZCBvZiBcIicrdCsnXCInOlwiXCIpK1wiIGhhcyBiZWVuIGNyZWF0ZWQgZHluYW1pY2FsbHkuXFxuWW91IG1heSBzZWUgdGhpcyB3YXJuaW5nIGJlY2F1c2UgeW91J3ZlIGNhbGxlZCBzdHlsZWQgaW5zaWRlIGFub3RoZXIgY29tcG9uZW50LlxcblRvIHJlc29sdmUgdGhpcyBvbmx5IGNyZWF0ZSBuZXcgU3R5bGVkQ29tcG9uZW50cyBvdXRzaWRlIG9mIGFueSByZW5kZXIgbWV0aG9kIGFuZCBmdW5jdGlvbiBjb21wb25lbnQuXCIscj1jb25zb2xlLmVycm9yO3RyeXt2YXIgbz0hMDtjb25zb2xlLmVycm9yPWZ1bmN0aW9uKGUpe2lmKENlLnRlc3QoZSkpbz0hMSxJZS5kZWxldGUobik7ZWxzZXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxzPW5ldyBBcnJheSh0PjE/dC0xOjApLGk9MTtpPHQ7aSsrKXNbaS0xXT1hcmd1bWVudHNbaV07ci5hcHBseSh2b2lkIDAsW2VdLmNvbmNhdChzKSl9fSxjKCksbyYmIUllLmhhcyhuKSYmKGNvbnNvbGUud2FybihuKSxJZS5hZGQobikpfWNhdGNoKGUpe0NlLnRlc3QoZS5tZXNzYWdlKSYmSWUuZGVsZXRlKG4pfWZpbmFsbHl7Y29uc29sZS5lcnJvcj1yfX19LE9lPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49dyksZS50aGVtZSE9PW4udGhlbWUmJmUudGhlbWV8fHR8fG4udGhlbWV9LFJlPS9bIVwiIyQlJicoKSorLC4vOjs8PT4/QFtcXFxcXFxdXmB7fH1+LV0rL2csRGU9LyheLXwtJCkvZztmdW5jdGlvbiBqZShlKXtyZXR1cm4gZS5yZXBsYWNlKFJlLFwiLVwiKS5yZXBsYWNlKERlLFwiXCIpfXZhciBUZT1mdW5jdGlvbihlKXtyZXR1cm4gUSh0ZShlKT4+PjApfTtmdW5jdGlvbiB4ZShlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmKFwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fGUuY2hhckF0KDApPT09ZS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSl9dmFyIGtlPWZ1bmN0aW9uKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV8fFwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZSYmIUFycmF5LmlzQXJyYXkoZSl9LFZlPWZ1bmN0aW9uKGUpe3JldHVyblwiX19wcm90b19fXCIhPT1lJiZcImNvbnN0cnVjdG9yXCIhPT1lJiZcInByb3RvdHlwZVwiIT09ZX07ZnVuY3Rpb24gQmUoZSx0LG4pe3ZhciByPWVbbl07a2UodCkmJmtlKHIpP3plKHIsdCk6ZVtuXT10fWZ1bmN0aW9uIHplKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTtmb3IodmFyIG89MCxzPW47bzxzLmxlbmd0aDtvKyspe3ZhciBpPXNbb107aWYoa2UoaSkpZm9yKHZhciBhIGluIGkpVmUoYSkmJkJlKGUsaVthXSxhKX1yZXR1cm4gZX12YXIgTWU9ci5jcmVhdGVDb250ZXh0KCksR2U9TWUuQ29uc3VtZXI7ZnVuY3Rpb24gTGUoZSl7dmFyIHQ9cyhNZSksbj1pKChmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlLHQpe2lmKCFlKXJldHVybiBEKDE0KTtpZihFKGUpKXt2YXIgbj1lKHQpO3JldHVyblwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fG51bGwhPT1uJiYhQXJyYXkuaXNBcnJheShuKSYmXCJvYmplY3RcIj09dHlwZW9mIG4/bjpEKDcpfXJldHVybiBBcnJheS5pc0FycmF5KGUpfHxcIm9iamVjdFwiIT10eXBlb2YgZT9EKDgpOnQ/eSh7fSx0LHt9LGUpOmV9KGUudGhlbWUsdCl9KSxbZS50aGVtZSx0XSk7cmV0dXJuIGUuY2hpbGRyZW4/ci5jcmVhdGVFbGVtZW50KE1lLlByb3ZpZGVyLHt2YWx1ZTpufSxlLmNoaWxkcmVuKTpudWxsfXZhciBGZT17fTtmdW5jdGlvbiBZZShlLHQsbil7dmFyIG89XyhlKSxpPSF4ZShlKSxhPXQuYXR0cnMsYz12b2lkIDA9PT1hP1M6YSxsPXQuY29tcG9uZW50SWQsZD12b2lkIDA9PT1sP2Z1bmN0aW9uKGUsdCl7dmFyIG49XCJzdHJpbmdcIiE9dHlwZW9mIGU/XCJzY1wiOmplKGUpO0ZlW25dPShGZVtuXXx8MCkrMTt2YXIgcj1uK1wiLVwiK1RlKFwiNS4zLjExXCIrbitGZVtuXSk7cmV0dXJuIHQ/dCtcIi1cIityOnJ9KHQuZGlzcGxheU5hbWUsdC5wYXJlbnRDb21wb25lbnRJZCk6bCxoPXQuZGlzcGxheU5hbWUscD12b2lkIDA9PT1oP2Z1bmN0aW9uKGUpe3JldHVybiB4ZShlKT9cInN0eWxlZC5cIitlOlwiU3R5bGVkKFwiK2IoZSkrXCIpXCJ9KGUpOmgsdj10LmRpc3BsYXlOYW1lJiZ0LmNvbXBvbmVudElkP2plKHQuZGlzcGxheU5hbWUpK1wiLVwiK3QuY29tcG9uZW50SWQ6dC5jb21wb25lbnRJZHx8ZCxnPW8mJmUuYXR0cnM/QXJyYXkucHJvdG90eXBlLmNvbmNhdChlLmF0dHJzLGMpLmZpbHRlcihCb29sZWFuKTpjLE49dC5zaG91bGRGb3J3YXJkUHJvcDtvJiZlLnNob3VsZEZvcndhcmRQcm9wJiYoTj10LnNob3VsZEZvcndhcmRQcm9wP2Z1bmN0aW9uKG4scixvKXtyZXR1cm4gZS5zaG91bGRGb3J3YXJkUHJvcChuLHIsbykmJnQuc2hvdWxkRm9yd2FyZFByb3AobixyLG8pfTplLnNob3VsZEZvcndhcmRQcm9wKTt2YXIgQSxDPW5ldyBvZShuLHYsbz9lLmNvbXBvbmVudFN0eWxlOnZvaWQgMCksST1DLmlzU3RhdGljJiYwPT09Yy5sZW5ndGgsUD1mdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihlLHQsbixyKXt2YXIgbz1lLmF0dHJzLGk9ZS5jb21wb25lbnRTdHlsZSxhPWUuZGVmYXVsdFByb3BzLGM9ZS5mb2xkZWRDb21wb25lbnRJZHMsbD1lLnNob3VsZEZvcndhcmRQcm9wLGQ9ZS5zdHlsZWRDb21wb25lbnRJZCxoPWUudGFyZ2V0LHA9ZnVuY3Rpb24oZSx0LG4pe3ZvaWQgMD09PWUmJihlPXcpO3ZhciByPXkoe30sdCx7dGhlbWU6ZX0pLG89e307cmV0dXJuIG4uZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIHQsbixzLGk9ZTtmb3IodCBpbiBFKGkpJiYoaT1pKHIpKSxpKXJbdF09b1t0XT1cImNsYXNzTmFtZVwiPT09dD8obj1vW3RdLHM9aVt0XSxuJiZzP24rXCIgXCIrczpufHxzKTppW3RdfSkpLFtyLG9dfShPZSh0LHMoTWUpLGEpfHx3LHQsbyksbT1wWzBdLHY9cFsxXSxnPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPXBlKCkscz1mZSgpLGk9dD9lLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKHcsbyxzKTplLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKG4sbyxzKTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYhdCYmciYmcihpKSxpfShpLHIsbSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2Uud2FyblRvb01hbnlDbGFzc2VzOnZvaWQgMCksUz1uLGI9di4kYXN8fHQuJGFzfHx2LmFzfHx0LmFzfHxoLF89eGUoYiksTj12IT09dD95KHt9LHQse30sdik6dCxBPXt9O2Zvcih2YXIgQyBpbiBOKVwiJFwiIT09Q1swXSYmXCJhc1wiIT09QyYmKFwiZm9yd2FyZGVkQXNcIj09PUM/QS5hcz1OW0NdOihsP2woQyxmLGIpOiFffHxmKEMpKSYmKEFbQ109TltDXSkpO3JldHVybiB0LnN0eWxlJiZ2LnN0eWxlIT09dC5zdHlsZSYmKEEuc3R5bGU9eSh7fSx0LnN0eWxlLHt9LHYuc3R5bGUpKSxBLmNsYXNzTmFtZT1BcnJheS5wcm90b3R5cGUuY29uY2F0KGMsZCxnIT09ZD9nOm51bGwsdC5jbGFzc05hbWUsdi5jbGFzc05hbWUpLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKSxBLnJlZj1TLHUoYixBKX0oQSxlLHQsSSl9O3JldHVybiBQLmRpc3BsYXlOYW1lPXAsKEE9ci5mb3J3YXJkUmVmKFApKS5hdHRycz1nLEEuY29tcG9uZW50U3R5bGU9QyxBLmRpc3BsYXlOYW1lPXAsQS5zaG91bGRGb3J3YXJkUHJvcD1OLEEuZm9sZGVkQ29tcG9uZW50SWRzPW8/QXJyYXkucHJvdG90eXBlLmNvbmNhdChlLmZvbGRlZENvbXBvbmVudElkcyxlLnN0eWxlZENvbXBvbmVudElkKTpTLEEuc3R5bGVkQ29tcG9uZW50SWQ9dixBLnRhcmdldD1vP2UudGFyZ2V0OmUsQS53aXRoQ29tcG9uZW50PWZ1bmN0aW9uKGUpe3ZhciByPXQuY29tcG9uZW50SWQsbz1mdW5jdGlvbihlLHQpe2lmKG51bGw9PWUpcmV0dXJue307dmFyIG4scixvPXt9LHM9T2JqZWN0LmtleXMoZSk7Zm9yKHI9MDtyPHMubGVuZ3RoO3IrKyluPXNbcl0sdC5pbmRleE9mKG4pPj0wfHwob1tuXT1lW25dKTtyZXR1cm4gb30odCxbXCJjb21wb25lbnRJZFwiXSkscz1yJiZyK1wiLVwiKyh4ZShlKT9lOmplKGIoZSkpKTtyZXR1cm4gWWUoZSx5KHt9LG8se2F0dHJzOmcsY29tcG9uZW50SWQ6c30pLG4pfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQSxcImRlZmF1bHRQcm9wc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZm9sZGVkRGVmYXVsdFByb3BzfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fZm9sZGVkRGVmYXVsdFByb3BzPW8/emUoe30sZS5kZWZhdWx0UHJvcHMsdCk6dH19KSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoUGUocCx2KSxBLndhcm5Ub29NYW55Q2xhc3Nlcz1mdW5jdGlvbihlLHQpe3ZhciBuPXt9LHI9ITE7cmV0dXJuIGZ1bmN0aW9uKG8pe2lmKCFyJiYobltvXT0hMCxPYmplY3Qua2V5cyhuKS5sZW5ndGg+PTIwMCkpe3ZhciBzPXQ/JyB3aXRoIHRoZSBpZCBvZiBcIicrdCsnXCInOlwiXCI7Y29uc29sZS53YXJuKFwiT3ZlciAyMDAgY2xhc3NlcyB3ZXJlIGdlbmVyYXRlZCBmb3IgY29tcG9uZW50IFwiK2UrcytcIi5cXG5Db25zaWRlciB1c2luZyB0aGUgYXR0cnMgbWV0aG9kLCB0b2dldGhlciB3aXRoIGEgc3R5bGUgb2JqZWN0IGZvciBmcmVxdWVudGx5IGNoYW5nZWQgc3R5bGVzLlxcbkV4YW1wbGU6XFxuICBjb25zdCBDb21wb25lbnQgPSBzdHlsZWQuZGl2LmF0dHJzKHByb3BzID0+ICh7XFxuICAgIHN0eWxlOiB7XFxuICAgICAgYmFja2dyb3VuZDogcHJvcHMuYmFja2dyb3VuZCxcXG4gICAgfSxcXG4gIH0pKWB3aWR0aDogMTAwJTtgXFxuXFxuICA8Q29tcG9uZW50IC8+XCIpLHI9ITAsbj17fX19fShwLHYpKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQSxcInRvU3RyaW5nXCIse3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCIuXCIrQS5zdHlsZWRDb21wb25lbnRJZH19KSxpJiZtKEEsZSx7YXR0cnM6ITAsY29tcG9uZW50U3R5bGU6ITAsZGlzcGxheU5hbWU6ITAsZm9sZGVkQ29tcG9uZW50SWRzOiEwLHNob3VsZEZvcndhcmRQcm9wOiEwLHN0eWxlZENvbXBvbmVudElkOiEwLHRhcmdldDohMCx3aXRoQ29tcG9uZW50OiEwfSksQX12YXIgcWU9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uIGUodCxyLG8pe2lmKHZvaWQgMD09PW8mJihvPXcpLCFuKHIpKXJldHVybiBEKDEsU3RyaW5nKHIpKTt2YXIgcz1mdW5jdGlvbigpe3JldHVybiB0KHIsbyxBZS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKSl9O3JldHVybiBzLndpdGhDb25maWc9ZnVuY3Rpb24obil7cmV0dXJuIGUodCxyLHkoe30sbyx7fSxuKSl9LHMuYXR0cnM9ZnVuY3Rpb24obil7cmV0dXJuIGUodCxyLHkoe30sbyx7YXR0cnM6QXJyYXkucHJvdG90eXBlLmNvbmNhdChvLmF0dHJzLG4pLmZpbHRlcihCb29sZWFuKX0pKX0sc30oWWUsZSl9O1tcImFcIixcImFiYnJcIixcImFkZHJlc3NcIixcImFyZWFcIixcImFydGljbGVcIixcImFzaWRlXCIsXCJhdWRpb1wiLFwiYlwiLFwiYmFzZVwiLFwiYmRpXCIsXCJiZG9cIixcImJpZ1wiLFwiYmxvY2txdW90ZVwiLFwiYm9keVwiLFwiYnJcIixcImJ1dHRvblwiLFwiY2FudmFzXCIsXCJjYXB0aW9uXCIsXCJjaXRlXCIsXCJjb2RlXCIsXCJjb2xcIixcImNvbGdyb3VwXCIsXCJkYXRhXCIsXCJkYXRhbGlzdFwiLFwiZGRcIixcImRlbFwiLFwiZGV0YWlsc1wiLFwiZGZuXCIsXCJkaWFsb2dcIixcImRpdlwiLFwiZGxcIixcImR0XCIsXCJlbVwiLFwiZW1iZWRcIixcImZpZWxkc2V0XCIsXCJmaWdjYXB0aW9uXCIsXCJmaWd1cmVcIixcImZvb3RlclwiLFwiZm9ybVwiLFwiaDFcIixcImgyXCIsXCJoM1wiLFwiaDRcIixcImg1XCIsXCJoNlwiLFwiaGVhZFwiLFwiaGVhZGVyXCIsXCJoZ3JvdXBcIixcImhyXCIsXCJodG1sXCIsXCJpXCIsXCJpZnJhbWVcIixcImltZ1wiLFwiaW5wdXRcIixcImluc1wiLFwia2JkXCIsXCJrZXlnZW5cIixcImxhYmVsXCIsXCJsZWdlbmRcIixcImxpXCIsXCJsaW5rXCIsXCJtYWluXCIsXCJtYXBcIixcIm1hcmtcIixcIm1hcnF1ZWVcIixcIm1lbnVcIixcIm1lbnVpdGVtXCIsXCJtZXRhXCIsXCJtZXRlclwiLFwibmF2XCIsXCJub3NjcmlwdFwiLFwib2JqZWN0XCIsXCJvbFwiLFwib3B0Z3JvdXBcIixcIm9wdGlvblwiLFwib3V0cHV0XCIsXCJwXCIsXCJwYXJhbVwiLFwicGljdHVyZVwiLFwicHJlXCIsXCJwcm9ncmVzc1wiLFwicVwiLFwicnBcIixcInJ0XCIsXCJydWJ5XCIsXCJzXCIsXCJzYW1wXCIsXCJzY3JpcHRcIixcInNlY3Rpb25cIixcInNlbGVjdFwiLFwic21hbGxcIixcInNvdXJjZVwiLFwic3BhblwiLFwic3Ryb25nXCIsXCJzdHlsZVwiLFwic3ViXCIsXCJzdW1tYXJ5XCIsXCJzdXBcIixcInRhYmxlXCIsXCJ0Ym9keVwiLFwidGRcIixcInRleHRhcmVhXCIsXCJ0Zm9vdFwiLFwidGhcIixcInRoZWFkXCIsXCJ0aW1lXCIsXCJ0aXRsZVwiLFwidHJcIixcInRyYWNrXCIsXCJ1XCIsXCJ1bFwiLFwidmFyXCIsXCJ2aWRlb1wiLFwid2JyXCIsXCJjaXJjbGVcIixcImNsaXBQYXRoXCIsXCJkZWZzXCIsXCJlbGxpcHNlXCIsXCJmb3JlaWduT2JqZWN0XCIsXCJnXCIsXCJpbWFnZVwiLFwibGluZVwiLFwibGluZWFyR3JhZGllbnRcIixcIm1hcmtlclwiLFwibWFza1wiLFwicGF0aFwiLFwicGF0dGVyblwiLFwicG9seWdvblwiLFwicG9seWxpbmVcIixcInJhZGlhbEdyYWRpZW50XCIsXCJyZWN0XCIsXCJzdG9wXCIsXCJzdmdcIixcInRleHRcIixcInRleHRQYXRoXCIsXCJ0c3BhblwiXS5mb3JFYWNoKChmdW5jdGlvbihlKXtxZVtlXT1xZShlKX0pKTt2YXIgSGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7dGhpcy5ydWxlcz1lLHRoaXMuY29tcG9uZW50SWQ9dCx0aGlzLmlzU3RhdGljPW5lKGUpLFgucmVnaXN0ZXJJZCh0aGlzLmNvbXBvbmVudElkKzEpfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNyZWF0ZVN0eWxlcz1mdW5jdGlvbihlLHQsbixyKXt2YXIgbz1yKF9lKHRoaXMucnVsZXMsdCxuLHIpLmpvaW4oXCJcIiksXCJcIikscz10aGlzLmNvbXBvbmVudElkK2U7bi5pbnNlcnRSdWxlcyhzLHMsbyl9LHQucmVtb3ZlU3R5bGVzPWZ1bmN0aW9uKGUsdCl7dC5jbGVhclJ1bGVzKHRoaXMuY29tcG9uZW50SWQrZSl9LHQucmVuZGVyU3R5bGVzPWZ1bmN0aW9uKGUsdCxuLHIpe2U+MiYmWC5yZWdpc3RlcklkKHRoaXMuY29tcG9uZW50SWQrZSksdGhpcy5yZW1vdmVTdHlsZXMoZSxuKSx0aGlzLmNyZWF0ZVN0eWxlcyhlLHQsbixyKX0sZX0oKTtmdW5jdGlvbiAkZShlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLG89MTtvPHQ7bysrKW5bby0xXT1hcmd1bWVudHNbb107dmFyIGk9QWUuYXBwbHkodm9pZCAwLFtlXS5jb25jYXQobikpLGE9XCJzYy1nbG9iYWwtXCIrVGUoSlNPTi5zdHJpbmdpZnkoaSkpLHU9bmV3IEhlKGksYSk7ZnVuY3Rpb24gZChlKXt2YXIgdD1wZSgpLG49ZmUoKSxvPXMoTWUpLGQ9Yyh0LmFsbG9jYXRlR1NJbnN0YW5jZShhKSkuY3VycmVudDtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZyLkNoaWxkcmVuLmNvdW50KGUuY2hpbGRyZW4pJiZjb25zb2xlLndhcm4oXCJUaGUgZ2xvYmFsIHN0eWxlIGNvbXBvbmVudCBcIithK1wiIHdhcyBnaXZlbiBjaGlsZCBKU1guIGNyZWF0ZUdsb2JhbFN0eWxlIGRvZXMgbm90IHJlbmRlciBjaGlsZHJlbi5cIiksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmaS5zb21lKChmdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmLTEhPT1lLmluZGV4T2YoXCJAaW1wb3J0XCIpfSkpJiZjb25zb2xlLndhcm4oXCJQbGVhc2UgZG8gbm90IHVzZSBAaW1wb3J0IENTUyBzeW50YXggaW4gY3JlYXRlR2xvYmFsU3R5bGUgYXQgdGhpcyB0aW1lLCBhcyB0aGUgQ1NTT00gQVBJcyB3ZSB1c2UgaW4gcHJvZHVjdGlvbiBkbyBub3QgaGFuZGxlIGl0IHdlbGwuIEluc3RlYWQsIHdlIHJlY29tbWVuZCB1c2luZyBhIGxpYnJhcnkgc3VjaCBhcyByZWFjdC1oZWxtZXQgdG8gaW5qZWN0IGEgdHlwaWNhbCA8bGluaz4gbWV0YSB0YWcgdG8gdGhlIHN0eWxlc2hlZXQsIG9yIHNpbXBseSBlbWJlZGRpbmcgaXQgbWFudWFsbHkgaW4geW91ciBpbmRleC5odG1sIDxoZWFkPiBzZWN0aW9uIGZvciBhIHNpbXBsZXIgYXBwLlwiKSx0LnNlcnZlciYmaChkLGUsdCxvLG4pLGwoKGZ1bmN0aW9uKCl7aWYoIXQuc2VydmVyKXJldHVybiBoKGQsZSx0LG8sbiksZnVuY3Rpb24oKXtyZXR1cm4gdS5yZW1vdmVTdHlsZXMoZCx0KX19KSxbZCxlLHQsbyxuXSksbnVsbH1mdW5jdGlvbiBoKGUsdCxuLHIsbyl7aWYodS5pc1N0YXRpYyl1LnJlbmRlclN0eWxlcyhlLFAsbixvKTtlbHNle3ZhciBzPXkoe30sdCx7dGhlbWU6T2UodCxyLGQuZGVmYXVsdFByb3BzKX0pO3UucmVuZGVyU3R5bGVzKGUscyxuLG8pfX1yZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZQZShhKSxyLm1lbW8oZCl9ZnVuY3Rpb24gV2UoZSl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmXCJSZWFjdE5hdGl2ZVwiPT09bmF2aWdhdG9yLnByb2R1Y3QmJmNvbnNvbGUud2FybihcImBrZXlmcmFtZXNgIGNhbm5vdCBiZSB1c2VkIG9uIFJlYWN0TmF0aXZlLCBvbmx5IG9uIHRoZSB3ZWIuIFRvIGRvIGFuaW1hdGlvbiBpbiBSZWFjdE5hdGl2ZSBwbGVhc2UgdXNlIEFuaW1hdGVkLlwiKTtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07dmFyIG89QWUuYXBwbHkodm9pZCAwLFtlXS5jb25jYXQobikpLmpvaW4oXCJcIikscz1UZShvKTtyZXR1cm4gbmV3IHllKHMsbyl9dmFyIFVlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3ZhciBlPXRoaXM7dGhpcy5fZW1pdFNoZWV0Q1NTPWZ1bmN0aW9uKCl7dmFyIHQ9ZS5pbnN0YW5jZS50b1N0cmluZygpO2lmKCF0KXJldHVyblwiXCI7dmFyIG49WSgpO3JldHVyblwiPHN0eWxlIFwiK1tuJiYnbm9uY2U9XCInK24rJ1wiJyxOKyc9XCJ0cnVlXCInLCdkYXRhLXN0eWxlZC12ZXJzaW9uPVwiNS4zLjExXCInXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIikrXCI+XCIrdCtcIjwvc3R5bGU+XCJ9LHRoaXMuZ2V0U3R5bGVUYWdzPWZ1bmN0aW9uKCl7cmV0dXJuIGUuc2VhbGVkP0QoMik6ZS5fZW1pdFNoZWV0Q1NTKCl9LHRoaXMuZ2V0U3R5bGVFbGVtZW50PWZ1bmN0aW9uKCl7dmFyIHQ7aWYoZS5zZWFsZWQpcmV0dXJuIEQoMik7dmFyIG49KCh0PXt9KVtOXT1cIlwiLHRbXCJkYXRhLXN0eWxlZC12ZXJzaW9uXCJdPVwiNS4zLjExXCIsdC5kYW5nZXJvdXNseVNldElubmVySFRNTD17X19odG1sOmUuaW5zdGFuY2UudG9TdHJpbmcoKX0sdCksbz1ZKCk7cmV0dXJuIG8mJihuLm5vbmNlPW8pLFtyLmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiLHkoe30sbix7a2V5Olwic2MtMC0wXCJ9KSldfSx0aGlzLnNlYWw9ZnVuY3Rpb24oKXtlLnNlYWxlZD0hMH0sdGhpcy5pbnN0YW5jZT1uZXcgWCh7aXNTZXJ2ZXI6ITB9KSx0aGlzLnNlYWxlZD0hMX12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5jb2xsZWN0U3R5bGVzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnNlYWxlZD9EKDIpOnIuY3JlYXRlRWxlbWVudChtZSx7c2hlZXQ6dGhpcy5pbnN0YW5jZX0sZSl9LHQuaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtPWZ1bmN0aW9uKGUpe3JldHVybiBEKDMpfSxlfSgpLEplPWZ1bmN0aW9uKGUpe3ZhciB0PXIuZm9yd2FyZFJlZigoZnVuY3Rpb24odCxuKXt2YXIgbz1zKE1lKSxpPWUuZGVmYXVsdFByb3BzLGE9T2UodCxvLGkpO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJnZvaWQgMD09PWEmJmNvbnNvbGUud2FybignW3dpdGhUaGVtZV0gWW91IGFyZSBub3QgdXNpbmcgYSBUaGVtZVByb3ZpZGVyIG5vciBwYXNzaW5nIGEgdGhlbWUgcHJvcCBvciBhIHRoZW1lIGluIGRlZmF1bHRQcm9wcyBpbiBjb21wb25lbnQgY2xhc3MgXCInK2IoZSkrJ1wiJyksci5jcmVhdGVFbGVtZW50KGUseSh7fSx0LHt0aGVtZTphLHJlZjpufSkpfSkpO3JldHVybiBtKHQsZSksdC5kaXNwbGF5TmFtZT1cIldpdGhUaGVtZShcIitiKGUpK1wiKVwiLHR9LFhlPWZ1bmN0aW9uKCl7cmV0dXJuIHMoTWUpfSxaZT17U3R5bGVTaGVldDpYLG1hc3RlclNoZWV0OmRlfTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiZcIlJlYWN0TmF0aXZlXCI9PT1uYXZpZ2F0b3IucHJvZHVjdCYmY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB5b3UndmUgaW1wb3J0ZWQgJ3N0eWxlZC1jb21wb25lbnRzJyBvbiBSZWFjdCBOYXRpdmUuXFxuUGVyaGFwcyB5b3UncmUgbG9va2luZyB0byBpbXBvcnQgJ3N0eWxlZC1jb21wb25lbnRzL25hdGl2ZSc/XFxuUmVhZCBtb3JlIGFib3V0IHRoaXMgYXQgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYmFzaWNzI3JlYWN0LW5hdGl2ZVwiKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInRlc3RcIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYod2luZG93W1wiX19zdHlsZWQtY29tcG9uZW50cy1pbml0X19cIl09d2luZG93W1wiX19zdHlsZWQtY29tcG9uZW50cy1pbml0X19cIl18fDAsMT09PXdpbmRvd1tcIl9fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fXCJdJiZjb25zb2xlLndhcm4oXCJJdCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzZXZlcmFsIGluc3RhbmNlcyBvZiAnc3R5bGVkLWNvbXBvbmVudHMnIGluaXRpYWxpemVkIGluIHRoaXMgYXBwbGljYXRpb24uIFRoaXMgbWF5IGNhdXNlIGR5bmFtaWMgc3R5bGVzIHRvIG5vdCByZW5kZXIgcHJvcGVybHksIGVycm9ycyBkdXJpbmcgdGhlIHJlaHlkcmF0aW9uIHByb2Nlc3MsIGEgbWlzc2luZyB0aGVtZSBwcm9wLCBhbmQgbWFrZXMgeW91ciBhcHBsaWNhdGlvbiBiaWdnZXIgd2l0aG91dCBnb29kIHJlYXNvbi5cXG5cXG5TZWUgaHR0cHM6Ly9zLWMuc2gvMkJBWHplZCBmb3IgbW9yZSBpbmZvLlwiKSx3aW5kb3dbXCJfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfX1wiXSs9MSk7ZXhwb3J0IGRlZmF1bHQgcWU7ZXhwb3J0e1VlIGFzIFNlcnZlclN0eWxlU2hlZXQsdWUgYXMgU3R5bGVTaGVldENvbnN1bWVyLGNlIGFzIFN0eWxlU2hlZXRDb250ZXh0LG1lIGFzIFN0eWxlU2hlZXRNYW5hZ2VyLEdlIGFzIFRoZW1lQ29uc3VtZXIsTWUgYXMgVGhlbWVDb250ZXh0LExlIGFzIFRoZW1lUHJvdmlkZXIsWmUgYXMgX19QUklWQVRFX18sJGUgYXMgY3JlYXRlR2xvYmFsU3R5bGUsQWUgYXMgY3NzLF8gYXMgaXNTdHlsZWRDb21wb25lbnQsV2UgYXMga2V5ZnJhbWVzLFhlIGFzIHVzZVRoZW1lLEEgYXMgdmVyc2lvbixKZSBhcyB3aXRoVGhlbWV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVkLWNvbXBvbmVudHMuYnJvd3Nlci5lc20uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/styled-components/dist/styled-components.browser.esm.js\n"));

/***/ }),

/***/ "./node_modules/@swc/helpers/esm/_tagged_template_literal.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_tagged_template_literal.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: function() { return /* binding */ _tagged_template_literal; },\n/* harmony export */   _tagged_template_literal: function() { return /* binding */ _tagged_template_literal; }\n/* harmony export */ });\nfunction _tagged_template_literal(strings, raw) {\n    if (!raw) raw = strings.slice(0);\n\n    return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2VzbS9fdGFnZ2VkX3RlbXBsYXRlX2xpdGVyYWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTztBQUNQOztBQUVBLDREQUE0RCxPQUFPLDZCQUE2QjtBQUNoRztBQUN5QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2VzbS9fdGFnZ2VkX3RlbXBsYXRlX2xpdGVyYWwuanM/ODcxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gX3RhZ2dlZF90ZW1wbGF0ZV9saXRlcmFsKHN0cmluZ3MsIHJhdykge1xuICAgIGlmICghcmF3KSByYXcgPSBzdHJpbmdzLnNsaWNlKDApO1xuXG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3RyaW5ncywgeyByYXc6IHsgdmFsdWU6IE9iamVjdC5mcmVlemUocmF3KSB9IH0pKTtcbn1cbmV4cG9ydCB7IF90YWdnZWRfdGVtcGxhdGVfbGl0ZXJhbCBhcyBfIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@swc/helpers/esm/_tagged_template_literal.js\n"));

/***/ }),

/***/ "./node_modules/@swc/helpers/esm/_ts_decorate.js":
/*!*******************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_ts_decorate.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: function() { return /* reexport safe */ tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate; },\n/* harmony export */   _ts_decorate: function() { return /* reexport safe */ tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2VzbS9fdHNfZGVjb3JhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9FIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL190c19kZWNvcmF0ZS5qcz83YTcyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IF9fZGVjb3JhdGUgYXMgXywgX19kZWNvcmF0ZSBhcyBfdHNfZGVjb3JhdGUgfSBmcm9tIFwidHNsaWJcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@swc/helpers/esm/_ts_decorate.js\n"));

/***/ }),

/***/ "./node_modules/mobx-keystone/dist/mobx-keystone.esm.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/mobx-keystone/dist/mobx-keystone.esm.mjs ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionContextActionType: function() { return /* binding */ ActionContextActionType; },\n/* harmony export */   ActionContextAsyncStepType: function() { return /* binding */ ActionContextAsyncStepType; },\n/* harmony export */   ActionTrackingResult: function() { return /* binding */ ActionTrackingResult; },\n/* harmony export */   ArraySet: function() { return /* binding */ ArraySet; },\n/* harmony export */   ArraySetTypeInfo: function() { return /* binding */ ArraySetTypeInfo; },\n/* harmony export */   ArrayTypeInfo: function() { return /* binding */ ArrayTypeInfo; },\n/* harmony export */   BaseDataModel: function() { return /* binding */ BaseDataModel; },\n/* harmony export */   BaseModel: function() { return /* binding */ BaseModel; },\n/* harmony export */   BooleanTypeInfo: function() { return /* binding */ BooleanTypeInfo; },\n/* harmony export */   BuiltInAction: function() { return /* binding */ BuiltInAction; },\n/* harmony export */   DataModel: function() { return /* binding */ DataModel; },\n/* harmony export */   Draft: function() { return /* binding */ Draft; },\n/* harmony export */   ExtendedDataModel: function() { return /* binding */ ExtendedDataModel; },\n/* harmony export */   ExtendedModel: function() { return /* binding */ ExtendedModel; },\n/* harmony export */   Frozen: function() { return /* binding */ Frozen; },\n/* harmony export */   FrozenCheckMode: function() { return /* binding */ FrozenCheckMode; },\n/* harmony export */   FrozenTypeInfo: function() { return /* binding */ FrozenTypeInfo; },\n/* harmony export */   HookAction: function() { return /* binding */ HookAction; },\n/* harmony export */   InternalPatchRecorder: function() { return /* binding */ InternalPatchRecorder; },\n/* harmony export */   LiteralTypeInfo: function() { return /* binding */ LiteralTypeInfo; },\n/* harmony export */   MobxKeystoneError: function() { return /* binding */ MobxKeystoneError; },\n/* harmony export */   Model: function() { return /* binding */ Model; },\n/* harmony export */   ModelAutoTypeCheckingMode: function() { return /* binding */ ModelAutoTypeCheckingMode; },\n/* harmony export */   ModelTypeInfo: function() { return /* binding */ ModelTypeInfo; },\n/* harmony export */   NumberTypeInfo: function() { return /* binding */ NumberTypeInfo; },\n/* harmony export */   ObjectMap: function() { return /* binding */ ObjectMap; },\n/* harmony export */   ObjectMapTypeInfo: function() { return /* binding */ ObjectMapTypeInfo; },\n/* harmony export */   ObjectTypeInfo: function() { return /* binding */ ObjectTypeInfo; },\n/* harmony export */   OrTypeInfo: function() { return /* binding */ OrTypeInfo; },\n/* harmony export */   RecordTypeInfo: function() { return /* binding */ RecordTypeInfo; },\n/* harmony export */   Ref: function() { return /* binding */ Ref; },\n/* harmony export */   RefTypeInfo: function() { return /* binding */ RefTypeInfo; },\n/* harmony export */   RefinementTypeInfo: function() { return /* binding */ RefinementTypeInfo; },\n/* harmony export */   SandboxManager: function() { return /* binding */ SandboxManager; },\n/* harmony export */   StringTypeInfo: function() { return /* binding */ StringTypeInfo; },\n/* harmony export */   TagTypeInfo: function() { return /* binding */ TagTypeInfo; },\n/* harmony export */   TupleTypeInfo: function() { return /* binding */ TupleTypeInfo; },\n/* harmony export */   TypeCheckError: function() { return /* binding */ TypeCheckError; },\n/* harmony export */   TypeInfo: function() { return /* binding */ TypeInfo; },\n/* harmony export */   UncheckedTypeInfo: function() { return /* binding */ UncheckedTypeInfo; },\n/* harmony export */   UndoEventType: function() { return /* binding */ UndoEventType; },\n/* harmony export */   UndoManager: function() { return /* binding */ UndoManager; },\n/* harmony export */   UndoStore: function() { return /* binding */ UndoStore; },\n/* harmony export */   WalkTreeMode: function() { return /* binding */ WalkTreeMode; },\n/* harmony export */   _async: function() { return /* binding */ _async; },\n/* harmony export */   _await: function() { return /* binding */ _await; },\n/* harmony export */   abstractModelClass: function() { return /* binding */ abstractModelClass; },\n/* harmony export */   actionCallToReduxAction: function() { return /* binding */ actionCallToReduxAction; },\n/* harmony export */   actionTrackingMiddleware: function() { return /* binding */ actionTrackingMiddleware; },\n/* harmony export */   addActionMiddleware: function() { return /* binding */ addActionMiddleware; },\n/* harmony export */   addHiddenProp: function() { return /* binding */ addHiddenProp; },\n/* harmony export */   addLateInitializationFunction: function() { return /* binding */ addLateInitializationFunction; },\n/* harmony export */   applyAction: function() { return /* binding */ applyAction; },\n/* harmony export */   applyDelete: function() { return /* binding */ applyDelete; },\n/* harmony export */   applyMethodCall: function() { return /* binding */ applyMethodCall; },\n/* harmony export */   applyPatches: function() { return /* binding */ applyPatches; },\n/* harmony export */   applySerializedActionAndSyncNewModelIds: function() { return /* binding */ applySerializedActionAndSyncNewModelIds; },\n/* harmony export */   applySerializedActionAndTrackNewModelIds: function() { return /* binding */ applySerializedActionAndTrackNewModelIds; },\n/* harmony export */   applySet: function() { return /* binding */ applySet; },\n/* harmony export */   applySnapshot: function() { return /* binding */ applySnapshot; },\n/* harmony export */   arrayActions: function() { return /* binding */ arrayActions; },\n/* harmony export */   arraySet: function() { return /* binding */ arraySet; },\n/* harmony export */   arrayToMapTransform: function() { return /* binding */ arrayToMapTransform; },\n/* harmony export */   arrayToSetTransform: function() { return /* binding */ arrayToSetTransform; },\n/* harmony export */   asMap: function() { return /* binding */ asMap; },\n/* harmony export */   asReduxStore: function() { return /* binding */ asReduxStore; },\n/* harmony export */   asSet: function() { return /* binding */ asSet; },\n/* harmony export */   assertIsDataModel: function() { return /* binding */ assertIsDataModel; },\n/* harmony export */   assertIsDataModelClass: function() { return /* binding */ assertIsDataModelClass; },\n/* harmony export */   assertIsFunction: function() { return /* binding */ assertIsFunction; },\n/* harmony export */   assertIsMap: function() { return /* binding */ assertIsMap; },\n/* harmony export */   assertIsModel: function() { return /* binding */ assertIsModel; },\n/* harmony export */   assertIsModelClass: function() { return /* binding */ assertIsModelClass; },\n/* harmony export */   assertIsObject: function() { return /* binding */ assertIsObject; },\n/* harmony export */   assertIsObservableArray: function() { return /* binding */ assertIsObservableArray; },\n/* harmony export */   assertIsObservableObject: function() { return /* binding */ assertIsObservableObject; },\n/* harmony export */   assertIsPlainObject: function() { return /* binding */ assertIsPlainObject; },\n/* harmony export */   assertIsPrimitive: function() { return /* binding */ assertIsPrimitive; },\n/* harmony export */   assertIsSet: function() { return /* binding */ assertIsSet; },\n/* harmony export */   assertIsString: function() { return /* binding */ assertIsString; },\n/* harmony export */   assertIsTreeNode: function() { return /* binding */ assertIsTreeNode; },\n/* harmony export */   assertTweakedObject: function() { return /* binding */ assertTweakedObject; },\n/* harmony export */   baseDataModelPropNames: function() { return /* binding */ baseDataModelPropNames; },\n/* harmony export */   baseModelPropNames: function() { return /* binding */ baseModelPropNames; },\n/* harmony export */   cannotSerialize: function() { return /* binding */ cannotSerialize; },\n/* harmony export */   clone: function() { return /* binding */ clone; },\n/* harmony export */   computedTree: function() { return /* binding */ computedTree; },\n/* harmony export */   computedWalkTreeAggregate: function() { return /* binding */ computedWalkTreeAggregate; },\n/* harmony export */   connectReduxDevTools: function() { return /* binding */ connectReduxDevTools; },\n/* harmony export */   createContext: function() { return /* binding */ createContext; },\n/* harmony export */   customRef: function() { return /* binding */ customRef; },\n/* harmony export */   decorateWrapMethodOrField: function() { return /* binding */ decorateWrapMethodOrField; },\n/* harmony export */   decoratedModel: function() { return /* binding */ decoratedModel; },\n/* harmony export */   deepEquals: function() { return /* binding */ deepEquals; },\n/* harmony export */   deleteFromArray: function() { return /* binding */ deleteFromArray; },\n/* harmony export */   deserializeActionCall: function() { return /* binding */ deserializeActionCall; },\n/* harmony export */   deserializeActionCallArgument: function() { return /* binding */ deserializeActionCallArgument; },\n/* harmony export */   detach: function() { return /* binding */ detach; },\n/* harmony export */   draft: function() { return /* binding */ draft; },\n/* harmony export */   failure: function() { return /* binding */ failure; },\n/* harmony export */   fastGetParent: function() { return /* binding */ fastGetParent; },\n/* harmony export */   fastGetParentIncludingDataObjects: function() { return /* binding */ fastGetParentIncludingDataObjects; },\n/* harmony export */   fastGetParentPath: function() { return /* binding */ fastGetParentPath; },\n/* harmony export */   fastGetParentPathIncludingDataObjects: function() { return /* binding */ fastGetParentPathIncludingDataObjects; },\n/* harmony export */   fastGetRoot: function() { return /* binding */ fastGetRoot; },\n/* harmony export */   fastGetRootPath: function() { return /* binding */ fastGetRootPath; },\n/* harmony export */   fastGetRootStore: function() { return /* binding */ fastGetRootStore; },\n/* harmony export */   fastIsModelDataObject: function() { return /* binding */ fastIsModelDataObject; },\n/* harmony export */   fastIsRootStore: function() { return /* binding */ fastIsRootStore; },\n/* harmony export */   findChildren: function() { return /* binding */ findChildren; },\n/* harmony export */   findParent: function() { return /* binding */ findParent; },\n/* harmony export */   findParentPath: function() { return /* binding */ findParentPath; },\n/* harmony export */   flow: function() { return /* binding */ flow; },\n/* harmony export */   fromSnapshot: function() { return /* binding */ fromSnapshot; },\n/* harmony export */   fromSnapshotOverrideTypeSymbol: function() { return /* binding */ fromSnapshotOverrideTypeSymbol; },\n/* harmony export */   frozen: function() { return /* binding */ frozen; },\n/* harmony export */   frozenKey: function() { return /* binding */ frozenKey; },\n/* harmony export */   getActionMiddlewares: function() { return /* binding */ getActionMiddlewares; },\n/* harmony export */   getChildrenObjects: function() { return /* binding */ getChildrenObjects; },\n/* harmony export */   getCurrentActionContext: function() { return /* binding */ getCurrentActionContext; },\n/* harmony export */   getDataModelMetadata: function() { return /* binding */ getDataModelMetadata; },\n/* harmony export */   getGlobalConfig: function() { return /* binding */ getGlobalConfig; },\n/* harmony export */   getMobxVersion: function() { return /* binding */ getMobxVersion; },\n/* harmony export */   getModelIdPropertyName: function() { return /* binding */ getModelIdPropertyName; },\n/* harmony export */   getModelMetadata: function() { return /* binding */ getModelMetadata; },\n/* harmony export */   getModelPropDefaultValue: function() { return /* binding */ getModelPropDefaultValue; },\n/* harmony export */   getModelRefId: function() { return /* binding */ getModelRefId; },\n/* harmony export */   getNodeSandboxManager: function() { return /* binding */ getNodeSandboxManager; },\n/* harmony export */   getParent: function() { return /* binding */ getParent; },\n/* harmony export */   getParentPath: function() { return /* binding */ getParentPath; },\n/* harmony export */   getParentToChildPath: function() { return /* binding */ getParentToChildPath; },\n/* harmony export */   getRefsResolvingTo: function() { return /* binding */ getRefsResolvingTo; },\n/* harmony export */   getRoot: function() { return /* binding */ getRoot; },\n/* harmony export */   getRootPath: function() { return /* binding */ getRootPath; },\n/* harmony export */   getRootStore: function() { return /* binding */ getRootStore; },\n/* harmony export */   getSnapshot: function() { return /* binding */ getSnapshot; },\n/* harmony export */   getTypeInfo: function() { return /* binding */ getTypeInfo; },\n/* harmony export */   idProp: function() { return /* binding */ idProp; },\n/* harmony export */   identityFn: function() { return /* binding */ identityFn; },\n/* harmony export */   inDevMode: function() { return /* binding */ inDevMode; },\n/* harmony export */   internalApplyDelete: function() { return /* binding */ internalApplyDelete; },\n/* harmony export */   internalApplyMethodCall: function() { return /* binding */ internalApplyMethodCall; },\n/* harmony export */   internalApplyPatches: function() { return /* binding */ internalApplyPatches; },\n/* harmony export */   internalApplySnapshot: function() { return /* binding */ internalApplySnapshot; },\n/* harmony export */   internalCustomRef: function() { return /* binding */ internalCustomRef; },\n/* harmony export */   internalFromSnapshot: function() { return /* binding */ internalFromSnapshot; },\n/* harmony export */   internalPatchRecorder: function() { return /* binding */ internalPatchRecorder; },\n/* harmony export */   isArray: function() { return /* binding */ isArray; },\n/* harmony export */   isBuiltInAction: function() { return /* binding */ isBuiltInAction; },\n/* harmony export */   isChildOfParent: function() { return /* binding */ isChildOfParent; },\n/* harmony export */   isComputedTreeNode: function() { return /* binding */ isComputedTreeNode; },\n/* harmony export */   isDataModel: function() { return /* binding */ isDataModel; },\n/* harmony export */   isDataModelClass: function() { return /* binding */ isDataModelClass; },\n/* harmony export */   isFrozenSnapshot: function() { return /* binding */ isFrozenSnapshot; },\n/* harmony export */   isGlobalUndoRecordingDisabled: function() { return /* binding */ isGlobalUndoRecordingDisabled; },\n/* harmony export */   isHookAction: function() { return /* binding */ isHookAction; },\n/* harmony export */   isJSONPrimitive: function() { return /* binding */ isJSONPrimitive; },\n/* harmony export */   isMap: function() { return /* binding */ isMap; },\n/* harmony export */   isModel: function() { return /* binding */ isModel; },\n/* harmony export */   isModelAction: function() { return /* binding */ isModelAction; },\n/* harmony export */   isModelAutoTypeCheckingEnabled: function() { return /* binding */ isModelAutoTypeCheckingEnabled; },\n/* harmony export */   isModelClass: function() { return /* binding */ isModelClass; },\n/* harmony export */   isModelDataObject: function() { return /* binding */ isModelDataObject; },\n/* harmony export */   isModelFlow: function() { return /* binding */ isModelFlow; },\n/* harmony export */   isModelSnapshot: function() { return /* binding */ isModelSnapshot; },\n/* harmony export */   isObject: function() { return /* binding */ isObject; },\n/* harmony export */   isParentOfChild: function() { return /* binding */ isParentOfChild; },\n/* harmony export */   isPlainObject: function() { return /* binding */ isPlainObject; },\n/* harmony export */   isPrimitive: function() { return /* binding */ isPrimitive; },\n/* harmony export */   isRefOfType: function() { return /* binding */ isRefOfType; },\n/* harmony export */   isReservedModelKey: function() { return /* binding */ isReservedModelKey; },\n/* harmony export */   isRoot: function() { return /* binding */ isRoot; },\n/* harmony export */   isRootStore: function() { return /* binding */ isRootStore; },\n/* harmony export */   isSandboxedNode: function() { return /* binding */ isSandboxedNode; },\n/* harmony export */   isSet: function() { return /* binding */ isSet; },\n/* harmony export */   isTreeNode: function() { return /* binding */ isTreeNode; },\n/* harmony export */   isTweakedObject: function() { return /* binding */ isTweakedObject; },\n/* harmony export */   isoStringToDateTransform: function() { return /* binding */ isoStringToDateTransform; },\n/* harmony export */   jsonPatchToPatch: function() { return /* binding */ jsonPatchToPatch; },\n/* harmony export */   jsonPointerToPath: function() { return /* binding */ jsonPointerToPath; },\n/* harmony export */   lazy: function() { return /* binding */ lazy; },\n/* harmony export */   logWarning: function() { return /* binding */ logWarning; },\n/* harmony export */   makePropReadonly: function() { return /* binding */ makePropReadonly; },\n/* harmony export */   mapToArray: function() { return /* binding */ mapToArray; },\n/* harmony export */   mapToObject: function() { return /* binding */ mapToObject; },\n/* harmony export */   mobx6: function() { return /* binding */ mobx6; },\n/* harmony export */   model: function() { return /* binding */ model; },\n/* harmony export */   modelAction: function() { return /* binding */ modelAction; },\n/* harmony export */   modelActionSymbol: function() { return /* binding */ modelActionSymbol; },\n/* harmony export */   modelClass: function() { return /* binding */ modelClass; },\n/* harmony export */   modelFlow: function() { return /* binding */ modelFlow; },\n/* harmony export */   modelIdKey: function() { return /* binding */ modelIdKey; },\n/* harmony export */   modelIdPropertyNameSymbol: function() { return /* binding */ modelIdPropertyNameSymbol; },\n/* harmony export */   modelInitializedSymbol: function() { return /* binding */ modelInitializedSymbol; },\n/* harmony export */   modelSnapshotInWithMetadata: function() { return /* binding */ modelSnapshotInWithMetadata; },\n/* harmony export */   modelSnapshotOutWithMetadata: function() { return /* binding */ modelSnapshotOutWithMetadata; },\n/* harmony export */   modelTypeKey: function() { return /* binding */ modelTypeKey; },\n/* harmony export */   namespace: function() { return /* binding */ namespace$2; },\n/* harmony export */   noDefaultValue: function() { return /* binding */ noDefaultValue; },\n/* harmony export */   objectActions: function() { return /* binding */ objectActions; },\n/* harmony export */   objectMap: function() { return /* binding */ objectMap; },\n/* harmony export */   objectToMapTransform: function() { return /* binding */ objectToMapTransform; },\n/* harmony export */   observableOptions: function() { return /* binding */ observableOptions; },\n/* harmony export */   onActionMiddleware: function() { return /* binding */ onActionMiddleware; },\n/* harmony export */   onChildAttachedTo: function() { return /* binding */ onChildAttachedTo; },\n/* harmony export */   onGlobalPatches: function() { return /* binding */ onGlobalPatches; },\n/* harmony export */   onPatches: function() { return /* binding */ onPatches; },\n/* harmony export */   onSnapshot: function() { return /* binding */ onSnapshot; },\n/* harmony export */   patchRecorder: function() { return /* binding */ patchRecorder; },\n/* harmony export */   patchToJsonPatch: function() { return /* binding */ patchToJsonPatch; },\n/* harmony export */   pathToJsonPointer: function() { return /* binding */ pathToJsonPointer; },\n/* harmony export */   prop: function() { return /* binding */ prop; },\n/* harmony export */   propNameToSetterName: function() { return /* binding */ propNameToSetterName; },\n/* harmony export */   propsTypeSymbol: function() { return /* binding */ propsTypeSymbol; },\n/* harmony export */   readonlyMiddleware: function() { return /* binding */ readonlyMiddleware; },\n/* harmony export */   reduxActionType: function() { return /* binding */ reduxActionType; },\n/* harmony export */   registerActionCallArgumentSerializer: function() { return /* binding */ registerActionCallArgumentSerializer; },\n/* harmony export */   registerRootStore: function() { return /* binding */ registerRootStore; },\n/* harmony export */   registerSnapshotter: function() { return /* binding */ registerSnapshotter; },\n/* harmony export */   registerTweaker: function() { return /* binding */ registerTweaker; },\n/* harmony export */   resolveId: function() { return /* binding */ resolveId; },\n/* harmony export */   resolvePath: function() { return /* binding */ resolvePath; },\n/* harmony export */   resolvePathCheckingIds: function() { return /* binding */ resolvePathCheckingIds; },\n/* harmony export */   rootRef: function() { return /* binding */ rootRef; },\n/* harmony export */   runAfterNewSymbol: function() { return /* binding */ runAfterNewSymbol; },\n/* harmony export */   runBeforeOnInitSymbol: function() { return /* binding */ runBeforeOnInitSymbol; },\n/* harmony export */   runLateInitializationFunctions: function() { return /* binding */ runLateInitializationFunctions; },\n/* harmony export */   runUnprotected: function() { return /* binding */ runUnprotected; },\n/* harmony export */   runWithoutSnapshotOrPatches: function() { return /* binding */ runWithoutSnapshotOrPatches; },\n/* harmony export */   runningWithoutSnapshotOrPatches: function() { return /* binding */ runningWithoutSnapshotOrPatches; },\n/* harmony export */   sandbox: function() { return /* binding */ sandbox; },\n/* harmony export */   serializeActionCall: function() { return /* binding */ serializeActionCall; },\n/* harmony export */   serializeActionCallArgument: function() { return /* binding */ serializeActionCallArgument; },\n/* harmony export */   setCurrentActionContext: function() { return /* binding */ setCurrentActionContext; },\n/* harmony export */   setGlobalConfig: function() { return /* binding */ setGlobalConfig; },\n/* harmony export */   setToArray: function() { return /* binding */ setToArray; },\n/* harmony export */   simplifyActionContext: function() { return /* binding */ simplifyActionContext; },\n/* harmony export */   skipIdChecking: function() { return /* binding */ skipIdChecking; },\n/* harmony export */   standaloneAction: function() { return /* binding */ standaloneAction; },\n/* harmony export */   standaloneFlow: function() { return /* binding */ standaloneFlow; },\n/* harmony export */   stringToBigIntTransform: function() { return /* binding */ stringToBigIntTransform; },\n/* harmony export */   tProp: function() { return /* binding */ tProp; },\n/* harmony export */   tag: function() { return /* binding */ tag; },\n/* harmony export */   timestampToDateTransform: function() { return /* binding */ timestampToDateTransform; },\n/* harmony export */   toSnapshotOverrideTypeSymbol: function() { return /* binding */ toSnapshotOverrideTypeSymbol; },\n/* harmony export */   toTreeNode: function() { return /* binding */ toTreeNode; },\n/* harmony export */   transaction: function() { return /* binding */ transaction; },\n/* harmony export */   transactionMiddleware: function() { return /* binding */ transactionMiddleware; },\n/* harmony export */   tryUntweak: function() { return /* binding */ tryUntweak; },\n/* harmony export */   tweak: function() { return /* binding */ tweak; },\n/* harmony export */   tweakedObjects: function() { return /* binding */ tweakedObjects; },\n/* harmony export */   typeCheck: function() { return /* binding */ typeCheck; },\n/* harmony export */   types: function() { return /* binding */ types; },\n/* harmony export */   undoMiddleware: function() { return /* binding */ undoMiddleware; },\n/* harmony export */   unregisterRootStore: function() { return /* binding */ unregisterRootStore; },\n/* harmony export */   walkTree: function() { return /* binding */ walkTree; },\n/* harmony export */   withoutUndo: function() { return /* binding */ withoutUndo; }\n/* harmony export */ });\n/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ \"./node_modules/mobx/dist/mobx.esm.js\");\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar _a, _b, _c, _d, _e, _f;\n\n\nconst dataModelActionRegistry = /* @__PURE__ */ new Map();\nfunction getDataModelAction(fullActionName) {\n  return dataModelActionRegistry.get(fullActionName);\n}\nfunction setDataModelAction(fullActionName, modelClass2, fnName) {\n  dataModelActionRegistry.set(fullActionName, {\n    modelClass: modelClass2,\n    fnName\n  });\n}\nvar BuiltInAction;\n(function(BuiltInAction2) {\n  BuiltInAction2[\"ApplyPatches\"] = \"$$applyPatches\";\n  BuiltInAction2[\"ApplySnapshot\"] = \"$$applySnapshot\";\n  BuiltInAction2[\"Detach\"] = \"$$detach\";\n  BuiltInAction2[\"ApplySet\"] = \"$$applySet\";\n  BuiltInAction2[\"ApplyDelete\"] = \"$$applyDelete\";\n  BuiltInAction2[\"ApplyMethodCall\"] = \"$$applyMethodCall\";\n})(BuiltInAction || (BuiltInAction = {}));\nconst builtInActionValues = new Set(Object.values(BuiltInAction));\nfunction isBuiltInAction(actionName) {\n  return builtInActionValues.has(actionName);\n}\nvar ActionContextActionType;\n(function(ActionContextActionType2) {\n  ActionContextActionType2[\"Sync\"] = \"sync\";\n  ActionContextActionType2[\"Async\"] = \"async\";\n})(ActionContextActionType || (ActionContextActionType = {}));\nvar ActionContextAsyncStepType;\n(function(ActionContextAsyncStepType2) {\n  ActionContextAsyncStepType2[\"Spawn\"] = \"spawn\";\n  ActionContextAsyncStepType2[\"Return\"] = \"return\";\n  ActionContextAsyncStepType2[\"Resume\"] = \"resume\";\n  ActionContextAsyncStepType2[\"ResumeError\"] = \"resumeError\";\n  ActionContextAsyncStepType2[\"Throw\"] = \"throw\";\n})(ActionContextAsyncStepType || (ActionContextAsyncStepType = {}));\nlet currentActionContext;\nfunction getCurrentActionContext() {\n  return currentActionContext;\n}\nfunction setCurrentActionContext(ctx) {\n  currentActionContext = ctx;\n}\nconst modelActionSymbol = Symbol(\"modelAction\");\nfunction isModelAction(fn) {\n  return typeof fn === \"function\" && modelActionSymbol in fn;\n}\nconst modelTypeKey = \"$modelType\";\nconst modelIdKey = \"$modelId\";\nfunction isReservedModelKey(key) {\n  return key === modelTypeKey;\n}\nclass MobxKeystoneError extends Error {\n  constructor(msg) {\n    super(msg);\n    Object.setPrototypeOf(this, MobxKeystoneError.prototype);\n  }\n}\nfunction failure(msg) {\n  return new MobxKeystoneError(msg);\n}\nconst writableHiddenPropDescriptor = {\n  enumerable: false,\n  writable: true,\n  configurable: false,\n  value: void 0\n};\nfunction addHiddenProp(object, propName, value, writable = true) {\n  if (writable) {\n    Object.defineProperty(object, propName, writableHiddenPropDescriptor);\n    object[propName] = value;\n  } else {\n    Object.defineProperty(object, propName, {\n      enumerable: false,\n      writable,\n      configurable: true,\n      value\n    });\n  }\n}\nfunction makePropReadonly(object, propName, enumerable) {\n  const propDesc = Object.getOwnPropertyDescriptor(object, propName);\n  if (propDesc) {\n    propDesc.enumerable = enumerable;\n    if (propDesc.get) {\n      delete propDesc.set;\n    } else {\n      propDesc.writable = false;\n    }\n    Object.defineProperty(object, propName, propDesc);\n  }\n}\nfunction isPlainObject(value) {\n  if (!isObject(value))\n    return false;\n  const proto = Object.getPrototypeOf(value);\n  return proto === Object.prototype || proto === null;\n}\nfunction isObject(value) {\n  return value !== null && typeof value === \"object\";\n}\nfunction isPrimitive(value) {\n  switch (typeof value) {\n    case \"number\":\n    case \"string\":\n    case \"boolean\":\n    case \"undefined\":\n    case \"bigint\":\n      return true;\n  }\n  return value === null;\n}\nfunction isJSONPrimitive(value) {\n  switch (typeof value) {\n    case \"number\":\n      return isFinite(value);\n    case \"string\":\n    case \"boolean\":\n      return true;\n  }\n  return value === null;\n}\nfunction deleteFromArray(array, value) {\n  let index = array.indexOf(value);\n  if (index >= 0) {\n    array.splice(index, 1);\n    return true;\n  }\n  return false;\n}\nfunction isMap(val) {\n  return val instanceof Map || (0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableMap)(val);\n}\nfunction isSet(val) {\n  return val instanceof Set || (0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableSet)(val);\n}\nfunction isArray(val) {\n  return Array.isArray(val) || (0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableArray)(val);\n}\nconst inDevMode = \"development\" !== \"production\";\nfunction assertIsObject(value, argName) {\n  if (!isObject(value)) {\n    throw failure(`${argName} must be an object`);\n  }\n}\nfunction assertIsPlainObject(value, argName) {\n  if (!isPlainObject(value)) {\n    throw failure(`${argName} must be a plain object`);\n  }\n}\nfunction assertIsObservableObject(value, argName) {\n  if (!(0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableObject)(value)) {\n    throw failure(`${argName} must be an observable object`);\n  }\n}\nfunction assertIsObservableArray(value, argName) {\n  if (!(0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableArray)(value)) {\n    throw failure(`${argName} must be an observable array`);\n  }\n}\nfunction assertIsMap(value, argName) {\n  if (!isMap(value)) {\n    throw failure(`${argName} must be a map`);\n  }\n}\nfunction assertIsSet(value, argName) {\n  if (!isSet(value)) {\n    throw failure(`${argName} must be a set`);\n  }\n}\nfunction assertIsFunction(value, argName) {\n  if (typeof value !== \"function\") {\n    throw failure(`${argName} must be a function`);\n  }\n}\nfunction assertIsPrimitive(value, argName) {\n  if (!isPrimitive(value)) {\n    throw failure(`${argName} must be a primitive`);\n  }\n}\nfunction assertIsString(value, argName) {\n  if (typeof value !== \"string\") {\n    throw failure(`${argName} must be a string`);\n  }\n}\nconst runAfterNewSymbol = Symbol(\"runAfterNew\");\nconst runBeforeOnInitSymbol = Symbol(\"runBeforeOnInit\");\nfunction addLateInitializationFunction(target, symbol, fn) {\n  let array = target[symbol];\n  if (!array || !Object.prototype.hasOwnProperty.call(target, symbol)) {\n    array = array ? array.slice() : [];\n    addHiddenProp(target, symbol, array);\n  }\n  array.push(fn);\n}\nconst unboundMethodSymbol = Symbol(\"unboundMethod\");\nfunction decorateWrapMethodOrField(decoratorName, data, wrap) {\n  const { target, propertyKey, baseDescriptor } = data;\n  const addFieldDecorator = () => {\n    addLateInitializationFunction(target, runAfterNewSymbol, (instance) => {\n      const method = wrap(data, instance[propertyKey]);\n      const unboundMethod = unboundMethodSymbol in method ? method[unboundMethodSymbol] : method;\n      const boundMethod = unboundMethod.bind(instance);\n      Object.getOwnPropertySymbols(unboundMethod).forEach((s) => {\n        boundMethod[s] = unboundMethod[s];\n      });\n      boundMethod[unboundMethodSymbol] = unboundMethod;\n      instance[propertyKey] = boundMethod;\n    });\n  };\n  if (baseDescriptor) {\n    if (baseDescriptor.get !== void 0) {\n      throw failure(`@${decoratorName} cannot be used with getters`);\n    }\n    if (baseDescriptor.value) {\n      return {\n        enumerable: false,\n        writable: true,\n        configurable: true,\n        value: wrap(data, baseDescriptor.value)\n      };\n    } else {\n      addFieldDecorator();\n    }\n  } else {\n    addFieldDecorator();\n  }\n}\nfunction runLateInitializationFunctions(target, symbol) {\n  const fns = target[symbol];\n  if (fns) {\n    for (const fn of fns) {\n      fn(target);\n    }\n  }\n}\nconst warningsAlreadyDisplayed = /* @__PURE__ */ new Set();\nfunction logWarning(type, msg, uniqueKey) {\n  if (uniqueKey) {\n    if (warningsAlreadyDisplayed.has(uniqueKey)) {\n      return;\n    }\n    warningsAlreadyDisplayed.add(uniqueKey);\n  }\n  msg = \"[mobx-keystone] \" + msg;\n  switch (type) {\n    case \"warn\":\n      console.warn(msg);\n      break;\n    case \"error\":\n      console.error(msg);\n      break;\n    default:\n      throw failure(`unknown log type - ${type}`);\n  }\n}\nfunction lazy(getter) {\n  let memoizedValue;\n  let memoized = false;\n  return (...args) => {\n    if (!memoized) {\n      memoizedValue = getter(...args);\n      memoized = true;\n    }\n    return memoizedValue;\n  };\n}\nconst identityFn = (x) => x;\nconst mobx6 = {\n  // eslint-disable-next-line no-useless-concat\n  makeObservable: mobx__WEBPACK_IMPORTED_MODULE_0__[\n    // just to ensure import * is kept properly\n    String.fromCharCode(\"l\".charCodeAt(0) + 1) + \"akeObservable\"\n  ]\n};\nfunction propNameToSetterName(propName) {\n  return `set${propName[0].toUpperCase()}${propName.slice(1)}`;\n}\nfunction getMobxVersion() {\n  if (mobx6.makeObservable) {\n    return 6;\n  } else {\n    return 5;\n  }\n}\nconst namespace$2 = \"mobx-keystone\";\nconst propsTypeSymbol = Symbol(\"propsType\");\nconst fromSnapshotOverrideTypeSymbol = Symbol(\"fromSnapshotOverrideType\");\nconst toSnapshotOverrideTypeSymbol = Symbol(\"toSnapshotOverrideType\");\nconst modelInitializedSymbol = Symbol(\"modelInitialized\");\nfunction modelClass(type) {\n  return type;\n}\nconst modelInfoByName = {};\nconst modelInfoByClass = /* @__PURE__ */ new WeakMap();\nfunction getModelInfoForName(name) {\n  return modelInfoByName[name];\n}\nfunction getOrCreate(map, key, create) {\n  let value = map.get(key);\n  if (value === void 0) {\n    value = create();\n    map.set(key, value);\n  }\n  return value;\n}\nconst objectParents = /* @__PURE__ */ new WeakMap();\nconst objectParentsAtoms = /* @__PURE__ */ new WeakMap();\nfunction parentPathEquals(parentPath1, parentPath2, comparePath = true) {\n  if (!parentPath1 && !parentPath2)\n    return true;\n  if (!parentPath1 || !parentPath2)\n    return false;\n  const parentEquals = parentPath1.parent === parentPath2.parent;\n  if (!parentEquals)\n    return false;\n  return comparePath ? parentPath1.path === parentPath2.path : true;\n}\nfunction createParentPathAtom(obj) {\n  return getOrCreate(objectParentsAtoms, obj, () => (0,mobx__WEBPACK_IMPORTED_MODULE_0__.createAtom)(\"parentAtom\"));\n}\nfunction reportParentPathObserved(node) {\n  createParentPathAtom(node).reportObserved();\n}\nfunction reportParentPathChanged(node) {\n  createParentPathAtom(node).reportChanged();\n}\nconst dataObjectParent = /* @__PURE__ */ new WeakMap();\nfunction dataToModelNode(node) {\n  const modelNode = dataObjectParent.get(node);\n  return modelNode != null ? modelNode : node;\n}\nfunction modelToDataNode(node) {\n  return isModel(node) ? node.$ : node;\n}\nconst tweakedObjects = /* @__PURE__ */ new WeakMap();\nfunction isTweakedObject(value, canBeDataObject) {\n  if (!canBeDataObject && dataObjectParent.has(value)) {\n    return false;\n  }\n  return tweakedObjects.has(value);\n}\nfunction isTreeNode(value) {\n  return !isPrimitive(value) && isTweakedObject(value, false);\n}\nfunction assertTweakedObject(treeNode, argName, canBeDataObject = false) {\n  if (!canBeDataObject && dataObjectParent.has(treeNode)) {\n    throw failure(`${argName} must be the model object instance instead of the '$' sub-object`);\n  }\n  if (isPrimitive(treeNode) || !isTweakedObject(treeNode, true)) {\n    throw failure(`${argName} must be a tree node (usually a model or a shallow / deep child part of a model 'data' object)`);\n  }\n}\nfunction assertIsTreeNode(value, argName = \"argument\") {\n  assertTweakedObject(value, argName, false);\n}\nlet runningWithoutSnapshotOrPatches = false;\nfunction runWithoutSnapshotOrPatches(fn) {\n  const old = runningWithoutSnapshotOrPatches;\n  runningWithoutSnapshotOrPatches = true;\n  try {\n    (0,mobx__WEBPACK_IMPORTED_MODULE_0__.runInAction)(() => {\n      fn();\n    });\n  } finally {\n    runningWithoutSnapshotOrPatches = old;\n  }\n}\nconst modelMetadataSymbol = Symbol(\"modelMetadata\");\nconst modelUnwrappedClassSymbol = Symbol(\"modelUnwrappedClass\");\nconst runAfterModelDecoratorSymbol = Symbol(\"runAfterModelDecorator\");\nfunction getModelMetadata(modelClassOrInstance) {\n  if (isModel(modelClassOrInstance)) {\n    return modelClassOrInstance.constructor[modelMetadataSymbol];\n  } else if (isModelClass(modelClassOrInstance)) {\n    return modelClassOrInstance[modelMetadataSymbol];\n  } else {\n    throw failure(`modelClassOrInstance must be a model class or instance`);\n  }\n}\nconst modelIdPropertyNameCache = /* @__PURE__ */ new WeakMap();\nfunction getModelIdPropertyName(modelClass2) {\n  return getOrCreate(modelIdPropertyNameCache, modelClass2, () => getModelMetadata(modelClass2).modelIdProperty);\n}\nconst modelPropertiesSymbol = Symbol(\"modelProperties\");\nfunction getInternalModelClassPropsInfo(modelClass2) {\n  return modelClass2[modelPropertiesSymbol];\n}\nfunction setInternalModelClassPropsInfo(modelClass2, props) {\n  modelClass2[modelPropertiesSymbol] = props;\n}\nconst noDefaultValue = Symbol(\"noDefaultValue\");\nconst idProp = {\n  _setter: false,\n  _isId: true,\n  withSetter(mode) {\n    const obj = Object.create(this);\n    obj._setter = mode != null ? mode : true;\n    return obj;\n  },\n  typedAs() {\n    return idProp;\n  }\n};\nconst baseProp = {\n  ...{},\n  _defaultFn: noDefaultValue,\n  _defaultValue: noDefaultValue,\n  _typeChecker: void 0,\n  _setter: false,\n  _isId: false,\n  _transform: void 0,\n  _fromSnapshotProcessor: void 0,\n  _toSnapshotProcessor: void 0,\n  withSetter(mode) {\n    const obj = Object.create(this);\n    obj._setter = mode != null ? mode : true;\n    return obj;\n  },\n  withTransform(transform) {\n    const obj = Object.create(this);\n    obj._transform = toFullTransform(transform);\n    return obj;\n  },\n  withSnapshotProcessor({ fromSnapshot: fromSnapshot2, toSnapshot }) {\n    let newFromSnapshot;\n    if (this._fromSnapshotProcessor && fromSnapshot2) {\n      const oldFn = this._fromSnapshotProcessor;\n      const newFn = fromSnapshot2;\n      newFromSnapshot = (sn) => oldFn(newFn(sn));\n    } else if (fromSnapshot2) {\n      newFromSnapshot = fromSnapshot2;\n    } else {\n      newFromSnapshot = this._fromSnapshotProcessor;\n    }\n    let newToSnapshot;\n    if (this._toSnapshotProcessor && toSnapshot) {\n      const oldFn = this._toSnapshotProcessor;\n      const newFn = toSnapshot;\n      newToSnapshot = (sn) => newFn(oldFn(sn));\n    } else if (toSnapshot) {\n      newToSnapshot = toSnapshot;\n    } else {\n      newToSnapshot = this._toSnapshotProcessor;\n    }\n    const obj = Object.create(this);\n    obj._fromSnapshotProcessor = newFromSnapshot;\n    obj._toSnapshotProcessor = newToSnapshot;\n    return obj;\n  }\n};\nfunction prop(def) {\n  const hasDefaultValue = arguments.length >= 1;\n  if (!hasDefaultValue) {\n    return baseProp;\n  }\n  let p = propCache.get(def);\n  if (!p) {\n    p = Object.create(baseProp);\n    if (typeof def === \"function\") {\n      p._defaultFn = def;\n    } else {\n      p._defaultValue = def;\n    }\n    propCache.set(def, p);\n  }\n  return p;\n}\nconst propCache = /* @__PURE__ */ new Map();\nlet cacheTransformResult = false;\nconst cacheTransformedValueFn = () => {\n  cacheTransformResult = true;\n};\nfunction toFullTransform(transformObject) {\n  const cache = /* @__PURE__ */ new WeakMap();\n  const transform = (params) => params.originalValue == null ? params.originalValue : transformObject.transform(params);\n  const untransform = (params) => params.transformedValue == null ? params.transformedValue : transformObject.untransform(params);\n  return {\n    transform(originalValue, model2, propName, setOriginalValue) {\n      const modelCache = getOrCreate(cache, model2, () => /* @__PURE__ */ new Map());\n      let propCache2 = modelCache.get(propName);\n      if ((propCache2 == null ? void 0 : propCache2.originalValue) !== originalValue) {\n        modelCache.delete(propName);\n        propCache2 = void 0;\n      }\n      const transformedValue = transform({\n        originalValue,\n        cachedTransformedValue: propCache2 == null ? void 0 : propCache2.transformedValue,\n        setOriginalValue\n      });\n      modelCache.set(propName, {\n        originalValue,\n        transformedValue\n      });\n      return transformedValue;\n    },\n    untransform(transformedValue, model2, propName) {\n      const modelCache = getOrCreate(cache, model2, () => /* @__PURE__ */ new Map());\n      cacheTransformResult = false;\n      const originalValue = untransform({\n        transformedValue,\n        cacheTransformedValue: cacheTransformedValueFn\n      });\n      if (cacheTransformResult) {\n        modelCache.set(propName, { originalValue, transformedValue });\n      } else {\n        modelCache.delete(propName);\n      }\n      return originalValue;\n    }\n  };\n}\nfunction getModelPropDefaultValue(propData) {\n  if (propData._defaultFn !== noDefaultValue) {\n    return propData._defaultFn();\n  }\n  if (propData._defaultValue !== noDefaultValue) {\n    return propData._defaultValue;\n  }\n  return noDefaultValue;\n}\nclass TypeCheckError {\n  /**\n   * Creates an instance of TypeError.\n   * @param path Sub-path (where the root is the value being type checked) where the error occured.\n   * @param expectedTypeName Name of the expected type.\n   * @param actualValue Actual value.\n   * @param typeCheckedValue The value where the type check was invoked.\n   */\n  constructor(path, expectedTypeName, actualValue, typeCheckedValue) {\n    __publicField(this, \"path\");\n    __publicField(this, \"expectedTypeName\");\n    __publicField(this, \"actualValue\");\n    __publicField(this, \"typeCheckedValue\");\n    /**\n     * The type check error message.\n     */\n    __publicField(this, \"message\");\n    this.path = path;\n    this.expectedTypeName = expectedTypeName;\n    this.actualValue = actualValue;\n    this.typeCheckedValue = typeCheckedValue;\n    let rootPath = [];\n    if (this.typeCheckedValue && isTweakedObject(this.typeCheckedValue, true)) {\n      rootPath = fastGetRootPath(this.typeCheckedValue).path;\n    }\n    const actualValueSnapshot = isTweakedObject(this.actualValue, true) ? getSnapshot(this.actualValue) : this.actualValue;\n    this.message = `TypeCheckError: [/${[...rootPath, ...this.path].join(\"/\")}] Expected a value of type <${this.expectedTypeName}> but got the value <${JSON.stringify(actualValueSnapshot)}> instead`;\n  }\n  /**\n   * Throws the type check error as an actual error.\n   */\n  throw() {\n    throw failure(this.message);\n  }\n}\nconst emptyPath = [];\nconst typeCheckersWithCachedResultsOfObject = /* @__PURE__ */ new WeakMap();\nvar TypeCheckerBaseType;\n(function(TypeCheckerBaseType2) {\n  TypeCheckerBaseType2[\"Object\"] = \"object\";\n  TypeCheckerBaseType2[\"Array\"] = \"array\";\n  TypeCheckerBaseType2[\"Primitive\"] = \"primitive\";\n  TypeCheckerBaseType2[\"Any\"] = \"any\";\n})(TypeCheckerBaseType || (TypeCheckerBaseType = {}));\nfunction getTypeCheckerBaseTypeFromValue(value) {\n  if (isArray(value))\n    return TypeCheckerBaseType.Array;\n  if (isObject(value))\n    return TypeCheckerBaseType.Object;\n  if (isPrimitive(value))\n    return TypeCheckerBaseType.Primitive;\n  return TypeCheckerBaseType.Any;\n}\nfunction invalidateCachedTypeCheckerResult(obj) {\n  let current = obj;\n  while (current) {\n    const set2 = typeCheckersWithCachedResultsOfObject.get(current);\n    if (set2) {\n      typeCheckersWithCachedResultsOfObject.delete(current);\n      set2.forEach((typeChecker) => typeChecker.invalidateCachedResult(current));\n    }\n    current = fastGetParentIncludingDataObjects(current);\n  }\n}\nconst typeCheckersWithCachedSnapshotProcessorResultsOfObject = /* @__PURE__ */ new WeakMap();\nfunction invalidateCachedToSnapshotProcessorResult(obj) {\n  const set2 = typeCheckersWithCachedSnapshotProcessorResultsOfObject.get(obj);\n  if (set2) {\n    set2.forEach((typeChecker) => typeChecker.invalidateSnapshotProcessorCachedResult(obj));\n    typeCheckersWithCachedSnapshotProcessorResultsOfObject.delete(obj);\n  }\n}\nclass TypeChecker {\n  constructor(baseType, _check, getTypeName, typeInfoGen, snapshotType, _fromSnapshotProcessor, _toSnapshotProcessor) {\n    __publicField(this, \"baseType\");\n    __publicField(this, \"_check\");\n    __publicField(this, \"getTypeName\");\n    __publicField(this, \"typeInfoGen\");\n    __publicField(this, \"snapshotType\");\n    __publicField(this, \"_fromSnapshotProcessor\");\n    __publicField(this, \"_toSnapshotProcessor\");\n    __publicField(this, \"checkResultCache\");\n    __publicField(this, \"unchecked\");\n    __publicField(this, \"_cachedTypeInfoGen\");\n    __publicField(this, \"fromSnapshotProcessor\", (sn) => {\n      return this._fromSnapshotProcessor(sn);\n    });\n    __publicField(this, \"_toSnapshotProcessorCache\", /* @__PURE__ */ new WeakMap());\n    __publicField(this, \"toSnapshotProcessor\", (sn) => {\n      if (typeof sn !== \"object\" || sn === null) {\n        return this._toSnapshotProcessor(sn);\n      }\n      if (this._toSnapshotProcessorCache.has(sn)) {\n        return this._toSnapshotProcessorCache.get(sn);\n      }\n      const val = this._toSnapshotProcessor(sn);\n      this._toSnapshotProcessorCache.set(sn, val);\n      const typeCheckerSet = getOrCreate(typeCheckersWithCachedSnapshotProcessorResultsOfObject, sn, () => /* @__PURE__ */ new Set());\n      typeCheckerSet.add(this);\n      return val;\n    });\n    this.baseType = baseType;\n    this._check = _check;\n    this.getTypeName = getTypeName;\n    this.typeInfoGen = typeInfoGen;\n    this.snapshotType = snapshotType;\n    this._fromSnapshotProcessor = _fromSnapshotProcessor;\n    this._toSnapshotProcessor = _toSnapshotProcessor;\n    this.unchecked = !_check;\n    this._cachedTypeInfoGen = lazy(typeInfoGen);\n  }\n  createCacheIfNeeded() {\n    if (!this.checkResultCache) {\n      this.checkResultCache = /* @__PURE__ */ new WeakMap();\n    }\n    return this.checkResultCache;\n  }\n  setCachedResult(obj, newCacheValue) {\n    this.createCacheIfNeeded().set(obj, newCacheValue);\n    const typeCheckerSet = getOrCreate(typeCheckersWithCachedResultsOfObject, obj, () => /* @__PURE__ */ new Set());\n    typeCheckerSet.add(this);\n  }\n  invalidateCachedResult(obj) {\n    var _a2;\n    (_a2 = this.checkResultCache) == null ? void 0 : _a2.delete(obj);\n  }\n  getCachedResult(obj) {\n    var _a2;\n    return (_a2 = this.checkResultCache) == null ? void 0 : _a2.get(obj);\n  }\n  check(value, path, typeCheckedValue) {\n    if (this.unchecked) {\n      return null;\n    }\n    if (!isTweakedObject(value, true)) {\n      return this._check(value, path, typeCheckedValue);\n    }\n    let cachedResult = this.getCachedResult(value);\n    if (cachedResult === void 0) {\n      cachedResult = this._check(value, emptyPath, void 0);\n      this.setCachedResult(value, cachedResult);\n    }\n    if (cachedResult) {\n      return new TypeCheckError([...path, ...cachedResult.path], cachedResult.expectedTypeName, cachedResult.actualValue, typeCheckedValue);\n    } else {\n      return null;\n    }\n  }\n  get typeInfo() {\n    return this._cachedTypeInfoGen(this);\n  }\n  invalidateSnapshotProcessorCachedResult(obj) {\n    this._toSnapshotProcessorCache.delete(obj);\n  }\n}\nconst lateTypeCheckerSymbol = Symbol(\"lateTypeCheker\");\nfunction lateTypeChecker(fn, typeInfoGen) {\n  let cached;\n  const ltc = function() {\n    if (cached) {\n      return cached;\n    }\n    cached = fn();\n    return cached;\n  };\n  ltc[lateTypeCheckerSymbol] = true;\n  const cachedTypeInfoGen = lazy(typeInfoGen);\n  Object.defineProperty(ltc, \"typeInfo\", {\n    enumerable: true,\n    configurable: true,\n    get() {\n      return cachedTypeInfoGen(ltc);\n    }\n  });\n  return ltc;\n}\nfunction isLateTypeChecker(ltc) {\n  return typeof ltc === \"function\" && lateTypeCheckerSymbol in ltc;\n}\nclass TypeInfo {\n  constructor(thisType) {\n    __publicField(this, \"thisType\");\n    this.thisType = thisType;\n  }\n}\nfunction getTypeInfo(type) {\n  const stdType = resolveStandardType(type);\n  const typeInfo = stdType.typeInfo;\n  if (!typeInfo) {\n    throw failure(`type info not found for ${type}`);\n  }\n  return typeInfo;\n}\nconst cachedModelTypeChecker = /* @__PURE__ */ new WeakMap();\nfunction typesModel(modelClass2) {\n  if (!isModelClass(modelClass2) && typeof modelClass2 === \"function\") {\n    const modelClassFn = modelClass2;\n    const typeInfoGen = (t) => new ModelTypeInfo(t, modelClassFn());\n    return lateTypeChecker(() => typesModel(modelClassFn()), typeInfoGen);\n  } else {\n    const modelClazz = modelClass2;\n    const cachedTypeChecker = cachedModelTypeChecker.get(modelClazz);\n    if (cachedTypeChecker) {\n      return cachedTypeChecker;\n    }\n    const typeInfoGen = (t) => new ModelTypeInfo(t, modelClazz);\n    const tc = lateTypeChecker(() => {\n      const modelInfo = modelInfoByClass.get(modelClazz);\n      const typeName = `Model(${modelInfo.name})`;\n      const dataTypeChecker = getModelMetadata(modelClazz).dataType;\n      const resolvedDataTypeChecker = dataTypeChecker ? resolveTypeChecker(dataTypeChecker) : void 0;\n      const thisTc = new TypeChecker(TypeCheckerBaseType.Object, (value, path, typeCheckedValue) => {\n        if (!(value instanceof modelClazz)) {\n          return new TypeCheckError(path, typeName, value, typeCheckedValue);\n        }\n        if (resolvedDataTypeChecker) {\n          return resolvedDataTypeChecker.check(value.$, path, typeCheckedValue);\n        }\n        return null;\n      }, () => typeName, typeInfoGen, (value) => {\n        if (!isObject(value)) {\n          return null;\n        }\n        if (value[modelTypeKey] !== void 0) {\n          return value[modelTypeKey] === modelInfo.name ? thisTc : null;\n        }\n        if (resolvedDataTypeChecker) {\n          return resolvedDataTypeChecker.snapshotType(value) ? thisTc : null;\n        }\n        return null;\n      }, (sn) => {\n        if (sn[modelTypeKey]) {\n          return sn;\n        } else {\n          return {\n            ...sn,\n            [modelTypeKey]: modelInfo.name\n          };\n        }\n      }, (sn) => sn);\n      return thisTc;\n    }, typeInfoGen);\n    cachedModelTypeChecker.set(modelClazz, tc);\n    return tc;\n  }\n}\nclass ModelTypeInfo extends TypeInfo {\n  constructor(thisType, modelClass2) {\n    super(thisType);\n    __publicField(this, \"modelClass\");\n    __publicField(this, \"_props\", lazy(() => {\n      const objSchema = getInternalModelClassPropsInfo(this.modelClass);\n      const propTypes = {};\n      Object.keys(objSchema).forEach((propName) => {\n        const propData = objSchema[propName];\n        const type = propData._typeChecker;\n        let typeInfo;\n        if (type) {\n          typeInfo = getTypeInfo(type);\n        }\n        let hasDefault = false;\n        let defaultValue;\n        if (propData._defaultFn !== noDefaultValue) {\n          defaultValue = propData._defaultFn;\n          hasDefault = true;\n        } else if (propData._defaultValue !== noDefaultValue) {\n          defaultValue = propData._defaultValue;\n          hasDefault = true;\n        }\n        propTypes[propName] = {\n          type,\n          typeInfo,\n          hasDefault,\n          default: defaultValue\n        };\n      });\n      return propTypes;\n    }));\n    this.modelClass = modelClass2;\n  }\n  get props() {\n    return this._props();\n  }\n  get modelType() {\n    const modelInfo = modelInfoByClass.get(this.modelClass);\n    return modelInfo.name;\n  }\n}\nfunction registerModelStandardTypeResolver() {\n  registerStandardTypeResolver((v) => isModelClass(v) ? typesModel(v) : void 0);\n}\nconst standardTypeResolvers$1 = [];\nfunction typesLiteral(literal) {\n  assertIsPrimitive(literal, \"literal\");\n  let typeName;\n  switch (literal) {\n    case void 0:\n      typeName = \"undefined\";\n      break;\n    case null:\n      typeName = \"null\";\n      break;\n    default:\n      typeName = JSON.stringify(literal);\n      break;\n  }\n  const typeInfoGen = (t) => new LiteralTypeInfo(t, literal);\n  const thisTc = new TypeChecker(TypeCheckerBaseType.Primitive, (value, path, typeCheckedValue) => value === literal ? null : new TypeCheckError(path, typeName, value, typeCheckedValue), () => typeName, typeInfoGen, (value) => value === literal ? thisTc : null, identityFn, identityFn);\n  return thisTc;\n}\nclass LiteralTypeInfo extends TypeInfo {\n  constructor(thisType, literal) {\n    super(thisType);\n    __publicField(this, \"literal\");\n    this.literal = literal;\n  }\n}\nconst typesUndefined = typesLiteral(void 0);\nstandardTypeResolvers$1.push((v) => v === void 0 ? typesUndefined : void 0);\nconst typesNull = typesLiteral(null);\nstandardTypeResolvers$1.push((v) => v === null ? typesNull : void 0);\nconst typesBoolean = new TypeChecker(TypeCheckerBaseType.Primitive, (value, path, typeCheckedValue) => typeof value === \"boolean\" ? null : new TypeCheckError(path, \"boolean\", value, typeCheckedValue), () => \"boolean\", (t) => new BooleanTypeInfo(t), (value) => typeof value === \"boolean\" ? typesBoolean : null, identityFn, identityFn);\nstandardTypeResolvers$1.push((v) => v === Boolean ? typesBoolean : void 0);\nclass BooleanTypeInfo extends TypeInfo {\n}\nconst typesNumber = new TypeChecker(TypeCheckerBaseType.Primitive, (value, path, typeCheckedValue) => typeof value === \"number\" ? null : new TypeCheckError(path, \"number\", value, typeCheckedValue), () => \"number\", (t) => new NumberTypeInfo(t), (value) => typeof value === \"number\" ? typesNumber : null, identityFn, identityFn);\nstandardTypeResolvers$1.push((v) => v === Number ? typesNumber : void 0);\nclass NumberTypeInfo extends TypeInfo {\n}\nconst typesString = new TypeChecker(TypeCheckerBaseType.Primitive, (value, path, typeCheckedValue) => typeof value === \"string\" ? null : new TypeCheckError(path, \"string\", value, typeCheckedValue), () => \"string\", (t) => new StringTypeInfo(t), (value) => typeof value === \"string\" ? typesString : null, identityFn, identityFn);\nstandardTypeResolvers$1.push((v) => v === String ? typesString : void 0);\nclass StringTypeInfo extends TypeInfo {\n}\nfunction registerPrimitiveStandardTypeResolvers() {\n  standardTypeResolvers$1.forEach((str) => {\n    registerStandardTypeResolver(str);\n  });\n}\nlet defaultStandardTypeResolversRegistered = false;\nfunction registerDefaultStandardTypeResolvers() {\n  if (defaultStandardTypeResolversRegistered) {\n    return;\n  }\n  defaultStandardTypeResolversRegistered = true;\n  registerModelStandardTypeResolver();\n  registerPrimitiveStandardTypeResolvers();\n}\nconst standardTypeResolvers = [];\nfunction registerStandardTypeResolver(resolverFn) {\n  standardTypeResolvers.push(resolverFn);\n}\nfunction findStandardType(value) {\n  registerDefaultStandardTypeResolvers();\n  for (const resolverFn of standardTypeResolvers) {\n    const tc = resolverFn(value);\n    if (tc)\n      return tc;\n  }\n  return void 0;\n}\nfunction resolveTypeChecker(v) {\n  let next = v;\n  while (true) {\n    if (next instanceof TypeChecker) {\n      return next;\n    } else if (isLateTypeChecker(next)) {\n      next = next();\n    } else {\n      const tc = findStandardType(v);\n      if (tc) {\n        return resolveTypeChecker(tc);\n      }\n      throw failure(\"type checker could not be resolved\");\n    }\n  }\n}\nfunction resolveStandardTypeNoThrow(v) {\n  if (v instanceof TypeChecker || isLateTypeChecker(v)) {\n    return v;\n  } else {\n    const tc = findStandardType(v);\n    if (tc) {\n      return tc;\n    }\n    return void 0;\n  }\n}\nfunction resolveStandardType(v) {\n  const tc = resolveStandardTypeNoThrow(v);\n  if (tc) {\n    return tc;\n  }\n  throw failure(\"standard type could not be resolved\");\n}\nconst snapshots = /* @__PURE__ */ new WeakMap();\nconst frozenState = /* @__PURE__ */ new WeakMap();\nfunction getInternalSnapshot(value) {\n  return snapshots.get(value);\n}\nfunction getInternalSnapshotParent(sn, parentPath) {\n  if (!parentPath || !sn) {\n    return void 0;\n  }\n  const parentSn = getInternalSnapshot(parentPath.parent);\n  if (!parentSn) {\n    return void 0;\n  }\n  return {\n    parentSnapshot: parentSn,\n    parentPath\n  };\n}\nconst unsetInternalSnapshot = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(\"unsetInternalSnapshot\", (value) => {\n  const oldSn = getInternalSnapshot(value);\n  if (oldSn) {\n    snapshots.delete(value);\n    oldSn.atom.reportChanged();\n  }\n});\nconst setNewInternalSnapshot = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(\"setNewInternalSnapshot\", (value, untransformed, transformFn, markAsFrozen = false) => {\n  const sn = {\n    untransformed,\n    transformFn,\n    transformed: transformFn ? transformFn(untransformed) : untransformed,\n    atom: (0,mobx__WEBPACK_IMPORTED_MODULE_0__.createAtom)(\"snapshot\")\n  };\n  frozenState.set(sn.untransformed, markAsFrozen);\n  if (sn.transformed !== void 0) {\n    frozenState.set(sn.transformed, markAsFrozen);\n  }\n  snapshots.set(value, sn);\n  sn.atom.reportChanged();\n});\nconst updateInternalSnapshot = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(\"updateInternalSnapshot\", (value, mutate) => {\n  const sn = getInternalSnapshot(value);\n  let untransformed = sn.untransformed;\n  const snFrozen = frozenState.get(untransformed);\n  if (snFrozen) {\n    if (Array.isArray(untransformed)) {\n      untransformed = untransformed.slice();\n    } else {\n      untransformed = Object.assign({}, untransformed);\n    }\n  } else {\n    invalidateCachedToSnapshotProcessorResult(untransformed);\n  }\n  mutate(untransformed);\n  sn.untransformed = untransformed;\n  sn.transformed = sn.transformFn ? sn.transformFn(untransformed) : untransformed;\n  frozenState.set(sn.untransformed, false);\n  if (sn.transformed !== void 0) {\n    frozenState.set(sn.transformed, false);\n  }\n  sn.atom.reportChanged();\n  const parent = getInternalSnapshotParent(sn, fastGetParentPath(value));\n  if (parent) {\n    const { parentSnapshot, parentPath } = parent;\n    if (parentSnapshot) {\n      const path = parentPath.path;\n      updateInternalSnapshot(parentPath.parent, (objOrArray) => {\n        objOrArray[path] = sn.transformed;\n      });\n    }\n  }\n});\nfunction reportInternalSnapshotObserved(sn) {\n  sn.atom.reportObserved();\n}\nfunction freezeInternalSnapshot(data) {\n  if (isPrimitive(data)) {\n    return data;\n  }\n  const isFrozen = frozenState.get(data);\n  if (isFrozen === void 0 || isFrozen === true) {\n    return data;\n  }\n  if (Array.isArray(data)) {\n    for (let i = 0; i < data.length; i++) {\n      freezeInternalSnapshot(data[i]);\n    }\n  } else {\n    const keys2 = Object.keys(data);\n    for (let i = 0; i < keys2.length; i++) {\n      freezeInternalSnapshot(data[keys2[i]]);\n    }\n  }\n  frozenState.set(data, true);\n  return data;\n}\nfunction getSnapshot(arg1, arg2) {\n  let toSnapshotProcessor = identityFn;\n  let nodeOrPrimitive;\n  if (arguments.length >= 2) {\n    toSnapshotProcessor = resolveTypeChecker(arg1).toSnapshotProcessor;\n    nodeOrPrimitive = arg2;\n  } else {\n    nodeOrPrimitive = arg1;\n  }\n  if (isPrimitive(nodeOrPrimitive)) {\n    return toSnapshotProcessor(nodeOrPrimitive);\n  }\n  assertTweakedObject(nodeOrPrimitive, \"nodeOrPrimitive\");\n  const snapshot = getInternalSnapshot(nodeOrPrimitive);\n  if (!snapshot) {\n    throw failure(\"getSnapshot is not supported for this kind of object\");\n  }\n  freezeInternalSnapshot(snapshot.transformed);\n  reportInternalSnapshotObserved(snapshot);\n  return toSnapshotProcessor(snapshot.transformed);\n}\nfunction typeCheck(type, value) {\n  const typeChecker = resolveTypeChecker(type);\n  if (typeChecker.unchecked) {\n    return null;\n  } else {\n    return typeChecker.check(value, [], value);\n  }\n}\nlet urlAlphabet = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\nlet nanoid = (size = 21) => {\n  let id = \"\";\n  let i = size;\n  while (i--) {\n    id += urlAlphabet[Math.random() * 64 | 0];\n  }\n  return id;\n};\nvar ModelAutoTypeCheckingMode;\n(function(ModelAutoTypeCheckingMode2) {\n  ModelAutoTypeCheckingMode2[\"DevModeOnly\"] = \"devModeOnly\";\n  ModelAutoTypeCheckingMode2[\"AlwaysOn\"] = \"alwaysOn\";\n  ModelAutoTypeCheckingMode2[\"AlwaysOff\"] = \"alwaysOff\";\n})(ModelAutoTypeCheckingMode || (ModelAutoTypeCheckingMode = {}));\nlet localId = 0;\nconst localBaseId = nanoid();\nfunction defaultModelIdGenerator() {\n  const id = localId.toString(36) + \"-\" + localBaseId;\n  localId++;\n  return id;\n}\nlet globalConfig = {\n  modelAutoTypeChecking: ModelAutoTypeCheckingMode.DevModeOnly,\n  modelIdGenerator: defaultModelIdGenerator,\n  allowUndefinedArrayElements: false,\n  showDuplicateModelNameWarnings: true\n};\nfunction setGlobalConfig(config) {\n  globalConfig = Object.freeze({\n    ...globalConfig,\n    ...config\n  });\n}\nfunction getGlobalConfig() {\n  return globalConfig;\n}\nfunction isModelAutoTypeCheckingEnabled() {\n  switch (getGlobalConfig().modelAutoTypeChecking) {\n    case ModelAutoTypeCheckingMode.DevModeOnly:\n      return inDevMode;\n    case ModelAutoTypeCheckingMode.AlwaysOff:\n      return false;\n    case ModelAutoTypeCheckingMode.AlwaysOn:\n      return true;\n    default:\n      throw failure(`invalid 'modelAutoTypeChecking' config value - ${globalConfig.modelAutoTypeChecking}`);\n  }\n}\nconst modelInitializersSymbol = Symbol(\"modelInitializers\");\nfunction addModelClassInitializer(modelClass2, init) {\n  let initializers = modelClass2[modelInitializersSymbol];\n  if (!initializers) {\n    initializers = [];\n    modelClass2[modelInitializersSymbol] = initializers;\n  }\n  initializers.push(init);\n}\nfunction getModelClassInitializers(modelClass2) {\n  return modelClass2[modelInitializersSymbol];\n}\nfunction applyModelInitializers(modelClass2, modelObj) {\n  const initializers = getModelClassInitializers(modelClass2);\n  if (initializers) {\n    const len = initializers.length;\n    for (let i = 0; i < len; i++) {\n      initializers[i](modelObj);\n    }\n  }\n}\nfunction canWrite() {\n  return !getActionProtection() || !!getCurrentActionContext();\n}\nfunction assertCanWrite() {\n  if (!canWrite()) {\n    throw failure(\"data changes must be performed inside model actions\");\n  }\n}\nlet actionProtection = true;\nfunction getActionProtection() {\n  return actionProtection;\n}\nfunction setActionProtection(protection) {\n  actionProtection = protection;\n}\nconst pendingActions = [];\nfunction isActionRunning() {\n  return !getActionProtection() || !!getCurrentActionContext();\n}\nfunction enqueuePendingAction(action2) {\n  if (isActionRunning()) {\n    pendingActions.push(action2);\n  } else {\n    action2();\n  }\n}\nlet pendingActionsRunning = false;\nfunction tryRunPendingActions() {\n  if (isActionRunning() || pendingActionsRunning) {\n    return;\n  }\n  pendingActionsRunning = true;\n  try {\n    while (pendingActions.length > 0) {\n      const nextAction = pendingActions.shift();\n      nextAction();\n    }\n  } finally {\n    pendingActionsRunning = false;\n  }\n}\nvar HookAction;\n(function(HookAction2) {\n  HookAction2[\"OnInit\"] = \"$$onInit\";\n  HookAction2[\"OnLazyInit\"] = \"$$onLazyInit\";\n  HookAction2[\"OnAttachedToRootStore\"] = \"$$onAttachedToRootStore\";\n  HookAction2[\"OnAttachedToRootStoreDisposer\"] = \"$$onAttachedToRootStoreDisposer\";\n})(HookAction || (HookAction = {}));\nconst hookActionValues = new Set(Object.values(HookAction));\nfunction isHookAction(actionName) {\n  return hookActionValues.has(actionName);\n}\nconst objectChildren = /* @__PURE__ */ new WeakMap();\nfunction getObjectChildrenObject(node) {\n  let obj = objectChildren.get(node);\n  if (!obj) {\n    obj = {\n      shallow: /* @__PURE__ */ new Set(),\n      shallowAtom: (0,mobx__WEBPACK_IMPORTED_MODULE_0__.createAtom)(\"shallowChildrenAtom\"),\n      deep: /* @__PURE__ */ new Set(),\n      deepDirty: true,\n      deepAtom: (0,mobx__WEBPACK_IMPORTED_MODULE_0__.createAtom)(\"deepChildrenAtom\"),\n      extensionsData: initExtensionsData()\n    };\n    objectChildren.set(node, obj);\n  }\n  return obj;\n}\nfunction getObjectChildren(node) {\n  const obj = getObjectChildrenObject(node);\n  obj.shallowAtom.reportObserved();\n  return obj.shallow;\n}\nfunction getDeepObjectChildren(node) {\n  const obj = getObjectChildrenObject(node);\n  if (obj.deepDirty) {\n    updateDeepObjectChildren(node);\n  }\n  obj.deepAtom.reportObserved();\n  return obj;\n}\nfunction addNodeToDeepLists(node, data) {\n  data.deep.add(node);\n  extensions.forEach((extension, dataSymbol) => {\n    extension.addNode(node, data.extensionsData.get(dataSymbol));\n  });\n}\nconst updateDeepObjectChildren = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((node) => {\n  const obj = getObjectChildrenObject(node);\n  if (!obj.deepDirty) {\n    return obj;\n  }\n  obj.deep = /* @__PURE__ */ new Set();\n  obj.extensionsData = initExtensionsData();\n  const childrenIterator = obj.shallow.values();\n  let childrenIteratorResult = childrenIterator.next();\n  while (!childrenIteratorResult.done) {\n    addNodeToDeepLists(childrenIteratorResult.value, obj);\n    const childDeepChildren = updateDeepObjectChildren(childrenIteratorResult.value).deep;\n    const childDeepChildrenIterator = childDeepChildren.values();\n    let childDeepChildrenIteratorResult = childDeepChildrenIterator.next();\n    while (!childDeepChildrenIteratorResult.done) {\n      addNodeToDeepLists(childDeepChildrenIteratorResult.value, obj);\n      childDeepChildrenIteratorResult = childDeepChildrenIterator.next();\n    }\n    childrenIteratorResult = childrenIterator.next();\n  }\n  obj.deepDirty = false;\n  obj.deepAtom.reportChanged();\n  return obj;\n});\nconst addObjectChild = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((node, child) => {\n  const obj = getObjectChildrenObject(node);\n  obj.shallow.add(child);\n  obj.shallowAtom.reportChanged();\n  invalidateDeepChildren(node, obj);\n});\nconst removeObjectChild = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((node, child) => {\n  const obj = getObjectChildrenObject(node);\n  obj.shallow.delete(child);\n  obj.shallowAtom.reportChanged();\n  invalidateDeepChildren(node, obj);\n});\nfunction invalidateDeepChildren(node, obj) {\n  let currentNode = node;\n  let currentObj = obj;\n  while (currentNode) {\n    currentObj.deepDirty = true;\n    currentObj.deepAtom.reportChanged();\n    currentNode = fastGetParent(currentNode);\n    if (currentNode) {\n      currentObj = getObjectChildrenObject(currentNode);\n    }\n  }\n}\nconst extensions = /* @__PURE__ */ new Map();\nfunction registerDeepObjectChildrenExtension(extension) {\n  const dataSymbol = {};\n  extensions.set(dataSymbol, extension);\n  return (data) => {\n    return data.extensionsData.get(dataSymbol);\n  };\n}\nfunction initExtensionsData() {\n  const extensionsData = /* @__PURE__ */ new WeakMap();\n  extensions.forEach((extension, dataSymbol) => {\n    extensionsData.set(dataSymbol, extension.initData());\n  });\n  return extensionsData;\n}\nvar WalkTreeMode;\n(function(WalkTreeMode2) {\n  WalkTreeMode2[\"ParentFirst\"] = \"parentFirst\";\n  WalkTreeMode2[\"ChildrenFirst\"] = \"childrenFirst\";\n})(WalkTreeMode || (WalkTreeMode = {}));\nfunction walkTree(root, visit, mode) {\n  assertTweakedObject(root, \"root\");\n  if (mode === WalkTreeMode.ParentFirst) {\n    return walkTreeParentFirst(root, visit);\n  } else {\n    return walkTreeChildrenFirst(root, visit);\n  }\n}\nfunction walkTreeParentFirst(root, visit) {\n  const stack = [root];\n  while (stack.length > 0) {\n    const node = stack.pop();\n    const ret = visit(node);\n    if (ret !== void 0) {\n      return ret;\n    }\n    const children = getObjectChildren(node);\n    stack.length += children.size;\n    let i = stack.length - 1;\n    const childrenIter = children.values();\n    let ch = childrenIter.next();\n    while (!ch.done) {\n      stack[i--] = ch.value;\n      ch = childrenIter.next();\n    }\n  }\n  return void 0;\n}\nfunction walkTreeChildrenFirst(root, visit) {\n  const childrenIter = getObjectChildren(root).values();\n  let ch = childrenIter.next();\n  while (!ch.done) {\n    const ret2 = walkTreeChildrenFirst(ch.value, visit);\n    if (ret2 !== void 0) {\n      return ret2;\n    }\n    ch = childrenIter.next();\n  }\n  const ret = visit(root);\n  if (ret !== void 0) {\n    return ret;\n  }\n  return void 0;\n}\nfunction getComputedTreeResult(computedFns, visit, tree) {\n  let cmpted = computedFns.get(tree);\n  if (!cmpted) {\n    cmpted = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n      return walkTreeAggregate(tree, visit, (ch) => getComputedTreeResult(computedFns, visit, ch));\n    });\n    computedFns.set(tree, cmpted);\n  }\n  return cmpted.get();\n}\nfunction computedWalkTreeAggregate(visit) {\n  const computedFns = /* @__PURE__ */ new WeakMap();\n  return {\n    walk: (n) => getComputedTreeResult(computedFns, visit, n)\n  };\n}\nfunction walkTreeAggregate(target, visit, recurse) {\n  let map;\n  const rootVal = visit(target);\n  const childrenMap = getObjectChildren(target);\n  const childrenIter = childrenMap.values();\n  let ch = childrenIter.next();\n  if (rootVal === void 0 && childrenMap.size === 1) {\n    return recurse(ch.value);\n  }\n  while (!ch.done) {\n    const childMap = recurse(ch.value);\n    if (childMap) {\n      if (!map) {\n        map = /* @__PURE__ */ new Map();\n      }\n      const mapIter = childMap.keys();\n      let mapCur = mapIter.next();\n      while (!mapCur.done) {\n        const key = mapCur.value;\n        const val = childMap.get(key);\n        map.set(key, val);\n        mapCur = mapIter.next();\n      }\n    }\n    ch = childrenIter.next();\n  }\n  if (rootVal !== void 0) {\n    if (!map) {\n      map = /* @__PURE__ */ new Map();\n    }\n    map.set(rootVal, target);\n  }\n  return map;\n}\nconst onAttachedDisposers = /* @__PURE__ */ new WeakMap();\nconst attachedToRootStore = /* @__PURE__ */ new WeakSet();\nconst attachToRootStore = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(\"attachToRootStore\", (rootStore, child) => {\n  const childrenToCall = [];\n  walkTree(child, (ch) => {\n    if (attachedToRootStore.has(ch)) {\n      return;\n    }\n    attachedToRootStore.add(ch);\n    if (ch instanceof BaseModel && ch.onAttachedToRootStore) {\n      wrapModelMethodInActionIfNeeded(ch, \"onAttachedToRootStore\", HookAction.OnAttachedToRootStore);\n      childrenToCall.push(ch);\n    }\n  }, WalkTreeMode.ParentFirst);\n  const childrenToCallLen = childrenToCall.length;\n  for (let i = 0; i < childrenToCallLen; i++) {\n    const ch = childrenToCall[i];\n    const disposer = ch.onAttachedToRootStore(rootStore);\n    if (disposer) {\n      onAttachedDisposers.set(ch, disposer);\n    }\n  }\n});\nconst detachFromRootStore = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(\"detachFromRootStore\", (child) => {\n  const disposersToCall = [];\n  walkTree(child, (ch) => {\n    if (!attachedToRootStore.delete(ch)) {\n      return;\n    }\n    const disposer = onAttachedDisposers.get(ch);\n    if (disposer) {\n      const disposerAction = wrapInAction({\n        nameOrNameFn: HookAction.OnAttachedToRootStoreDisposer,\n        fn: disposer,\n        actionType: ActionContextActionType.Sync\n      }).bind(ch);\n      onAttachedDisposers.delete(ch);\n      disposersToCall.push(disposerAction);\n    }\n  }, WalkTreeMode.ChildrenFirst);\n  const disposersToCallLen = disposersToCall.length;\n  for (let i = 0; i < disposersToCallLen; i++) {\n    disposersToCall[i]();\n  }\n});\nconst rootStoreRegistry = /* @__PURE__ */ new WeakMap();\nconst getOrCreateRootStoreEntry = (node) => getOrCreate(rootStoreRegistry, node, () => ({\n  atom: (0,mobx__WEBPACK_IMPORTED_MODULE_0__.createAtom)(\"rootStore\"),\n  is: false\n}));\nconst registerRootStore = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(\"registerRootStore\", (node) => {\n  assertTweakedObject(node, \"node\");\n  const entry = getOrCreateRootStoreEntry(node);\n  if (entry.is) {\n    throw failure(\"object already registered as root store\");\n  }\n  if (!isRoot(node)) {\n    throw failure(\"a root store must not have a parent\");\n  }\n  entry.is = true;\n  attachToRootStore(node, node);\n  entry.atom.reportChanged();\n  return node;\n});\nconst unregisterRootStore = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(\"unregisterRootStore\", (node) => {\n  if (!isRootStore(node)) {\n    throw failure(\"not a root store\");\n  }\n  const entry = getOrCreateRootStoreEntry(node);\n  entry.is = false;\n  detachFromRootStore(node);\n  entry.atom.reportChanged();\n});\nfunction isRootStore(node) {\n  assertTweakedObject(node, \"node\");\n  return fastIsRootStore(node);\n}\nfunction fastIsRootStore(node) {\n  const entry = getOrCreateRootStoreEntry(node);\n  entry.atom.reportObserved();\n  return entry.is;\n}\nfunction getRootStore(node) {\n  assertTweakedObject(node, \"node\");\n  return fastGetRootStore(node);\n}\nfunction fastGetRootStore(node) {\n  const root = fastGetRoot(node);\n  return fastIsRootStore(root) ? root : void 0;\n}\nconst emptyPatchArray = [];\nclass InternalPatchRecorder {\n  constructor() {\n    __publicField(this, \"patches\", emptyPatchArray);\n    __publicField(this, \"invPatches\", emptyPatchArray);\n  }\n  reset() {\n    this.patches = emptyPatchArray;\n    this.invPatches = emptyPatchArray;\n  }\n  record(patches, invPatches) {\n    this.patches = patches;\n    this.invPatches = invPatches;\n  }\n  emit(obj) {\n    emitPatch(obj, this.patches, this.invPatches, true);\n    this.reset();\n  }\n}\nconst patchListeners = /* @__PURE__ */ new WeakMap();\nconst globalPatchListeners = [];\nfunction onPatches(subtreeRoot, listener) {\n  assertTweakedObject(subtreeRoot, \"subtreeRoot\");\n  assertIsFunction(listener, \"listener\");\n  if (!(0,mobx__WEBPACK_IMPORTED_MODULE_0__.isAction)(listener)) {\n    listener = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(listener.name || \"onPatchesListener\", listener);\n  }\n  let listenersForObject = patchListeners.get(subtreeRoot);\n  if (!listenersForObject) {\n    listenersForObject = [];\n    patchListeners.set(subtreeRoot, listenersForObject);\n  }\n  listenersForObject.push(listener);\n  return () => {\n    deleteFromArray(listenersForObject, listener);\n  };\n}\nfunction onGlobalPatches(listener) {\n  assertIsFunction(listener, \"listener\");\n  if (!(0,mobx__WEBPACK_IMPORTED_MODULE_0__.isAction)(listener)) {\n    listener = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(listener.name || \"onGlobalPatchesListener\", listener);\n  }\n  globalPatchListeners.push(listener);\n  return () => {\n    deleteFromArray(globalPatchListeners, listener);\n  };\n}\nfunction emitPatch(obj, patches, inversePatches, emitGlobally) {\n  if (patches.length <= 0 && inversePatches.length <= 0) {\n    return;\n  }\n  if (emitGlobally) {\n    for (let i = 0; i < globalPatchListeners.length; i++) {\n      const listener = globalPatchListeners[i];\n      listener(obj, patches, inversePatches);\n    }\n  }\n  const listenersForObject = patchListeners.get(obj);\n  if (listenersForObject) {\n    for (let i = 0; i < listenersForObject.length; i++) {\n      const listener = listenersForObject[i];\n      listener(patches, inversePatches);\n    }\n  }\n  const parentPath = fastGetParentPath(obj);\n  if (parentPath) {\n    const childPath = parentPath.path;\n    const newPatches = patches.map((p) => addPathToPatch(p, childPath));\n    const newInversePatches = inversePatches.map((p) => addPathToPatch(p, childPath));\n    emitPatch(parentPath.parent, newPatches, newInversePatches, false);\n  }\n}\nfunction addPathToPatch(patch, path) {\n  return {\n    ...patch,\n    path: [path, ...patch.path]\n  };\n}\nfunction setIfDifferent(target, key, value) {\n  const oldValue = target[key];\n  if (oldValue !== value || value === void 0 && !(key in target)) {\n    (0,mobx__WEBPACK_IMPORTED_MODULE_0__.set)(target, key, value);\n  }\n}\nfunction getDataModelMetadata(modelClassOrInstance) {\n  if (isDataModel(modelClassOrInstance)) {\n    return modelClassOrInstance.constructor[modelMetadataSymbol];\n  } else if (isDataModelClass(modelClassOrInstance)) {\n    return modelClassOrInstance[modelMetadataSymbol];\n  } else {\n    throw failure(`modelClassOrInstance must be a model class or instance`);\n  }\n}\nconst cachedDataModelTypeChecker = /* @__PURE__ */ new WeakMap();\nfunction typesDataModelData(modelClass2) {\n  if (!isDataModelClass(modelClass2) && typeof modelClass2 === \"function\") {\n    const modelClassFn = modelClass2;\n    const typeInfoGen = (t) => new DataModelDataTypeInfo(t, modelClassFn());\n    return lateTypeChecker(() => typesDataModelData(modelClassFn()), typeInfoGen);\n  } else {\n    const modelClazz = modelClass2;\n    const cachedTypeChecker = cachedDataModelTypeChecker.get(modelClazz);\n    if (cachedTypeChecker) {\n      return cachedTypeChecker;\n    }\n    const typeInfoGen = (t) => new DataModelDataTypeInfo(t, modelClazz);\n    const tc = lateTypeChecker(() => {\n      const modelInfo = modelInfoByClass.get(modelClazz);\n      const typeName = `DataModelData(${modelInfo.name})`;\n      const dataTypeChecker = getDataModelMetadata(modelClazz).dataType;\n      if (!dataTypeChecker) {\n        throw failure(`type checking cannot be performed over data model data of type '${modelInfo.name}' since that model type has no data type declared, consider adding a data type or using types.unchecked() instead`);\n      }\n      const resolvedDataTypeChecker = resolveTypeChecker(dataTypeChecker);\n      const thisTc = new TypeChecker(TypeCheckerBaseType.Object, (value, path, typeCheckedValue) => {\n        return resolvedDataTypeChecker.check(value, path, typeCheckedValue);\n      }, () => typeName, typeInfoGen, (value) => {\n        return resolvedDataTypeChecker.snapshotType(value) ? thisTc : null;\n      }, (sn) => {\n        return resolvedDataTypeChecker.fromSnapshotProcessor(sn);\n      }, (sn) => {\n        return resolvedDataTypeChecker.toSnapshotProcessor(sn);\n      });\n      return thisTc;\n    }, typeInfoGen);\n    cachedDataModelTypeChecker.set(modelClazz, tc);\n    return tc;\n  }\n}\nclass DataModelDataTypeInfo extends TypeInfo {\n  constructor(thisType, modelClass2) {\n    super(thisType);\n    __publicField(this, \"modelClass\");\n    __publicField(this, \"_props\", lazy(() => {\n      const objSchema = getInternalModelClassPropsInfo(this.modelClass);\n      const propTypes = {};\n      Object.keys(objSchema).forEach((propName) => {\n        const propData = objSchema[propName];\n        const type = propData._typeChecker;\n        let typeInfo;\n        if (type) {\n          typeInfo = getTypeInfo(type);\n        }\n        let hasDefault = false;\n        let defaultValue;\n        if (propData._defaultFn !== noDefaultValue) {\n          defaultValue = propData._defaultFn;\n          hasDefault = true;\n        } else if (propData._defaultValue !== noDefaultValue) {\n          defaultValue = propData._defaultValue;\n          hasDefault = true;\n        }\n        propTypes[propName] = {\n          type,\n          typeInfo,\n          hasDefault,\n          default: defaultValue\n        };\n      });\n      return propTypes;\n    }));\n    this.modelClass = modelClass2;\n  }\n  get props() {\n    return this._props();\n  }\n  get modelType() {\n    const modelInfo = modelInfoByClass.get(this.modelClass);\n    return modelInfo.name;\n  }\n}\nconst internalNewDataModel = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(\"newModel\", (origModelObj, tweakedData, options) => {\n  const { modelClass: _modelClass } = options;\n  const modelClass2 = _modelClass;\n  if (inDevMode) {\n    assertIsDataModelClass(modelClass2, \"modelClass\");\n  }\n  const modelObj = origModelObj;\n  const modelInfo = modelInfoByClass.get(modelClass2);\n  if (!modelInfo) {\n    throw failure(`no model info for class ${modelClass2.name} could be found - did you forget to add the @model decorator?`);\n  }\n  modelObj.$ = tweakedData;\n  if (inDevMode) {\n    makePropReadonly(modelObj, \"$\", true);\n  }\n  applyModelInitializers(modelClass2, modelObj);\n  if (isModelAutoTypeCheckingEnabled() && getDataModelMetadata(modelClass2).dataType) {\n    const err = modelObj.typeCheck();\n    if (err) {\n      err.throw();\n    }\n  }\n  return modelObj;\n});\nconst dataModelInstanceCache = /* @__PURE__ */ new WeakMap();\nclass BaseDataModel {\n  /**\n   * Creates an instance of a data model.\n   */\n  constructor(data) {\n    // just to make typing work properly\n    __publicField(this, _a);\n    /**\n     * Data part of the model, which is observable and will be serialized in snapshots.\n     * Use it if one of the data properties matches one of the model properties/functions.\n     * This also allows access to the backed values of transformed properties.\n     */\n    __publicField(this, \"$\");\n    if (!isObject(data)) {\n      throw failure(\"data models can only work over data objects\");\n    }\n    const { modelClass: _modelClass } = arguments[1];\n    const modelClass2 = _modelClass;\n    let tweakedData;\n    if (isTreeNode(data)) {\n      tweakedData = data;\n    } else {\n      const modelInfo = modelInfoByClass.get(modelClass2);\n      if (!modelInfo) {\n        throw failure(`no model info for class ${modelClass2.name} could be found - did you forget to add the @model decorator?`);\n      }\n      const modelProps = getInternalModelClassPropsInfo(modelClass2);\n      const initialData = Object.assign({}, data);\n      const modelPropsKeys = Object.keys(modelProps);\n      for (let i = 0; i < modelPropsKeys.length; i++) {\n        const k = modelPropsKeys[i];\n        const propData = modelProps[k];\n        let newValue = initialData[k];\n        let changed = false;\n        if (propData._transform) {\n          changed = true;\n          newValue = propData._transform.untransform(newValue, this, k);\n        }\n        if (newValue == null) {\n          if (propData._defaultFn !== noDefaultValue) {\n            changed = true;\n            newValue = propData._defaultFn();\n          } else if (propData._defaultValue !== noDefaultValue) {\n            changed = true;\n            newValue = propData._defaultValue;\n          }\n        }\n        if (changed) {\n          initialData[k] = newValue;\n        }\n      }\n      tweakedData = toTreeNode(initialData);\n    }\n    const instancesForModelClass = getOrCreate(dataModelInstanceCache, modelClass2, () => /* @__PURE__ */ new WeakMap());\n    const instance = instancesForModelClass.get(tweakedData);\n    if (instance) {\n      return instance;\n    }\n    instancesForModelClass.set(tweakedData, this);\n    Object.setPrototypeOf(this, modelClass2.prototype);\n    const self = this;\n    delete self[propsTypeSymbol];\n    internalNewDataModel(this, tweakedData, {\n      modelClass: modelClass2\n    });\n  }\n  /**\n   * Performs a type check over the model instance.\n   * For this to work a data type has to be declared as part of the model properties.\n   *\n   * @returns A `TypeCheckError` or `null` if there is no error.\n   */\n  typeCheck() {\n    const type = typesDataModelData(this.constructor);\n    return typeCheck(type, this.$);\n  }\n  toString(options) {\n    const finalOptions = {\n      withData: true,\n      ...options\n    };\n    const modelInfo = modelInfoByClass.get(this.constructor);\n    const firstPart = `${this.constructor.name}#${modelInfo.name}`;\n    return finalOptions.withData ? `[${firstPart} ${JSON.stringify(getSnapshot(this))}]` : `[${firstPart}]`;\n  }\n}\n_a = propsTypeSymbol;\nconst baseDataModelPropNames = /* @__PURE__ */ new Set([\"onLazyInit\", \"$\", \"typeCheck\"]);\nfunction isDataModel(model2) {\n  return model2 instanceof BaseDataModel;\n}\nfunction assertIsDataModel(model2, argName, customErrMsg = \"must be a data model instance\") {\n  if (!isDataModel(model2)) {\n    throw failure(`${argName} ${customErrMsg}`);\n  }\n}\nfunction isDataModelClass(modelClass2) {\n  if (typeof modelClass2 !== \"function\") {\n    return false;\n  }\n  if (modelClass2 !== BaseDataModel && !(modelClass2.prototype instanceof BaseDataModel)) {\n    return false;\n  }\n  return true;\n}\nfunction assertIsDataModelClass(modelClass2, argName) {\n  if (typeof modelClass2 !== \"function\") {\n    throw failure(`${argName} must be a class`);\n  }\n  if (modelClass2 !== BaseDataModel && !(modelClass2.prototype instanceof BaseDataModel)) {\n    throw failure(`${argName} must extend DataModel`);\n  }\n}\nvar FrozenCheckMode;\n(function(FrozenCheckMode2) {\n  FrozenCheckMode2[\"DevModeOnly\"] = \"devModeOnly\";\n  FrozenCheckMode2[\"On\"] = \"on\";\n  FrozenCheckMode2[\"Off\"] = \"off\";\n})(FrozenCheckMode || (FrozenCheckMode = {}));\nconst frozenKey = \"$frozen\";\nclass Frozen {\n  /**\n   * Creates an instance of Frozen.\n   * Do not use directly, use `frozen` instead.\n   *\n   * @param dataToFreeze\n   * @param checkMode\n   */\n  constructor(dataToFreeze, checkMode = FrozenCheckMode.DevModeOnly) {\n    /**\n     * Frozen data, deeply immutable.\n     */\n    __publicField(this, \"data\");\n    const check = checkMode === FrozenCheckMode.On || inDevMode && checkMode === FrozenCheckMode.DevModeOnly;\n    if (check) {\n      checkDataIsSerializableAndFreeze(dataToFreeze);\n    }\n    this.data = dataToFreeze;\n    if (check) {\n      Object.freeze(this.data);\n    }\n    tweak(this, void 0);\n  }\n}\nfunction frozen(data, checkMode = FrozenCheckMode.DevModeOnly) {\n  return new Frozen(data, checkMode);\n}\nfunction checkDataIsSerializableAndFreeze(data) {\n  if (isPrimitive(data)) {\n    return;\n  }\n  if (Array.isArray(data)) {\n    const arrLen = data.length;\n    for (let i = 0; i < arrLen; i++) {\n      const v = data[i];\n      if (v === void 0 && !getGlobalConfig().allowUndefinedArrayElements) {\n        throw failure(\"undefined is not supported inside arrays since it is not serializable in JSON, consider using null instead\");\n      }\n      checkDataIsSerializableAndFreeze(v);\n    }\n    Object.freeze(data);\n    return;\n  }\n  if (isPlainObject(data)) {\n    const dataKeys = Object.keys(data);\n    const dataKeysLen = dataKeys.length;\n    for (let i = 0; i < dataKeysLen; i++) {\n      const k = dataKeys[i];\n      const v = data[k];\n      checkDataIsSerializableAndFreeze(k);\n      checkDataIsSerializableAndFreeze(v);\n    }\n    Object.freeze(data);\n    return;\n  }\n  throw failure(`frozen data must be plainly serializable to JSON, but ${data} is not`);\n}\nfunction isFrozenSnapshot(snapshot) {\n  return isPlainObject(snapshot) && frozenKey in snapshot;\n}\nvar TweakerPriority;\n(function(TweakerPriority2) {\n  TweakerPriority2[TweakerPriority2[\"Model\"] = 0] = \"Model\";\n  TweakerPriority2[TweakerPriority2[\"Array\"] = 1] = \"Array\";\n  TweakerPriority2[TweakerPriority2[\"PlainObject\"] = 2] = \"PlainObject\";\n  TweakerPriority2[TweakerPriority2[\"Frozen\"] = 3] = \"Frozen\";\n})(TweakerPriority || (TweakerPriority = {}));\nfunction tweakFrozen(frozenObj, parentPath) {\n  tweakedObjects.set(frozenObj, void 0);\n  setParent({\n    value: frozenObj,\n    parentPath,\n    indexChangeAllowed: false,\n    isDataObject: false,\n    // a frozen is not a value-type\n    cloneIfApplicable: false\n  });\n  setNewInternalSnapshot(frozenObj, { [frozenKey]: true, data: frozenObj.data }, void 0, true);\n  return frozenObj;\n}\nfunction registerFrozenTweaker() {\n  registerTweaker(TweakerPriority.Frozen, (value, parentPath) => {\n    if (value instanceof Frozen) {\n      return tweakFrozen(value, parentPath);\n    }\n    return void 0;\n  });\n}\nfunction findParent(child, predicate, maxDepth = 0) {\n  const foundParentPath = findParentPath(child, predicate, maxDepth);\n  return foundParentPath ? foundParentPath.parent : void 0;\n}\nfunction findParentPath(child, predicate, maxDepth = 0) {\n  assertTweakedObject(child, \"child\");\n  const path = [];\n  let current = child;\n  let depth = 0;\n  let parentPath;\n  while (parentPath = fastGetParentPath(current)) {\n    path.unshift(parentPath.path);\n    current = parentPath.parent;\n    if (predicate(current)) {\n      return {\n        parent: current,\n        path\n      };\n    }\n    depth++;\n    if (maxDepth > 0 && depth === maxDepth) {\n      break;\n    }\n  }\n  return void 0;\n}\nfunction getChildrenObjects(node, options) {\n  assertTweakedObject(node, \"node\");\n  if (!options || !options.deep) {\n    return getObjectChildren(node);\n  } else {\n    return getDeepObjectChildren(node).deep;\n  }\n}\nfunction findChildren(root, predicate, options) {\n  const children = getChildrenObjects(root, options);\n  const set2 = /* @__PURE__ */ new Set();\n  const iter = children.values();\n  let cur = iter.next();\n  while (!cur.done) {\n    if (predicate(cur.value)) {\n      set2.add(cur.value);\n    }\n    cur = iter.next();\n  }\n  return set2;\n}\nfunction onChildAttachedTo(target, fn, options) {\n  assertIsFunction(target, \"target\");\n  assertIsFunction(fn, \"fn\");\n  const opts = {\n    deep: false,\n    runForCurrentChildren: true,\n    ...options\n  };\n  const detachDisposers = /* @__PURE__ */ new WeakMap();\n  const runDetachDisposer = (n) => {\n    const detachDisposer = detachDisposers.get(n);\n    if (detachDisposer) {\n      detachDisposers.delete(n);\n      detachDisposer();\n    }\n  };\n  const addDetachDisposer = (n, disposer2) => {\n    if (disposer2) {\n      detachDisposers.set(n, disposer2);\n    }\n  };\n  const getChildrenObjectOpts = { deep: opts.deep };\n  const getCurrentChildren = () => {\n    let t = target();\n    assertTweakedObject(t, \"target()\");\n    const children = getChildrenObjects(t, getChildrenObjectOpts);\n    const set2 = /* @__PURE__ */ new Set();\n    const iter = children.values();\n    let cur = iter.next();\n    while (!cur.done) {\n      set2.add(cur.value);\n      cur = iter.next();\n    }\n    return set2;\n  };\n  const currentChildren = opts.runForCurrentChildren ? /* @__PURE__ */ new Set() : getCurrentChildren();\n  const disposer = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.reaction)(() => getCurrentChildren(), (newChildren) => {\n    const disposersToRun = [];\n    const currentChildrenIter = currentChildren.values();\n    let currentChildrenCur = currentChildrenIter.next();\n    while (!currentChildrenCur.done) {\n      const n = currentChildrenCur.value;\n      if (!newChildren.has(n)) {\n        currentChildren.delete(n);\n        disposersToRun.push(n);\n      }\n      currentChildrenCur = currentChildrenIter.next();\n    }\n    if (disposersToRun.length > 0) {\n      for (let i = disposersToRun.length - 1; i >= 0; i--) {\n        runDetachDisposer(disposersToRun[i]);\n      }\n    }\n    const newChildrenIter = newChildren.values();\n    let newChildrenCur = newChildrenIter.next();\n    while (!newChildrenCur.done) {\n      const n = newChildrenCur.value;\n      if (!currentChildren.has(n)) {\n        currentChildren.add(n);\n        addDetachDisposer(n, fn(n));\n      }\n      newChildrenCur = newChildrenIter.next();\n    }\n  }, {\n    fireImmediately: true\n  });\n  return (runDetachDisposers) => {\n    disposer();\n    if (runDetachDisposers) {\n      const currentChildrenIter = currentChildren.values();\n      let currentChildrenCur = currentChildrenIter.next();\n      while (!currentChildrenCur.done) {\n        const n = currentChildrenCur.value;\n        runDetachDisposer(n);\n        currentChildrenCur = currentChildrenIter.next();\n      }\n    }\n    currentChildren.clear();\n  };\n}\nfunction isChildOfParent(child, parent) {\n  assertTweakedObject(child, \"child\");\n  assertTweakedObject(parent, \"parent\");\n  let currentParent = fastGetParent(child);\n  while (currentParent) {\n    if (currentParent === parent) {\n      return true;\n    }\n    currentParent = fastGetParent(currentParent);\n  }\n  return false;\n}\nfunction isParentOfChild(parent, child) {\n  return isChildOfParent(child, parent);\n}\nlet typeCheckingAllowed = true;\nfunction withoutTypeChecking(fn) {\n  let oldTypeCheckingAllowed = typeCheckingAllowed;\n  typeCheckingAllowed = false;\n  try {\n    fn();\n  } finally {\n    typeCheckingAllowed = oldTypeCheckingAllowed;\n  }\n}\nfunction isTypeCheckingAllowed() {\n  return typeCheckingAllowed;\n}\nvar SnapshotterAndReconcilerPriority;\n(function(SnapshotterAndReconcilerPriority2) {\n  SnapshotterAndReconcilerPriority2[SnapshotterAndReconcilerPriority2[\"Array\"] = 0] = \"Array\";\n  SnapshotterAndReconcilerPriority2[SnapshotterAndReconcilerPriority2[\"Frozen\"] = 1] = \"Frozen\";\n  SnapshotterAndReconcilerPriority2[SnapshotterAndReconcilerPriority2[\"Model\"] = 2] = \"Model\";\n  SnapshotterAndReconcilerPriority2[SnapshotterAndReconcilerPriority2[\"PlainObject\"] = 3] = \"PlainObject\";\n})(SnapshotterAndReconcilerPriority || (SnapshotterAndReconcilerPriority = {}));\nfunction reconcileArraySnapshot(value, sn, modelPool) {\n  if (!isArray(value)) {\n    return fromSnapshot(sn);\n  }\n  const snapshotBeforeChanges = getSnapshot(value);\n  withoutTypeChecking(() => {\n    if (value.length > sn.length) {\n      value.splice(sn.length, value.length - sn.length);\n    }\n    for (let i = 0; i < value.length; i++) {\n      const oldValue = value[i];\n      const newValue = reconcileSnapshot(oldValue, sn[i], modelPool, value);\n      detachIfNeeded(newValue, oldValue, modelPool);\n      setIfDifferent(value, i, newValue);\n    }\n    for (let i = value.length; i < sn.length; i++) {\n      value.push(reconcileSnapshot(void 0, sn[i], modelPool, value));\n    }\n  });\n  runTypeCheckingAfterChange(value, void 0, snapshotBeforeChanges);\n  return value;\n}\nfunction registerArraySnapshotReconciler() {\n  registerReconciler(SnapshotterAndReconcilerPriority.Array, (value, sn, modelPool) => {\n    if (isArray(sn)) {\n      return reconcileArraySnapshot(value, sn, modelPool);\n    }\n    return void 0;\n  });\n}\nfunction reconcileFrozenSnapshot(value, sn) {\n  if (value instanceof Frozen && value.data === sn.data) {\n    return value;\n  }\n  return frozen(sn.data);\n}\nfunction registerFrozenSnapshotReconciler() {\n  registerReconciler(SnapshotterAndReconcilerPriority.Frozen, (value, sn) => {\n    if (isFrozenSnapshot(sn)) {\n      return reconcileFrozenSnapshot(value, sn);\n    }\n    return void 0;\n  });\n}\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, \"default\") ? x[\"default\"] : x;\n}\nvar es6 = function equal(a, b) {\n  if (a === b)\n    return true;\n  if (a && b && typeof a == \"object\" && typeof b == \"object\") {\n    if (a.constructor !== b.constructor)\n      return false;\n    var length, i, keys2;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length)\n        return false;\n      for (i = length; i-- !== 0; )\n        if (!equal(a[i], b[i]))\n          return false;\n      return true;\n    }\n    if (a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size)\n        return false;\n      for (i of a.entries())\n        if (!b.has(i[0]))\n          return false;\n      for (i of a.entries())\n        if (!equal(i[1], b.get(i[0])))\n          return false;\n      return true;\n    }\n    if (a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size)\n        return false;\n      for (i of a.entries())\n        if (!b.has(i[0]))\n          return false;\n      return true;\n    }\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length)\n        return false;\n      for (i = length; i-- !== 0; )\n        if (a[i] !== b[i])\n          return false;\n      return true;\n    }\n    if (a.constructor === RegExp)\n      return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf)\n      return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString)\n      return a.toString() === b.toString();\n    keys2 = Object.keys(a);\n    length = keys2.length;\n    if (length !== Object.keys(b).length)\n      return false;\n    for (i = length; i-- !== 0; )\n      if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))\n        return false;\n    for (i = length; i-- !== 0; ) {\n      var key = keys2[i];\n      if (!equal(a[key], b[key]))\n        return false;\n    }\n    return true;\n  }\n  return a !== a && b !== b;\n};\nconst fastDeepEqual = /* @__PURE__ */ getDefaultExportFromCjs(es6);\nfunction byModelTypeAndIdKey(modelType, modelId) {\n  return modelType + \" \" + modelId;\n}\nclass ModelPool {\n  constructor(root) {\n    __publicField(this, \"pool\");\n    var _a2;\n    root = (_a2 = dataObjectParent.get(root)) != null ? _a2 : root;\n    this.pool = getDeepChildrenModels(getDeepObjectChildren(root));\n  }\n  findModelByTypeAndId(modelType, modelId) {\n    return modelId ? this.pool.get(byModelTypeAndIdKey(modelType, modelId)) : void 0;\n  }\n  findModelForSnapshot(sn) {\n    if (!isModelSnapshot(sn)) {\n      return void 0;\n    }\n    const modelType = sn[modelTypeKey];\n    const modelInfo = getModelInfoForName(modelType);\n    const modelIdPropertyName = getModelIdPropertyName(modelInfo.class);\n    return modelIdPropertyName ? this.findModelByTypeAndId(sn[modelTypeKey], sn[modelIdPropertyName]) : void 0;\n  }\n}\nconst getDeepChildrenModels = registerDeepObjectChildrenExtension({\n  initData() {\n    return /* @__PURE__ */ new Map();\n  },\n  addNode(node, data) {\n    if (isModel(node)) {\n      const id = node[modelIdKey];\n      if (id) {\n        data.set(byModelTypeAndIdKey(node[modelTypeKey], id), node);\n      }\n    }\n  }\n});\nfunction applySnapshot(node, snapshot) {\n  assertTweakedObject(node, \"node\");\n  assertIsObject(snapshot, \"snapshot\");\n  wrappedInternalApplySnapshot().call(node, snapshot);\n}\nfunction internalApplySnapshot(sn) {\n  const obj = this;\n  const reconcile = () => {\n    const modelPool = new ModelPool(obj);\n    const ret = reconcileSnapshot(obj, sn, modelPool, void 0);\n    if (inDevMode) {\n      if (ret !== obj) {\n        throw failure(\"assertion failed: reconciled object has to be the same\");\n      }\n    }\n  };\n  if (isArray(sn)) {\n    if (!isArray(obj)) {\n      throw failure(\"if the snapshot is an array the target must be an array too\");\n    }\n    return reconcile();\n  }\n  if (isFrozenSnapshot(sn)) {\n    throw failure(\"applySnapshot cannot be used over frozen objects\");\n  }\n  if (isPlainObject(sn) && sn[modelTypeKey] === void 0 && isModel(obj)) {\n    const modelInfo = modelInfoByClass.get(obj.constructor);\n    sn = { ...sn, [modelTypeKey]: modelInfo.name };\n  }\n  if (isModelSnapshot(sn)) {\n    const type = sn[modelTypeKey];\n    const modelInfo = getModelInfoForName(type);\n    if (!modelInfo) {\n      throw failure(`model with name \"${type}\" not found in the registry`);\n    }\n    if (!isModel(obj)) {\n      throw failure(`the target for a model snapshot must be a model instance`);\n    }\n    if (obj[modelTypeKey] !== type) {\n      throw failure(`snapshot model type '${type}' does not match target model type '${obj[modelTypeKey]}'`);\n    }\n    const modelIdPropertyName = getModelIdPropertyName(modelInfo.class);\n    if (modelIdPropertyName) {\n      const id = sn[modelIdPropertyName];\n      if (obj[modelIdKey] !== id) {\n        throw failure(`snapshot model id '${id}' does not match target model id '${obj[modelIdKey]}'`);\n      }\n    }\n    return reconcile();\n  }\n  if (isPlainObject(sn)) {\n    if (!isPlainObject(obj) && !(0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableObject)(obj)) {\n      throw failure(\"if the snapshot is an object the target must be an object too\");\n    }\n    return reconcile();\n  }\n  if (isMap(sn)) {\n    throw failure(\"a snapshot must not contain maps\");\n  }\n  if (isSet(sn)) {\n    throw failure(\"a snapshot must not contain sets\");\n  }\n  throw failure(`unsupported snapshot - ${sn}`);\n}\nconst wrappedInternalApplySnapshot = lazy(() => wrapInAction({\n  nameOrNameFn: BuiltInAction.ApplySnapshot,\n  fn: internalApplySnapshot,\n  actionType: ActionContextActionType.Sync\n}));\nfunction onSnapshot(nodeOrFn, listener) {\n  const nodeFn = typeof nodeOrFn === \"function\" ? nodeOrFn : () => nodeOrFn;\n  const node = nodeFn();\n  assertTweakedObject(node, \"node\");\n  let currentSnapshot = getSnapshot(node);\n  return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.reaction)(() => getSnapshot(nodeFn()), (newSnapshot) => {\n    const prevSn = currentSnapshot;\n    currentSnapshot = newSnapshot;\n    listener(newSnapshot, prevSn);\n  });\n}\nfunction deepEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (isTreeNode(a)) {\n    a = getSnapshot(a);\n  } else if ((0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservable)(a)) {\n    a = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.toJS)(a, toJSOptions);\n  }\n  if (isTreeNode(b)) {\n    b = getSnapshot(b);\n  } else if ((0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservable)(b)) {\n    b = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.toJS)(b, toJSOptions);\n  }\n  return fastDeepEqual(a, b);\n}\nconst toJSOptions = getMobxVersion() >= 6 ? void 0 : {\n  exportMapsAsObjects: false,\n  recurseEverything: false\n};\nfunction reconcileModelSnapshot(value, sn, modelPool, parent) {\n  const type = sn[modelTypeKey];\n  const modelInfo = getModelInfoForName(type);\n  if (!modelInfo) {\n    throw failure(`model with name \"${type}\" not found in the registry`);\n  }\n  const modelInPool = modelPool.findModelForSnapshot(sn);\n  if (modelInPool) {\n    value = modelInPool;\n  }\n  if (!isModel(value) || value[modelTypeKey] !== type) {\n    return fromSnapshot(sn);\n  }\n  const modelClass2 = modelInfo.class;\n  const modelProps = getInternalModelClassPropsInfo(modelClass2);\n  const modelIdPropertyName = getModelIdPropertyName(modelClass2);\n  if (modelIdPropertyName) {\n    const id = sn[modelIdPropertyName];\n    if (value[modelIdKey] !== id) {\n      return fromSnapshot(sn);\n    }\n  } else if (isArray(parent)) {\n    if (!deepEquals(value, sn)) {\n      return fromSnapshot(sn);\n    }\n  }\n  const modelObj = value;\n  const snapshotBeforeChanges = getSnapshot(modelObj);\n  withoutTypeChecking(() => {\n    const modelClass22 = modelObj.constructor;\n    const processedSn = modelClass22.fromSnapshotProcessor ? modelClass22.fromSnapshotProcessor(sn) : sn;\n    const data = modelObj.$;\n    const dataKeys = Object.keys(data);\n    const dataKeysLen = dataKeys.length;\n    for (let i = 0; i < dataKeysLen; i++) {\n      const k = dataKeys[i];\n      if (!(k in processedSn)) {\n        const modelProp = modelProps[k];\n        const defaultValue = modelProp ? getModelPropDefaultValue(modelProp) : noDefaultValue;\n        if (defaultValue === noDefaultValue) {\n          (0,mobx__WEBPACK_IMPORTED_MODULE_0__.remove)(data, k);\n        } else {\n          setIfDifferent(data, k, defaultValue);\n        }\n      }\n    }\n    const processedSnKeys = Object.keys(processedSn);\n    const processedSnKeysLen = processedSnKeys.length;\n    for (let i = 0; i < processedSnKeysLen; i++) {\n      const k = processedSnKeys[i];\n      if (!isReservedModelKey(k)) {\n        const v = processedSn[k];\n        const oldValue = data[k];\n        let newValue = reconcileSnapshot(oldValue, v, modelPool, modelObj);\n        if (newValue == null) {\n          const modelProp = modelProps[k];\n          const defaultValue = modelProp ? getModelPropDefaultValue(modelProp) : noDefaultValue;\n          if (defaultValue !== noDefaultValue) {\n            newValue = defaultValue;\n          }\n        }\n        detachIfNeeded(newValue, oldValue, modelPool);\n        setIfDifferent(data, k, newValue);\n      }\n    }\n  });\n  runTypeCheckingAfterChange(modelObj, void 0, snapshotBeforeChanges);\n  return modelObj;\n}\nfunction registerModelSnapshotReconciler() {\n  registerReconciler(SnapshotterAndReconcilerPriority.Model, (value, sn, modelPool, parent) => {\n    if (isModelSnapshot(sn)) {\n      return reconcileModelSnapshot(value, sn, modelPool, parent);\n    }\n    return void 0;\n  });\n}\nfunction reconcilePlainObjectSnapshot(value, sn, modelPool) {\n  if (!isPlainObject(value) && !(0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableObject)(value)) {\n    return fromSnapshot(sn);\n  }\n  const plainObj = value;\n  const snapshotBeforeChanges = getSnapshot(plainObj);\n  withoutTypeChecking(() => {\n    const plainObjKeys = Object.keys(plainObj);\n    const plainObjKeysLen = plainObjKeys.length;\n    for (let i = 0; i < plainObjKeysLen; i++) {\n      const k = plainObjKeys[i];\n      if (!(k in sn)) {\n        (0,mobx__WEBPACK_IMPORTED_MODULE_0__.remove)(plainObj, k);\n      }\n    }\n    const snKeys = Object.keys(sn);\n    const snKeysLen = snKeys.length;\n    for (let i = 0; i < snKeysLen; i++) {\n      const k = snKeys[i];\n      const v = sn[k];\n      const oldValue = plainObj[k];\n      const newValue = reconcileSnapshot(oldValue, v, modelPool, plainObj);\n      detachIfNeeded(newValue, oldValue, modelPool);\n      setIfDifferent(plainObj, k, newValue);\n    }\n  });\n  runTypeCheckingAfterChange(plainObj, void 0, snapshotBeforeChanges);\n  return plainObj;\n}\nfunction registerPlainObjectSnapshotReconciler() {\n  registerReconciler(SnapshotterAndReconcilerPriority.PlainObject, (value, sn, modelPool) => {\n    if (isPlainObject(sn)) {\n      return reconcilePlainObjectSnapshot(value, sn, modelPool);\n    }\n    return void 0;\n  });\n}\nlet defaultReconcilersRegistered = false;\nfunction registerDefaultReconcilers() {\n  if (defaultReconcilersRegistered) {\n    return;\n  }\n  defaultReconcilersRegistered = true;\n  registerArraySnapshotReconciler();\n  registerFrozenSnapshotReconciler();\n  registerModelSnapshotReconciler();\n  registerPlainObjectSnapshotReconciler();\n}\nconst reconcilers = [];\nfunction registerReconciler(priority, reconciler) {\n  reconcilers.push({ priority, reconciler });\n  reconcilers.sort((a, b) => a.priority - b.priority);\n}\nfunction reconcileSnapshot(value, sn, modelPool, parent) {\n  if (isPrimitive(sn)) {\n    return sn;\n  }\n  if (getSnapshot(value) === sn) {\n    return value;\n  }\n  registerDefaultReconcilers();\n  const reconcilersLen = reconcilers.length;\n  for (let i = 0; i < reconcilersLen; i++) {\n    const { reconciler } = reconcilers[i];\n    const ret = reconciler(value, sn, modelPool, parent);\n    if (ret !== void 0) {\n      return ret;\n    }\n  }\n  if (isMap(sn)) {\n    throw failure(\"a snapshot must not contain maps\");\n  }\n  if (isSet(sn)) {\n    throw failure(\"a snapshot must not contain sets\");\n  }\n  throw failure(`unsupported snapshot - ${sn}`);\n}\nfunction detachIfNeeded(newValue, oldValue, modelPool) {\n  if (newValue === oldValue) {\n    return;\n  }\n  if (isModel(newValue) && modelPool.findModelByTypeAndId(newValue[modelTypeKey], newValue[modelIdKey])) {\n    const parentPath = fastGetParentPathIncludingDataObjects(newValue);\n    if (parentPath) {\n      (0,mobx__WEBPACK_IMPORTED_MODULE_0__.set)(parentPath.parent, parentPath.path, null);\n    }\n  }\n}\nfunction applyPatches(node, patches, reverse = false) {\n  assertTweakedObject(node, \"node\");\n  if (patches.length <= 0) {\n    return;\n  }\n  wrappedInternalApplyPatches().call(node, patches, reverse);\n}\nfunction internalApplyPatches(patches, reverse = false) {\n  const obj = this;\n  const modelPool = new ModelPool(obj);\n  if (reverse) {\n    let i = patches.length;\n    while (i--) {\n      const p = patches[i];\n      if (!isArray(p)) {\n        applySinglePatch(obj, p, modelPool);\n      } else {\n        let j = p.length;\n        while (j--) {\n          applySinglePatch(obj, p[j], modelPool);\n        }\n      }\n    }\n  } else {\n    const len = patches.length;\n    for (let i = 0; i < len; i++) {\n      const p = patches[i];\n      if (!isArray(p)) {\n        applySinglePatch(obj, p, modelPool);\n      } else {\n        const len2 = p.length;\n        for (let j = 0; j < len2; j++) {\n          applySinglePatch(obj, p[j], modelPool);\n        }\n      }\n    }\n  }\n}\nconst wrappedInternalApplyPatches = lazy(() => wrapInAction({\n  nameOrNameFn: BuiltInAction.ApplyPatches,\n  fn: internalApplyPatches,\n  actionType: ActionContextActionType.Sync\n}));\nfunction applySinglePatch(obj, patch, modelPool) {\n  const { target, prop: prop2 } = pathArrayToObjectAndProp(obj, patch.path);\n  if (isArray(target)) {\n    switch (patch.op) {\n      case \"add\": {\n        const index = +prop2;\n        const newValue = reconcileSnapshot(void 0, patch.value, modelPool, target);\n        target.splice(index, 0, newValue);\n        break;\n      }\n      case \"remove\": {\n        const index = +prop2;\n        target.splice(index, 1);\n        break;\n      }\n      case \"replace\": {\n        if (prop2 === \"length\") {\n          target.length = patch.value;\n        } else {\n          const index = +prop2;\n          const newValue = reconcileSnapshot(target[index], patch.value, modelPool, target);\n          setIfDifferent(target, index, newValue);\n        }\n        break;\n      }\n      default:\n        throw failure(`unsupported patch operation: ${patch.op}`);\n    }\n  } else {\n    switch (patch.op) {\n      case \"add\": {\n        const newValue = reconcileSnapshot(void 0, patch.value, modelPool, target);\n        setIfDifferent(target, prop2, newValue);\n        break;\n      }\n      case \"remove\": {\n        (0,mobx__WEBPACK_IMPORTED_MODULE_0__.remove)(target, prop2);\n        break;\n      }\n      case \"replace\": {\n        const newValue = reconcileSnapshot(target[prop2], patch.value, modelPool, target);\n        setIfDifferent(target, prop2, newValue);\n        break;\n      }\n      default:\n        throw failure(`unsupported patch operation: ${patch.op}`);\n    }\n  }\n}\nfunction pathArrayToObjectAndProp(obj, path) {\n  if (inDevMode) {\n    if (!isArray(path)) {\n      throw failure(`invalid path: ${path}`);\n    }\n  }\n  let target = modelToDataNode(obj);\n  if (path.length === 0) {\n    return {\n      target\n    };\n  }\n  for (let i = 0; i <= path.length - 2; i++) {\n    target = modelToDataNode(target[path[i]]);\n  }\n  return {\n    target,\n    prop: path[path.length - 1]\n  };\n}\nfunction runTypeCheckingAfterChange(obj, patchRecorder2, snapshotBeforeChanges) {\n  if (!isTypeCheckingAllowed()) {\n    return;\n  }\n  invalidateCachedTypeCheckerResult(obj);\n  if (isModelAutoTypeCheckingEnabled()) {\n    const parentModelWithTypeChecker = findNearestParentModelWithTypeChecker(obj);\n    if (parentModelWithTypeChecker) {\n      const err = parentModelWithTypeChecker.typeCheck();\n      if (err) {\n        runWithoutSnapshotOrPatches(() => {\n          if (patchRecorder2) {\n            internalApplyPatches.call(obj, patchRecorder2.invPatches, true);\n          } else if (snapshotBeforeChanges) {\n            internalApplySnapshot.call(obj, snapshotBeforeChanges);\n          }\n        });\n        err.throw();\n      }\n    }\n  }\n}\nfunction findNearestParentModelWithTypeChecker(child) {\n  const actualChild = dataToModelNode(child);\n  if (child !== actualChild) {\n    child = actualChild;\n    if (isModel(child) && !!getModelMetadata(child).dataType) {\n      return child;\n    }\n  }\n  return findParent(child, (parent) => {\n    return isModel(parent) && !!getModelMetadata(parent).dataType;\n  });\n}\nfunction tweakPlainObject(value, parentPath, snapshotModelType, doNotTweakChildren, isDataObject) {\n  const originalObj = value;\n  const tweakedObj = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableObject)(originalObj) ? originalObj : mobx__WEBPACK_IMPORTED_MODULE_0__.observable.object({}, void 0, observableOptions$2);\n  let interceptDisposer;\n  let observeDisposer;\n  const untweak = () => {\n    interceptDisposer();\n    observeDisposer();\n  };\n  tweakedObjects.set(tweakedObj, untweak);\n  setParent({\n    value: tweakedObj,\n    parentPath,\n    indexChangeAllowed: false,\n    isDataObject,\n    // an object shouldn't be cloned\n    cloneIfApplicable: false\n  });\n  let untransformedSn = {};\n  const originalObjKeys = Object.keys(originalObj);\n  const originalObjKeysLen = originalObjKeys.length;\n  for (let i = 0; i < originalObjKeysLen; i++) {\n    const k = originalObjKeys[i];\n    const v = originalObj[k];\n    if (isPrimitive(v)) {\n      if (!doNotTweakChildren) {\n        setIfDifferent(tweakedObj, k, v);\n      }\n      untransformedSn[k] = v;\n    } else {\n      const path = { parent: tweakedObj, path: k };\n      let tweakedValue;\n      if (doNotTweakChildren) {\n        tweakedValue = v;\n        setParent({\n          value: tweakedValue,\n          parentPath: path,\n          indexChangeAllowed: false,\n          isDataObject: false,\n          // the value is already a new value (the result of a fromSnapshot)\n          cloneIfApplicable: false\n        });\n      } else {\n        tweakedValue = tweak(v, path);\n        setIfDifferent(tweakedObj, k, tweakedValue);\n      }\n      const valueSn = getInternalSnapshot(tweakedValue);\n      untransformedSn[k] = valueSn.transformed;\n    }\n  }\n  let transformFn;\n  if (snapshotModelType) {\n    untransformedSn[modelTypeKey] = snapshotModelType;\n    const modelInfo = getModelInfoForName(snapshotModelType);\n    if (!modelInfo) {\n      throw failure(`model with name \"${snapshotModelType}\" not found in the registry`);\n    }\n    const originalTransformFn = modelInfo.class.toSnapshotProcessor;\n    if (originalTransformFn) {\n      transformFn = (sn) => originalTransformFn(sn, dataToModelNode(tweakedObj));\n    }\n  }\n  setNewInternalSnapshot(isDataObject ? dataToModelNode(tweakedObj) : tweakedObj, untransformedSn, transformFn);\n  interceptDisposer = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.intercept)(tweakedObj, interceptObjectMutation);\n  observeDisposer = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.observe)(tweakedObj, objectDidChange);\n  return tweakedObj;\n}\nconst observableOptions$2 = {\n  deep: false\n};\nfunction mutateSet$1(k, v, sn) {\n  sn[k] = v;\n}\nfunction mutateDelete(k, sn) {\n  delete sn[k];\n}\nconst patchRecorder$2 = new InternalPatchRecorder();\nfunction objectDidChange(change) {\n  const obj = change.object;\n  const actualNode = dataToModelNode(obj);\n  let oldUntransformedSn = getInternalSnapshot(actualNode).untransformed;\n  patchRecorder$2.reset();\n  let mutate;\n  switch (change.type) {\n    case \"add\":\n    case \"update\":\n      mutate = objectDidChangeAddOrUpdate(change, oldUntransformedSn);\n      break;\n    case \"remove\":\n      mutate = objectDidChangeRemove(change, oldUntransformedSn);\n      break;\n  }\n  runTypeCheckingAfterChange(obj, patchRecorder$2);\n  if (!runningWithoutSnapshotOrPatches && mutate) {\n    updateInternalSnapshot(actualNode, mutate);\n    patchRecorder$2.emit(actualNode);\n  }\n}\nfunction objectDidChangeRemove(change, oldUntransformedSn) {\n  const k = change.name;\n  const oldVal = oldUntransformedSn[k];\n  const mutate = mutateDelete.bind(void 0, k);\n  const path = [k];\n  patchRecorder$2.record([\n    {\n      op: \"remove\",\n      path\n    }\n  ], [\n    {\n      op: \"add\",\n      path,\n      value: freezeInternalSnapshot(oldVal)\n    }\n  ]);\n  return mutate;\n}\nfunction objectDidChangeAddOrUpdate(change, oldUntransformedSn) {\n  const k = change.name;\n  const val = change.newValue;\n  const oldVal = oldUntransformedSn[k];\n  let newVal;\n  if (isPrimitive(val)) {\n    newVal = val;\n  } else {\n    const valueSn = getInternalSnapshot(val);\n    newVal = valueSn.transformed;\n  }\n  const mutate = mutateSet$1.bind(void 0, k, newVal);\n  const path = [k];\n  if (change.type === \"add\") {\n    patchRecorder$2.record([\n      {\n        op: \"add\",\n        path,\n        value: freezeInternalSnapshot(newVal)\n      }\n    ], [\n      {\n        op: \"remove\",\n        path\n      }\n    ]);\n  } else {\n    patchRecorder$2.record([\n      {\n        op: \"replace\",\n        path,\n        value: freezeInternalSnapshot(newVal)\n      }\n    ], [\n      {\n        op: \"replace\",\n        path,\n        value: freezeInternalSnapshot(oldVal)\n      }\n    ]);\n  }\n  return mutate;\n}\nfunction interceptObjectMutation(change) {\n  assertCanWrite();\n  if (typeof change.name === \"symbol\") {\n    throw failure(\"symbol properties are not supported\");\n  }\n  switch (change.type) {\n    case \"add\":\n      change.newValue = tweak(change.newValue, {\n        parent: change.object,\n        path: \"\" + change.name\n      });\n      break;\n    case \"remove\": {\n      const oldVal = change.object[change.name];\n      tweak(oldVal, void 0);\n      break;\n    }\n    case \"update\": {\n      const oldVal = change.object[change.name];\n      const newVal = change.newValue;\n      if (newVal !== oldVal) {\n        tweak(oldVal, void 0);\n        change.newValue = tweak(change.newValue, {\n          parent: change.object,\n          path: \"\" + change.name\n        });\n      }\n      break;\n    }\n  }\n  return change;\n}\nfunction registerPlainObjectTweaker() {\n  registerTweaker(TweakerPriority.PlainObject, (value, parentPath) => {\n    if ((0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableObject)(value) || isPlainObject(value)) {\n      return tweakPlainObject(value, parentPath, void 0, false, false);\n    }\n    return void 0;\n  });\n}\nlet defaultTweakersRegistered = false;\nfunction registerDefaultTweakers() {\n  if (defaultTweakersRegistered) {\n    return;\n  }\n  defaultTweakersRegistered = true;\n  registerArrayTweaker();\n  registerFrozenTweaker();\n  registerModelTweaker();\n  registerPlainObjectTweaker();\n}\nfunction toTreeNode(arg1, arg2) {\n  let value, type;\n  let hasType;\n  if (arguments.length === 1) {\n    hasType = false;\n    value = arg1;\n  } else {\n    type = arg1;\n    hasType = true;\n    value = arg2;\n  }\n  if (!isObject(value)) {\n    throw failure(\"only objects can be turned into tree nodes\");\n  }\n  if (hasType && isModelAutoTypeCheckingEnabled()) {\n    const errors = typeCheck(type, value);\n    if (errors) {\n      errors.throw();\n    }\n  }\n  if (!isTweakedObject(value, true)) {\n    return tweak(value, void 0);\n  }\n  return value;\n}\nconst tweakers = [];\nfunction registerTweaker(priority, tweaker) {\n  tweakers.push({ priority, tweaker });\n  tweakers.sort((a, b) => a.priority - b.priority);\n}\nfunction internalTweak(value, parentPath) {\n  if (isPrimitive(value)) {\n    return value;\n  }\n  if (isTweakedObject(value, true)) {\n    value = setParent({\n      value,\n      parentPath,\n      indexChangeAllowed: false,\n      isDataObject: false,\n      cloneIfApplicable: true\n    });\n    return value;\n  }\n  if (isDataModel(value)) {\n    throw failure(\"data models are not directly supported. you may insert the data in the tree instead ('$' property).\");\n  }\n  registerDefaultTweakers();\n  const tweakersLen = tweakers.length;\n  for (let i = 0; i < tweakersLen; i++) {\n    const { tweaker } = tweakers[i];\n    const tweakedVal = tweaker(value, parentPath);\n    if (tweakedVal !== void 0) {\n      return tweakedVal;\n    }\n  }\n  if (isMap(value)) {\n    throw failure(\"maps are not directly supported. consider using 'ObjectMap' / 'asMap' instead.\");\n  }\n  if (isSet(value)) {\n    throw failure(\"sets are not directly supported. consider using 'ArraySet' / 'asSet' instead.\");\n  }\n  throw failure(`tweak can only work over models, observable objects/arrays, or primitives, but got ${value} instead`);\n}\nconst tweak = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(\"tweak\", internalTweak);\nfunction tryUntweak(value) {\n  if (isPrimitive(value)) {\n    return void 0;\n  }\n  if (inDevMode) {\n    if (!fastGetParent(value)) {\n      throw failure(\"assertion failed: object cannot be untweaked if it does not have a parent\");\n    }\n  }\n  const untweaker = tweakedObjects.get(value);\n  if (!untweaker) {\n    return void 0;\n  }\n  const children = Array.from(getObjectChildren(value).values());\n  for (let i = 0; i < children.length; i++) {\n    setParent({\n      value: children[i],\n      parentPath: void 0,\n      indexChangeAllowed: false,\n      isDataObject: false,\n      // no need to clone if unsetting the parent\n      cloneIfApplicable: false\n    });\n  }\n  return () => {\n    untweaker();\n    tweakedObjects.delete(value);\n    unsetInternalSnapshot(value);\n  };\n}\nfunction tweakArray(value, parentPath, doNotTweakChildren) {\n  const originalArr = value;\n  const arrLn = originalArr.length;\n  const tweakedArr = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableArray)(originalArr) ? originalArr : mobx__WEBPACK_IMPORTED_MODULE_0__.observable.array(void 0, observableOptions$1);\n  if (tweakedArr !== originalArr) {\n    tweakedArr.length = originalArr.length;\n  }\n  let interceptDisposer;\n  let observeDisposer;\n  const untweak = () => {\n    interceptDisposer();\n    observeDisposer();\n  };\n  tweakedObjects.set(tweakedArr, untweak);\n  setParent({\n    value: tweakedArr,\n    parentPath,\n    indexChangeAllowed: false,\n    isDataObject: false,\n    // arrays shouldn't be cloned anyway\n    cloneIfApplicable: false\n  });\n  const untransformedSn = [];\n  untransformedSn.length = arrLn;\n  for (let i = 0; i < arrLn; i++) {\n    const v = originalArr[i];\n    if (isPrimitive(v)) {\n      if (!doNotTweakChildren) {\n        setIfDifferent(tweakedArr, i, v);\n      }\n      untransformedSn[i] = v;\n    } else {\n      const path = { parent: tweakedArr, path: i };\n      let tweakedValue;\n      if (doNotTweakChildren) {\n        tweakedValue = v;\n        setParent({\n          value: tweakedValue,\n          parentPath: path,\n          indexChangeAllowed: false,\n          isDataObject: false,\n          // the value is already a new value (the result of a fromSnapshot)\n          cloneIfApplicable: false\n        });\n      } else {\n        tweakedValue = tweak(v, path);\n        setIfDifferent(tweakedArr, i, tweakedValue);\n      }\n      const valueSn = getInternalSnapshot(tweakedValue);\n      untransformedSn[i] = valueSn.transformed;\n    }\n  }\n  setNewInternalSnapshot(tweakedArr, untransformedSn, void 0);\n  interceptDisposer = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.intercept)(tweakedArr, interceptArrayMutation.bind(void 0, tweakedArr));\n  observeDisposer = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.observe)(tweakedArr, arrayDidChange);\n  return tweakedArr;\n}\nfunction mutateSet(k, v, sn) {\n  sn[k] = v;\n}\nfunction mutateSplice(index, removedCount, addedItems, sn) {\n  sn.splice(index, removedCount, ...addedItems);\n}\nconst patchRecorder$1 = new InternalPatchRecorder();\nfunction arrayDidChange(change) {\n  const arr = change.object;\n  let oldSnapshot = getInternalSnapshot(arr).untransformed;\n  patchRecorder$1.reset();\n  let mutate;\n  switch (change.type) {\n    case \"splice\":\n      mutate = arrayDidChangeSplice(change, oldSnapshot);\n      break;\n    case \"update\":\n      mutate = arrayDidChangeUpdate(change, oldSnapshot);\n      break;\n  }\n  runTypeCheckingAfterChange(arr, patchRecorder$1);\n  if (!runningWithoutSnapshotOrPatches && mutate) {\n    updateInternalSnapshot(arr, mutate);\n    patchRecorder$1.emit(arr);\n  }\n}\nconst undefinedInsideArrayErrorMsg = \"undefined is not supported inside arrays since it is not serializable in JSON, consider using null instead\";\nfunction arrayDidChangeUpdate(change, oldSnapshot) {\n  const k = change.index;\n  const val = change.newValue;\n  const oldVal = oldSnapshot[k];\n  let newVal;\n  if (isPrimitive(val)) {\n    newVal = val;\n  } else {\n    const valueSn = getInternalSnapshot(val);\n    newVal = valueSn.transformed;\n  }\n  const mutate = mutateSet.bind(void 0, k, newVal);\n  const path = [k];\n  patchRecorder$1.record([\n    {\n      op: \"replace\",\n      path,\n      value: freezeInternalSnapshot(newVal)\n    }\n  ], [\n    {\n      op: \"replace\",\n      path,\n      value: freezeInternalSnapshot(oldVal)\n    }\n  ]);\n  return mutate;\n}\nfunction arrayDidChangeSplice(change, oldSnapshot) {\n  const index = change.index;\n  const addedCount = change.addedCount;\n  const removedCount = change.removedCount;\n  let addedItems = [];\n  addedItems.length = addedCount;\n  for (let i = 0; i < addedCount; i++) {\n    const v = change.added[i];\n    if (isPrimitive(v)) {\n      addedItems[i] = v;\n    } else {\n      addedItems[i] = getInternalSnapshot(v).transformed;\n    }\n  }\n  const oldLen = oldSnapshot.length;\n  const mutate = mutateSplice.bind(void 0, index, removedCount, addedItems);\n  const patches = [];\n  const invPatches = [];\n  if (addedCount === removedCount) {\n    const readdPatches = [];\n    const readdInvPatches = [];\n    let removed = 0;\n    for (let i = 0; i < addedCount; i++) {\n      const realIndex = index + i;\n      const newVal = getValueAfterSplice(oldSnapshot, realIndex, index, removedCount, addedItems);\n      const oldVal = oldSnapshot[realIndex];\n      if (newVal !== oldVal) {\n        const removePath = [realIndex - removed];\n        patches.push({\n          op: \"remove\",\n          path: removePath\n        });\n        invPatches.push({\n          op: \"remove\",\n          path: removePath\n        });\n        removed++;\n        const readdPath = [realIndex];\n        readdPatches.push({\n          op: \"add\",\n          path: readdPath,\n          value: freezeInternalSnapshot(newVal)\n        });\n        readdInvPatches.push({\n          op: \"add\",\n          path: readdPath,\n          value: freezeInternalSnapshot(oldVal)\n        });\n      }\n    }\n    patches.push(...readdPatches);\n    invPatches.push(...readdInvPatches);\n    invPatches.reverse();\n  } else {\n    const interimLen = oldLen - removedCount;\n    if (removedCount > 0) {\n      const removeUsingSetLength = index >= interimLen;\n      if (removeUsingSetLength) {\n        patches.push({\n          op: \"replace\",\n          path: [\"length\"],\n          value: interimLen\n        });\n      }\n      for (let i = removedCount - 1; i >= 0; i--) {\n        const realIndex = index + i;\n        const path = [realIndex];\n        if (!removeUsingSetLength) {\n          patches.push({\n            op: \"remove\",\n            path\n          });\n        }\n        invPatches.push({\n          op: \"add\",\n          path,\n          value: freezeInternalSnapshot(oldSnapshot[realIndex])\n        });\n      }\n    }\n    if (addedCount > 0) {\n      const restoreUsingSetLength = index >= interimLen;\n      if (restoreUsingSetLength) {\n        invPatches.push({\n          op: \"replace\",\n          path: [\"length\"],\n          value: interimLen\n        });\n      }\n      for (let i = 0; i < addedCount; i++) {\n        const realIndex = index + i;\n        const path = [realIndex];\n        patches.push({\n          op: \"add\",\n          path,\n          value: freezeInternalSnapshot(getValueAfterSplice(oldSnapshot, realIndex, index, removedCount, addedItems))\n        });\n        if (!restoreUsingSetLength) {\n          invPatches.push({\n            op: \"remove\",\n            path\n          });\n        }\n      }\n    }\n  }\n  patchRecorder$1.record(patches, invPatches);\n  return mutate;\n}\nfunction interceptArrayMutation(array, change) {\n  assertCanWrite();\n  switch (change.type) {\n    case \"splice\":\n      interceptArrayMutationSplice(change);\n      break;\n    case \"update\":\n      interceptArrayMutationUpdate(change, array);\n      break;\n  }\n  return change;\n}\nfunction interceptArrayMutationUpdate(change, array) {\n  if (inDevMode && !getGlobalConfig().allowUndefinedArrayElements && change.newValue === void 0) {\n    throw failure(undefinedInsideArrayErrorMsg);\n  }\n  const oldVal = array[change.index];\n  tweak(oldVal, void 0);\n  change.newValue = tweak(change.newValue, { parent: array, path: change.index });\n}\nfunction interceptArrayMutationSplice(change) {\n  if (inDevMode && !getGlobalConfig().allowUndefinedArrayElements) {\n    const len = change.added.length;\n    for (let i = 0; i < len; i++) {\n      const v = change.added[i];\n      if (v === void 0) {\n        throw failure(undefinedInsideArrayErrorMsg);\n      }\n    }\n  }\n  for (let i = 0; i < change.removedCount; i++) {\n    const removedValue = change.object[change.index + i];\n    tweak(removedValue, void 0);\n  }\n  for (let i = 0; i < change.added.length; i++) {\n    change.added[i] = tweak(change.added[i], {\n      parent: change.object,\n      path: change.index + i\n    });\n  }\n  const oldNextIndex = change.index + change.removedCount;\n  const newNextIndex = change.index + change.added.length;\n  if (oldNextIndex !== newNextIndex) {\n    for (let i = oldNextIndex, j = newNextIndex; i < change.object.length; i++, j++) {\n      setParent({\n        value: change.object[i],\n        parentPath: {\n          parent: change.object,\n          path: j\n        },\n        indexChangeAllowed: true,\n        isDataObject: false,\n        // just re-indexing\n        cloneIfApplicable: false\n      });\n    }\n  }\n}\nfunction registerArrayTweaker() {\n  registerTweaker(TweakerPriority.Array, (value, parentPath) => {\n    if (isArray(value)) {\n      return tweakArray(value, parentPath, false);\n    }\n    return void 0;\n  });\n}\nconst observableOptions$1 = {\n  deep: false\n};\nfunction getValueAfterSplice(array, i, index, remove2, addedItems) {\n  const base = i - index;\n  if (base < 0) {\n    return array[i];\n  }\n  if (base < addedItems.length) {\n    return addedItems[base];\n  }\n  return array[i - addedItems.length + remove2];\n}\nfunction fromArraySnapshot(sn, ctx) {\n  const arr = mobx__WEBPACK_IMPORTED_MODULE_0__.observable.array([], observableOptions);\n  const ln = sn.length;\n  for (let i = 0; i < ln; i++) {\n    arr.push(internalFromSnapshot(sn[i], ctx));\n  }\n  return tweakArray(arr, void 0, true);\n}\nfunction registerFromArraySnapshotter() {\n  registerSnapshotter(SnapshotterAndReconcilerPriority.Array, (sn, ctx) => {\n    if (isArray(sn)) {\n      return fromArraySnapshot(sn, ctx);\n    }\n    return void 0;\n  });\n}\nfunction registerFromFrozenSnapshotter() {\n  registerSnapshotter(SnapshotterAndReconcilerPriority.Frozen, (sn) => {\n    if (isFrozenSnapshot(sn)) {\n      return frozen(sn.data);\n    }\n    return void 0;\n  });\n}\nfunction fromModelSnapshot(sn, ctx) {\n  const type = sn[modelTypeKey];\n  if (!type) {\n    throw failure(`a model snapshot must contain a type key (${modelTypeKey}), but none was found`);\n  }\n  const modelInfo = getModelInfoForName(type);\n  if (!modelInfo) {\n    throw failure(`model with name \"${type}\" not found in the registry`);\n  }\n  const modelIdPropertyName = getModelIdPropertyName(modelInfo.class);\n  if (modelIdPropertyName && sn[modelIdPropertyName] === void 0) {\n    throw failure(`a model snapshot of type '${type}' must contain an id key (${modelIdPropertyName}), but none was found`);\n  }\n  return new modelInfo.class(void 0, {\n    snapshotInitialData: {\n      unprocessedSnapshot: sn,\n      snapshotToInitialData: ctx.snapshotToInitialData\n    },\n    generateNewIds: ctx.options.generateNewIds\n  });\n}\nfunction registerFromModelSnapshotter() {\n  registerSnapshotter(SnapshotterAndReconcilerPriority.Model, (sn, ctx) => {\n    if (isModelSnapshot(sn)) {\n      return fromModelSnapshot(sn, ctx);\n    }\n    return void 0;\n  });\n}\nfunction fromPlainObjectSnapshot(sn, ctx) {\n  const plainObj = mobx__WEBPACK_IMPORTED_MODULE_0__.observable.object({}, void 0, observableOptions);\n  const snKeys = Object.keys(sn);\n  const snKeysLen = snKeys.length;\n  for (let i = 0; i < snKeysLen; i++) {\n    const k = snKeys[i];\n    const v = sn[k];\n    (0,mobx__WEBPACK_IMPORTED_MODULE_0__.set)(plainObj, k, internalFromSnapshot(v, ctx));\n  }\n  return tweakPlainObject(plainObj, void 0, void 0, true, false);\n}\nfunction registerFromPlainObjectSnapshotter() {\n  registerSnapshotter(SnapshotterAndReconcilerPriority.PlainObject, (sn, ctx) => {\n    if (isPlainObject(sn)) {\n      return fromPlainObjectSnapshot(sn, ctx);\n    }\n    return void 0;\n  });\n}\nlet defaultSnapshottersRegistered = false;\nfunction registerDefaultSnapshotters() {\n  if (defaultSnapshottersRegistered) {\n    return;\n  }\n  defaultSnapshottersRegistered = true;\n  registerFromArraySnapshotter();\n  registerFromFrozenSnapshotter();\n  registerFromModelSnapshotter();\n  registerFromPlainObjectSnapshotter();\n}\nconst snapshotters = [];\nfunction registerSnapshotter(priority, snapshotter) {\n  snapshotters.push({ priority, snapshotter });\n  snapshotters.sort((a, b) => a.priority - b.priority);\n}\nfunction fromSnapshot(arg1, arg2, arg3) {\n  let snapshot;\n  let options;\n  if (isLateTypeChecker(arg1) || arg1 instanceof TypeChecker || isModelClass(arg1)) {\n    const typeChecker = resolveTypeChecker(arg1);\n    snapshot = typeChecker.fromSnapshotProcessor ? typeChecker.fromSnapshotProcessor(arg2) : arg2;\n    options = arg3;\n  } else {\n    snapshot = arg1;\n    options = arg2;\n  }\n  return fromSnapshotAction(snapshot, options);\n}\nconst fromSnapshotAction = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(\"fromSnapshot\", (snapshot, options) => {\n  const opts = {\n    generateNewIds: false,\n    overrideRootModelId: void 0,\n    ...options\n  };\n  const ctx = {\n    options: opts\n  };\n  ctx.snapshotToInitialData = snapshotToInitialData.bind(void 0, ctx);\n  return internalFromSnapshot(snapshot, ctx);\n});\nfunction internalFromSnapshot(sn, ctx) {\n  if (isPrimitive(sn)) {\n    return sn;\n  }\n  registerDefaultSnapshotters();\n  const snapshotterLen = snapshotters.length;\n  for (let i = 0; i < snapshotterLen; i++) {\n    const { snapshotter } = snapshotters[i];\n    const ret = snapshotter(sn, ctx);\n    if (ret !== void 0) {\n      return ret;\n    }\n  }\n  if (isMap(sn)) {\n    throw failure(\"a snapshot must not contain maps\");\n  }\n  if (isSet(sn)) {\n    throw failure(\"a snapshot must not contain sets\");\n  }\n  throw failure(`unsupported snapshot - ${sn}`);\n}\nfunction snapshotToInitialData(ctx, processedSn) {\n  const initialData = mobx__WEBPACK_IMPORTED_MODULE_0__.observable.object({}, void 0, observableOptions);\n  const processedSnKeys = Object.keys(processedSn);\n  const processedSnKeysLen = processedSnKeys.length;\n  for (let i = 0; i < processedSnKeysLen; i++) {\n    const k = processedSnKeys[i];\n    if (!isReservedModelKey(k)) {\n      const v = processedSn[k];\n      (0,mobx__WEBPACK_IMPORTED_MODULE_0__.set)(initialData, k, internalFromSnapshot(v, ctx));\n    }\n  }\n  return initialData;\n}\nconst observableOptions = {\n  deep: false\n};\nfunction clone(node, options) {\n  assertTweakedObject(node, \"node\");\n  const opts = {\n    generateNewIds: true,\n    ...options\n  };\n  const sn = getSnapshot(node);\n  return fromSnapshot(sn, opts);\n}\nconst setParent = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(\"setParent\", ({ value, parentPath, indexChangeAllowed, isDataObject, cloneIfApplicable }) => {\n  if (isPrimitive(value)) {\n    return value;\n  }\n  if (inDevMode) {\n    if (indexChangeAllowed && cloneIfApplicable) {\n      throw failure(\"assertion failed: 'indexChangeAllowed' and 'cloneIfApplicable' cannot be set at the same time\");\n    }\n    if (typeof value === \"function\" || typeof value === \"symbol\") {\n      throw failure(`assertion failed: value cannot be a function or a symbol`);\n    }\n    if (!isTweakedObject(value, true)) {\n      throw failure(`assertion failed: value is not ready to take a parent`);\n    }\n    if (parentPath && !isTweakedObject(parentPath.parent, true)) {\n      throw failure(`assertion failed: parent is not ready to take children`);\n    }\n  }\n  let oldParentPath = fastGetParentPath(value);\n  if (parentPathEquals(oldParentPath, parentPath)) {\n    return value;\n  }\n  if (fastIsRootStore(value)) {\n    throw failure(\"root stores cannot be attached to any parents\");\n  }\n  if (isDataObject) {\n    dataObjectParent.set(value, parentPath.parent);\n    return value;\n  }\n  if (parentPath) {\n    const actualParent = dataToModelNode(parentPath.parent);\n    if (parentPath.parent !== actualParent) {\n      parentPath = {\n        parent: actualParent,\n        path: parentPath.path\n      };\n    }\n  }\n  if (cloneIfApplicable && (parentPath == null ? void 0 : parentPath.parent) && (oldParentPath == null ? void 0 : oldParentPath.parent) && isModel(value) && getModelMetadata(value).valueType) {\n    value = clone(value, { generateNewIds: true });\n    oldParentPath = fastGetParentPath(value);\n  }\n  if (oldParentPath && parentPath) {\n    if (oldParentPath.parent === parentPath.parent && indexChangeAllowed) {\n      objectParents.set(value, parentPath);\n      reportParentPathChanged(value);\n      return value;\n    } else {\n      throw failure(\"an object cannot be assigned a new parent when it already has one\");\n    }\n  }\n  let postUntweaker;\n  if (!parentPath) {\n    postUntweaker = tryUntweak(value);\n  }\n  const attachToNewParent = () => {\n    if (oldParentPath == null ? void 0 : oldParentPath.parent) {\n      removeObjectChild(oldParentPath.parent, value);\n    }\n    objectParents.set(value, parentPath);\n    if (parentPath == null ? void 0 : parentPath.parent) {\n      addObjectChild(parentPath.parent, value);\n    }\n    reportParentPathChanged(value);\n  };\n  if (value instanceof BaseModel) {\n    const oldRoot = fastGetRoot(value);\n    const oldRootStore = fastIsRootStore(oldRoot) ? oldRoot : void 0;\n    attachToNewParent();\n    const newRoot = fastGetRoot(value);\n    const newRootStore = fastIsRootStore(newRoot) ? newRoot : void 0;\n    if (oldRootStore !== newRootStore && (oldRootStore || newRootStore)) {\n      enqueuePendingAction(() => {\n        if (oldRootStore) {\n          detachFromRootStore(value);\n        }\n        if (newRootStore) {\n          attachToRootStore(newRootStore, value);\n        }\n      });\n    }\n  } else {\n    attachToNewParent();\n  }\n  postUntweaker == null ? void 0 : postUntweaker();\n  return value;\n});\nfunction tweakModel(value, parentPath) {\n  tweakedObjects.set(value, void 0);\n  setParent({\n    value,\n    parentPath,\n    indexChangeAllowed: false,\n    isDataObject: false,\n    cloneIfApplicable: true\n  });\n  return value;\n}\nfunction registerModelTweaker() {\n  registerTweaker(TweakerPriority.Model, (value, parentPath) => {\n    if (isModel(value)) {\n      return tweakModel(value, parentPath);\n    }\n    return void 0;\n  });\n}\nconst internalNewModel = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(\"newModel\", (origModelObj, initialData, options) => {\n  const mode = initialData ? \"new\" : \"fromSnapshot\";\n  const { modelClass: _modelClass, snapshotInitialData, generateNewIds } = options;\n  const modelClass2 = _modelClass;\n  if (inDevMode) {\n    assertIsModelClass(modelClass2, \"modelClass\");\n  }\n  const modelObj = origModelObj;\n  const modelInfo = modelInfoByClass.get(modelClass2);\n  if (!modelInfo) {\n    throw failure(`no model info for class ${modelClass2.name} could be found - did you forget to add the @model decorator?`);\n  }\n  const modelIdPropertyName = getModelIdPropertyName(modelClass2);\n  const modelProps = getInternalModelClassPropsInfo(modelClass2);\n  const modelIdPropData = modelIdPropertyName ? modelProps[modelIdPropertyName] : void 0;\n  let id;\n  if (snapshotInitialData) {\n    let sn = snapshotInitialData.unprocessedSnapshot;\n    if (modelIdPropData && modelIdPropertyName) {\n      if (generateNewIds) {\n        id = modelIdPropData._defaultFn();\n      } else {\n        id = sn[modelIdPropertyName];\n      }\n    }\n    if (modelClass2.fromSnapshotProcessor) {\n      sn = modelClass2.fromSnapshotProcessor(sn);\n    }\n    initialData = snapshotInitialData.snapshotToInitialData(sn);\n  } else {\n    if (modelIdPropData && modelIdPropertyName) {\n      if (initialData[modelIdPropertyName]) {\n        id = initialData[modelIdPropertyName];\n      } else {\n        id = modelIdPropData._defaultFn();\n      }\n    }\n  }\n  modelObj[modelTypeKey] = modelInfo.name;\n  const modelPropsKeys = Object.keys(modelProps);\n  for (let i = 0; i < modelPropsKeys.length; i++) {\n    const k = modelPropsKeys[i];\n    if (k === modelIdPropertyName) {\n      continue;\n    }\n    const propData = modelProps[k];\n    let newValue = initialData[k];\n    let changed = false;\n    if (mode === \"new\" && propData._transform) {\n      changed = true;\n      newValue = propData._transform.untransform(newValue, modelObj, k);\n    }\n    if (newValue == null) {\n      const defaultValue = getModelPropDefaultValue(propData);\n      if (defaultValue !== noDefaultValue) {\n        changed = true;\n        newValue = defaultValue;\n      } else if (!(k in initialData)) {\n        changed = true;\n      }\n    }\n    if (changed) {\n      (0,mobx__WEBPACK_IMPORTED_MODULE_0__.set)(initialData, k, newValue);\n    }\n  }\n  if (modelIdPropertyName) {\n    (0,mobx__WEBPACK_IMPORTED_MODULE_0__.set)(initialData, modelIdPropertyName, id);\n  }\n  tweakModel(modelObj, void 0);\n  modelObj.$ = tweakPlainObject(initialData, { parent: modelObj, path: \"$\" }, modelObj[modelTypeKey], false, true);\n  if (inDevMode) {\n    makePropReadonly(modelObj, \"$\", true);\n  }\n  applyModelInitializers(modelClass2, modelObj);\n  if (isModelAutoTypeCheckingEnabled() && getModelMetadata(modelClass2).dataType) {\n    const err = modelObj.typeCheck();\n    if (err) {\n      err.throw();\n    }\n  }\n  return modelObj;\n});\nconst modelIdPropertyNameSymbol = Symbol(\"modelIdPropertyName\");\nclass BaseModel {\n  /**\n   * Creates an instance of a model.\n   */\n  constructor(data) {\n    // just to make typing work properly\n    __publicField(this, _b);\n    __publicField(this, _c);\n    __publicField(this, _d);\n    __publicField(this, _e);\n    /**\n     * Model type name.\n     */\n    __publicField(this, _f);\n    /**\n     * Data part of the model, which is observable and will be serialized in snapshots.\n     * Use it if one of the data properties matches one of the model properties/functions.\n     */\n    __publicField(this, \"$\");\n    let initialData = data;\n    const { snapshotInitialData, modelClass: modelClass2, generateNewIds } = arguments[1];\n    Object.setPrototypeOf(this, modelClass2.prototype);\n    const self = this;\n    delete self[propsTypeSymbol];\n    delete self[fromSnapshotOverrideTypeSymbol];\n    delete self[toSnapshotOverrideTypeSymbol];\n    delete self[modelIdPropertyNameSymbol];\n    if (!snapshotInitialData) {\n      assertIsObject(initialData, \"initialData\");\n      internalNewModel(this, mobx__WEBPACK_IMPORTED_MODULE_0__.observable.object(initialData, void 0, { deep: false }), {\n        modelClass: modelClass2,\n        generateNewIds: true\n      });\n    } else {\n      internalNewModel(this, void 0, { modelClass: modelClass2, snapshotInitialData, generateNewIds });\n    }\n  }\n  /**\n   * Model internal id. Can be modified inside a model action.\n   * It will return `undefined` if there's no id prop set.\n   */\n  get [(_b = propsTypeSymbol, _c = fromSnapshotOverrideTypeSymbol, _d = toSnapshotOverrideTypeSymbol, _e = modelIdPropertyNameSymbol, _f = modelTypeKey, modelIdKey)]() {\n    const idProp2 = getModelIdPropertyName(this.constructor);\n    return idProp2 ? this.$[idProp2] : void 0;\n  }\n  set [modelIdKey](newId) {\n    const idProp2 = getModelIdPropertyName(this.constructor);\n    if (!idProp2) {\n      throw failure(\"$modelId cannot be set when there is no idProp set in the model\");\n    }\n    this.$[idProp2] = newId;\n  }\n  /**\n   * Can be overridden to offer a reference id to be used in reference resolution.\n   * By default it will use the `idProp` if available or return `undefined` otherwise.\n   */\n  getRefId() {\n    return this[modelIdKey];\n  }\n  /**\n   * Performs a type check over the model instance.\n   * For this to work a data type has to be declared as part of the model properties.\n   *\n   * @returns A `TypeCheckError` or `null` if there is no error.\n   */\n  typeCheck() {\n    const type = typesModel(this.constructor);\n    return typeCheck(type, this);\n  }\n  toString(options) {\n    const finalOptions = {\n      withData: true,\n      ...options\n    };\n    const firstPart = `${this.constructor.name}#${this[modelTypeKey]}`;\n    return finalOptions.withData ? `[${firstPart} ${JSON.stringify(getSnapshot(this))}]` : `[${firstPart}]`;\n  }\n}\nconst baseModelPropNames = /* @__PURE__ */ new Set([\n  modelTypeKey,\n  modelIdKey,\n  \"onInit\",\n  \"$\",\n  \"getRefId\",\n  \"onAttachedToRootStore\",\n  \"typeCheck\"\n]);\nfunction abstractModelClass(type) {\n  return type;\n}\nfunction modelSnapshotInWithMetadata(modelClass2, snapshot) {\n  assertIsModelClass(modelClass2, \"modelClass\");\n  assertIsObject(snapshot, \"initialData\");\n  const modelInfo = modelInfoByClass.get(modelClass2);\n  return {\n    ...snapshot,\n    [modelTypeKey]: modelInfo.name\n  };\n}\nfunction modelSnapshotOutWithMetadata(modelClass2, snapshot) {\n  assertIsModelClass(modelClass2, \"modelClass\");\n  assertIsObject(snapshot, \"initialData\");\n  const modelInfo = modelInfoByClass.get(modelClass2);\n  return {\n    ...snapshot,\n    [modelTypeKey]: modelInfo.name\n  };\n}\nfunction isModel(model2) {\n  return model2 instanceof BaseModel;\n}\nfunction assertIsModel(model2, argName, customErrMsg = \"must be a model instance\") {\n  if (!isModel(model2)) {\n    throw failure(`${argName} ${customErrMsg}`);\n  }\n}\nfunction isModelClass(modelClass2) {\n  if (typeof modelClass2 !== \"function\") {\n    return false;\n  }\n  if (modelClass2 !== BaseModel && !(modelClass2.prototype instanceof BaseModel)) {\n    return false;\n  }\n  return true;\n}\nfunction assertIsModelClass(modelClass2, argName) {\n  if (typeof modelClass2 !== \"function\") {\n    throw failure(`${argName} must be a class`);\n  }\n  if (modelClass2 !== BaseModel && !(modelClass2.prototype instanceof BaseModel)) {\n    throw failure(`${argName} must extend Model`);\n  }\n}\nfunction isModelSnapshot(sn) {\n  return isPlainObject(sn) && modelTypeKey in sn;\n}\nfunction getParentPath(value) {\n  assertTweakedObject(value, \"value\");\n  return fastGetParentPath(value);\n}\nfunction fastGetParentPath(value) {\n  reportParentPathObserved(value);\n  return objectParents.get(value);\n}\nfunction fastGetParentPathIncludingDataObjects(value) {\n  const parentModel = dataObjectParent.get(value);\n  if (parentModel) {\n    return { parent: parentModel, path: \"$\" };\n  }\n  const parentPath = fastGetParentPath(value);\n  if (parentPath && isModel(parentPath.parent)) {\n    return { parent: parentPath.parent.$, path: parentPath.path };\n  }\n  return parentPath;\n}\nfunction getParent(value) {\n  assertTweakedObject(value, \"value\");\n  return fastGetParent(value);\n}\nfunction fastGetParent(value) {\n  var _a2;\n  return (_a2 = fastGetParentPath(value)) == null ? void 0 : _a2.parent;\n}\nfunction fastGetParentIncludingDataObjects(value) {\n  var _a2;\n  return (_a2 = fastGetParentPathIncludingDataObjects(value)) == null ? void 0 : _a2.parent;\n}\nfunction isModelDataObject(value) {\n  assertTweakedObject(value, \"value\", true);\n  return fastIsModelDataObject(value);\n}\nfunction fastIsModelDataObject(value) {\n  return dataObjectParent.has(value);\n}\nfunction getRootPath(value) {\n  assertTweakedObject(value, \"value\");\n  return fastGetRootPath(value);\n}\nfunction fastGetRootPath(value) {\n  let root = value;\n  let path = [];\n  let pathObjects = [value];\n  let parentPath;\n  while (parentPath = fastGetParentPath(root)) {\n    root = parentPath.parent;\n    path.unshift(parentPath.path);\n    pathObjects.unshift(parentPath.parent);\n  }\n  return { root, path, pathObjects };\n}\nfunction getRoot(value) {\n  assertTweakedObject(value, \"value\");\n  return fastGetRoot(value);\n}\nfunction fastGetRoot(value) {\n  let root = value;\n  let parentPath;\n  while (parentPath = fastGetParentPath(root)) {\n    root = parentPath.parent;\n  }\n  return root;\n}\nfunction isRoot(value) {\n  assertTweakedObject(value, \"value\");\n  return !fastGetParent(value);\n}\nconst unresolved = { resolved: false };\nfunction resolvePath(pathRootObject, path) {\n  let current = pathRootObject;\n  let len = path.length;\n  for (let i = 0; i < len; i++) {\n    if (!isObject(current)) {\n      return unresolved;\n    }\n    const p = path[i];\n    if (isArray(current) && +p >= current.length) {\n      return unresolved;\n    }\n    if (isModel(current)) {\n      const dataNode = modelToDataNode(current);\n      if (p in dataNode) {\n        current = dataNode;\n      } else if (!(p in current)) {\n        return unresolved;\n      }\n    }\n    current = current[p];\n  }\n  return { resolved: true, value: current };\n}\nconst skipIdChecking = Symbol(\"skipIdChecking\");\nfunction resolvePathCheckingIds(pathRootObject, path, pathIds) {\n  var _a2;\n  let current = modelToDataNode(pathRootObject);\n  let len = path.length;\n  for (let i = 0; i < len; i++) {\n    if (!isObject(current)) {\n      return { resolved: false };\n    }\n    const p = path[i];\n    if (isArray(current) && +p >= current.length) {\n      return { resolved: false };\n    }\n    const currentMaybeModel = current[p];\n    current = modelToDataNode(currentMaybeModel);\n    const expectedId = pathIds[i];\n    if (expectedId !== skipIdChecking) {\n      const currentId = isModel(currentMaybeModel) ? (_a2 = currentMaybeModel[modelIdKey]) != null ? _a2 : null : null;\n      if (expectedId !== currentId) {\n        return { resolved: false };\n      }\n    }\n  }\n  return { resolved: true, value: dataToModelNode(current) };\n}\nfunction getParentToChildPath(fromParent, toChild) {\n  assertTweakedObject(fromParent, \"fromParent\");\n  assertTweakedObject(toChild, \"toChild\");\n  if (fromParent === toChild) {\n    return [];\n  }\n  const path = [];\n  let current = toChild;\n  let parentPath;\n  while (parentPath = fastGetParentPath(current)) {\n    path.unshift(parentPath.path);\n    current = parentPath.parent;\n    if (current === fromParent) {\n      return path;\n    }\n  }\n  return void 0;\n}\nconst perObjectActionMiddlewares = /* @__PURE__ */ new WeakMap();\nconst perObjectActionMiddlewaresIterator = /* @__PURE__ */ new WeakMap();\nfunction getActionMiddlewares(obj) {\n  let iterable = perObjectActionMiddlewaresIterator.get(obj);\n  if (!iterable) {\n    iterable = {\n      [Symbol.iterator]() {\n        let current = obj;\n        function getCurrentIterator() {\n          const objMwares = current ? perObjectActionMiddlewares.get(current) : void 0;\n          if (!objMwares || objMwares.length <= 0) {\n            return void 0;\n          }\n          return objMwares[Symbol.iterator]();\n        }\n        function findNextIterator() {\n          let nextIter;\n          while (current && !nextIter) {\n            current = fastGetParent(current);\n            nextIter = getCurrentIterator();\n          }\n          return nextIter;\n        }\n        let iter = getCurrentIterator();\n        if (!iter) {\n          iter = findNextIterator();\n        }\n        const iterator = {\n          next() {\n            if (!iter) {\n              return { value: void 0, done: true };\n            }\n            let result = iter.next();\n            if (!result.done) {\n              return result;\n            }\n            iter = findNextIterator();\n            return this.next();\n          }\n        };\n        return iterator;\n      }\n    };\n    perObjectActionMiddlewaresIterator.set(obj, iterable);\n  }\n  return iterable;\n}\nfunction addActionMiddleware(mware) {\n  assertIsObject(mware, \"middleware\");\n  let { middleware, filter, subtreeRoot } = mware;\n  assertTweakedObject(subtreeRoot, \"middleware.subtreeRoot\");\n  assertIsFunction(middleware, \"middleware.middleware\");\n  if (filter && typeof filter !== \"function\") {\n    throw failure(\"middleware.filter must be a function or undefined\");\n  }\n  if (subtreeRoot) {\n    const targetFilter = (ctx) => ctx.target === subtreeRoot || isChildOfParent(ctx.target, subtreeRoot);\n    if (!filter) {\n      filter = targetFilter;\n    } else {\n      const customFilter = filter;\n      filter = (ctx) => {\n        return targetFilter(ctx) && customFilter(ctx);\n      };\n    }\n  }\n  const actualMware = { middleware, filter };\n  let objMwares = perObjectActionMiddlewares.get(subtreeRoot);\n  if (!objMwares) {\n    objMwares = [actualMware];\n    perObjectActionMiddlewares.set(subtreeRoot, objMwares);\n  } else {\n    objMwares.push(actualMware);\n  }\n  return () => {\n    deleteFromArray(objMwares, actualMware);\n  };\n}\nfunction wrapInAction({ nameOrNameFn, fn, actionType, overrideContext, isFlowFinisher = false }) {\n  let fnInAction = false;\n  const wrappedAction = function() {\n    const name = typeof nameOrNameFn === \"function\" ? nameOrNameFn() : nameOrNameFn;\n    if (!fnInAction) {\n      fnInAction = true;\n      fn = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(name, fn);\n    }\n    const target = this;\n    const parentContext = getCurrentActionContext();\n    const context = {\n      actionName: name,\n      type: actionType,\n      target,\n      args: Array.from(arguments),\n      parentContext,\n      data: {},\n      rootContext: void 0\n      // will be set after the override\n    };\n    if (overrideContext) {\n      overrideContext(context, this);\n    }\n    if (!context.rootContext) {\n      if (context.previousAsyncStepContext) {\n        context.rootContext = context.previousAsyncStepContext.rootContext;\n      } else if (context.parentContext) {\n        context.rootContext = context.parentContext.rootContext;\n      } else {\n        context.rootContext = context;\n      }\n    }\n    setCurrentActionContext(context);\n    let mwareFn = fn.bind(target, ...arguments);\n    const mwareIter = getActionMiddlewares(context.target)[Symbol.iterator]();\n    let mwareCur = mwareIter.next();\n    while (!mwareCur.done) {\n      const mware = mwareCur.value;\n      const filterPassed = mware.filter ? mware.filter(context) : true;\n      if (filterPassed) {\n        mwareFn = mware.middleware.bind(void 0, context, mwareFn);\n      }\n      mwareCur = mwareIter.next();\n    }\n    try {\n      const ret = mwareFn();\n      if (isFlowFinisher) {\n        const flowFinisher = ret;\n        const value = flowFinisher.value;\n        if (flowFinisher.resolution === \"accept\") {\n          flowFinisher.accepter(value);\n        } else {\n          flowFinisher.rejecter(value);\n        }\n        return value;\n      } else {\n        return ret;\n      }\n    } finally {\n      setCurrentActionContext(context.parentContext);\n      tryRunPendingActions();\n    }\n  };\n  wrappedAction[modelActionSymbol] = true;\n  return wrappedAction;\n}\nfunction wrapModelMethodInActionIfNeeded(model2, propertyKey, name) {\n  const fn = model2[propertyKey];\n  if (isModelAction(fn)) {\n    return;\n  }\n  const wrappedFn = wrapInAction({\n    nameOrNameFn: name,\n    fn,\n    actionType: ActionContextActionType.Sync\n  });\n  const proto = Object.getPrototypeOf(model2);\n  const protoFn = proto[propertyKey];\n  if (protoFn === fn) {\n    proto[propertyKey] = wrappedFn;\n  } else {\n    model2[propertyKey] = wrappedFn;\n  }\n}\nfunction detach(node) {\n  assertTweakedObject(node, \"node\");\n  wrappedInternalDetach().call(node);\n}\nconst wrappedInternalDetach = lazy(() => wrapInAction({\n  nameOrNameFn: BuiltInAction.Detach,\n  fn: internalDetach,\n  actionType: ActionContextActionType.Sync\n}));\nfunction internalDetach() {\n  const node = this;\n  const parentPath = fastGetParentPathIncludingDataObjects(node);\n  if (!parentPath)\n    return;\n  const { parent, path } = parentPath;\n  if ((0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableArray)(parent)) {\n    parent.splice(+path, 1);\n  } else if ((0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableObject)(parent)) {\n    (0,mobx__WEBPACK_IMPORTED_MODULE_0__.remove)(parent, \"\" + path);\n  } else {\n    throw failure(\"parent must be an observable object or an observable array\");\n  }\n}\nfunction checkModelDecoratorArgs(fnName, target, propertyKey) {\n  if (typeof propertyKey !== \"string\") {\n    throw failure(`${fnName} cannot be used over symbol properties`);\n  }\n  const errMessage2 = `${fnName} must be used over model classes or instances`;\n  if (!target) {\n    throw failure(errMessage2);\n  }\n  const isModel2 = target instanceof BaseModel || target === BaseModel || target.prototype instanceof BaseModel;\n  if (isModel2)\n    return;\n  const isDataModel2 = target instanceof BaseDataModel || target === BaseDataModel || target.prototype instanceof BaseDataModel;\n  if (isDataModel2)\n    return;\n  throw failure(errMessage2);\n}\nfunction getActionNameAndContextOverride(target, propertyKey) {\n  let actionName = propertyKey;\n  let overrideContext;\n  if (isDataModelClass(target) || isDataModel(target)) {\n    overrideContext = (ctx, self) => {\n      ctx.target = self.$;\n    };\n    let fullActionName;\n    actionName = () => fullActionName;\n    const modelClass2 = isDataModelClass(target) ? target : target.constructor;\n    addLateInitializationFunction(modelClass2, runAfterModelDecoratorSymbol, (finalClass) => {\n      const modelInfo = modelInfoByClass.get(finalClass);\n      fullActionName = `fn::${modelInfo.name}::${propertyKey}`;\n      setDataModelAction(fullActionName, modelInfo.class, propertyKey);\n    });\n  }\n  return { actionName, overrideContext };\n}\nconst modelFlowSymbol = Symbol(\"modelFlow\");\nfunction flow({ nameOrNameFn, generator, overrideContext }) {\n  const flowFn = function(...args) {\n    const name = typeof nameOrNameFn === \"function\" ? nameOrNameFn() : nameOrNameFn;\n    const target = this;\n    let previousAsyncStepContext;\n    const ctxOverride = (stepType) => {\n      return (ctx, self) => {\n        if (overrideContext) {\n          overrideContext(ctx, self);\n        }\n        ctx.previousAsyncStepContext = previousAsyncStepContext;\n        ctx.spawnAsyncStepContext = previousAsyncStepContext ? previousAsyncStepContext.spawnAsyncStepContext : ctx;\n        ctx.asyncStepType = stepType;\n        ctx.args = args;\n        previousAsyncStepContext = ctx;\n      };\n    };\n    let generatorRun = false;\n    const gen = wrapInAction({\n      nameOrNameFn: name,\n      fn: () => {\n        generatorRun = true;\n        return generator.apply(target, args);\n      },\n      actionType: ActionContextActionType.Async,\n      overrideContext: ctxOverride(ActionContextAsyncStepType.Spawn)\n    }).apply(target);\n    if (!generatorRun) {\n      return gen instanceof Promise ? gen : Promise.resolve(gen);\n    }\n    const genNext = gen.next.bind(gen);\n    const genThrow = gen.throw.bind(gen);\n    const promise = new Promise(function(resolve, reject) {\n      function onFulfilled(res) {\n        let ret;\n        try {\n          ret = wrapInAction({\n            nameOrNameFn: name,\n            fn: genNext,\n            actionType: ActionContextActionType.Async,\n            overrideContext: ctxOverride(ActionContextAsyncStepType.Resume)\n          }).call(target, res);\n        } catch (e) {\n          wrapInAction({\n            nameOrNameFn: name,\n            fn: (err) => {\n              return {\n                value: err,\n                resolution: \"reject\",\n                accepter: resolve,\n                rejecter: reject\n              };\n            },\n            actionType: ActionContextActionType.Async,\n            overrideContext: ctxOverride(ActionContextAsyncStepType.Throw),\n            isFlowFinisher: true\n          }).call(target, e);\n          return;\n        }\n        next(ret);\n      }\n      function onRejected(err) {\n        let ret;\n        try {\n          ret = wrapInAction({\n            nameOrNameFn: name,\n            fn: genThrow,\n            actionType: ActionContextActionType.Async,\n            overrideContext: ctxOverride(ActionContextAsyncStepType.ResumeError)\n          }).call(target, err);\n        } catch (e) {\n          wrapInAction({\n            nameOrNameFn: name,\n            fn: (err2) => {\n              return {\n                value: err2,\n                resolution: \"reject\",\n                accepter: resolve,\n                rejecter: reject\n              };\n            },\n            actionType: ActionContextActionType.Async,\n            overrideContext: ctxOverride(ActionContextAsyncStepType.Throw),\n            isFlowFinisher: true\n          }).call(target, e);\n          return;\n        }\n        next(ret);\n      }\n      function next(ret) {\n        if (ret && typeof ret.then === \"function\") {\n          ret.then(next, reject);\n        } else if (ret.done) {\n          wrapInAction({\n            nameOrNameFn: name,\n            fn: (val) => {\n              return {\n                value: val,\n                resolution: \"accept\",\n                accepter: resolve,\n                rejecter: reject\n              };\n            },\n            actionType: ActionContextActionType.Async,\n            overrideContext: ctxOverride(ActionContextAsyncStepType.Return),\n            isFlowFinisher: true\n          }).call(target, ret.value);\n        } else {\n          Promise.resolve(ret.value).then(onFulfilled, onRejected);\n        }\n      }\n      onFulfilled(void 0);\n    });\n    return promise;\n  };\n  flowFn[modelFlowSymbol] = true;\n  return flowFn;\n}\nfunction isModelFlow(fn) {\n  return typeof fn === \"function\" && modelFlowSymbol in fn;\n}\nfunction modelFlow(target, propertyKey, baseDescriptor) {\n  const { actionName, overrideContext } = getActionNameAndContextOverride(target, propertyKey);\n  return decorateWrapMethodOrField(\"modelFlow\", {\n    target,\n    propertyKey,\n    baseDescriptor\n  }, (data, fn) => {\n    if (isModelFlow(fn)) {\n      return fn;\n    } else {\n      checkModelFlowArgs(data.target, data.propertyKey, fn);\n      return flow({ nameOrNameFn: actionName, generator: fn, overrideContext });\n    }\n  });\n}\nfunction checkModelFlowArgs(target, propertyKey, value) {\n  if (typeof value !== \"function\") {\n    throw failure(\"modelFlow has to be used over functions\");\n  }\n  checkModelDecoratorArgs(\"modelFlow\", target, propertyKey);\n}\nfunction _async(fn) {\n  return fn;\n}\nfunction _await(promise) {\n  return promiseGenerator.call(promise);\n}\nconst __generator = function(thisArg, body) {\n  let _ = {\n    label: 0,\n    sent: function() {\n      if (t[0] & 1)\n        throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  }, f, y, t, g;\n  return g = { next: verb(0), throw: verb(1), return: verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n    return this;\n  }), g;\n  function verb(n) {\n    return function(v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f)\n      throw new TypeError(\"Generator is already executing.\");\n    while (_)\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)\n          return t;\n        if (y = 0, t)\n          op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return { value: op[1], done: false };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2])\n              _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    if (op[0] & 5)\n      throw op[1];\n    return { value: op[0] ? op[1] : void 0, done: true };\n  }\n};\nfunction promiseGenerator() {\n  let ret;\n  return __generator(this, function(_a2) {\n    switch (_a2.label) {\n      case 0:\n        return [4, this];\n      case 1:\n        ret = _a2.sent();\n        return [2, ret];\n      default:\n        return;\n    }\n  });\n}\nconst standaloneActionRegistry = /* @__PURE__ */ new Map();\nfunction getStandaloneAction(actionName) {\n  return standaloneActionRegistry.get(actionName);\n}\nfunction addStandaloneAction(fullActionName, fn, isFlow) {\n  assertIsFunction(fn, fullActionName);\n  if (standaloneActionRegistry.has(fullActionName)) {\n    logWarning(\"warn\", `an standalone action with name \"${fullActionName}\" already exists (if you are using hot-reloading you may safely ignore this warning)`, `duplicateActionName - ${fullActionName}`);\n  }\n  if (isModelAction(fn)) {\n    throw failure(\"the standalone action must not be previously marked as an action\");\n  }\n  if (isModelFlow(fn)) {\n    throw failure(\"the standalone action must not be previously marked as a flow action\");\n  }\n  const wrappedAction = isFlow ? flow({ nameOrNameFn: fullActionName, generator: fn }) : wrapInAction({\n    nameOrNameFn: fullActionName,\n    fn,\n    actionType: ActionContextActionType.Sync\n  });\n  const finalAction = (target, ...args) => {\n    assertIsTreeNode(target, \"target\");\n    return wrappedAction.call(target, target, ...args);\n  };\n  standaloneActionRegistry.set(fullActionName, finalAction);\n  return finalAction;\n}\nfunction applyDelete(node, fieldName) {\n  assertTweakedObject(node, \"node\", true);\n  wrappedInternalApplyDelete().call(node, fieldName);\n}\nfunction internalApplyDelete(fieldName) {\n  (0,mobx__WEBPACK_IMPORTED_MODULE_0__.remove)(this, \"\" + fieldName);\n}\nconst wrappedInternalApplyDelete = lazy(() => wrapInAction({\n  nameOrNameFn: BuiltInAction.ApplyDelete,\n  fn: internalApplyDelete,\n  actionType: ActionContextActionType.Sync\n}));\nfunction applyMethodCall(node, methodName, ...args) {\n  assertTweakedObject(node, \"node\");\n  return wrappedInternalApplyMethodCall().call(node, methodName, args);\n}\nfunction internalApplyMethodCall(methodName, args) {\n  return this[methodName](...args);\n}\nconst wrappedInternalApplyMethodCall = lazy(() => wrapInAction({\n  nameOrNameFn: BuiltInAction.ApplyMethodCall,\n  fn: internalApplyMethodCall,\n  actionType: ActionContextActionType.Sync\n}));\nfunction applySet(node, fieldName, value) {\n  assertTweakedObject(node, \"node\", true);\n  wrappedInternalApplySet().call(node, fieldName, value);\n}\nfunction internalApplySet(fieldName, value) {\n  if (!isModel(this) && (0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservable)(this)) {\n    setIfDifferent(this, fieldName, value);\n  } else {\n    this[fieldName] = value;\n  }\n}\nconst wrappedInternalApplySet = lazy(() => wrapInAction({\n  nameOrNameFn: BuiltInAction.ApplySet,\n  fn: internalApplySet,\n  actionType: ActionContextActionType.Sync\n}));\nconst builtInActionToFunction = {\n  [BuiltInAction.ApplySnapshot]: applySnapshot,\n  [BuiltInAction.ApplyPatches]: applyPatches,\n  [BuiltInAction.Detach]: detach,\n  [BuiltInAction.ApplySet]: applySet,\n  [BuiltInAction.ApplyDelete]: applyDelete,\n  [BuiltInAction.ApplyMethodCall]: applyMethodCall\n};\nfunction applyAction(subtreeRoot, call) {\n  if (call.serialized) {\n    throw failure(\"cannot apply a serialized action call, use one of the 'applySerializedAction' methods instead\");\n  }\n  assertTweakedObject(subtreeRoot, \"subtreeRoot\");\n  const { value: current, resolved } = resolvePathCheckingIds(subtreeRoot, call.targetPath, call.targetPathIds);\n  if (!resolved) {\n    throw failure(`object at path ${JSON.stringify(call.targetPath)} with ids ${JSON.stringify(call.targetPathIds)} could not be resolved`);\n  }\n  assertTweakedObject(current, `resolved ${current}`, true);\n  if (isBuiltInAction(call.actionName)) {\n    const fnToCall = builtInActionToFunction[call.actionName];\n    if (!fnToCall) {\n      throw failure(`assertion failed: unknown built-in action - ${call.actionName}`);\n    }\n    return fnToCall.apply(current, [current, ...call.args]);\n  }\n  if (isHookAction(call.actionName)) {\n    throw failure(`calls to hooks (${call.actionName}) cannot be applied`);\n  }\n  const dataModelAction = getDataModelAction(call.actionName);\n  if (dataModelAction) {\n    const instance = new dataModelAction.modelClass(current);\n    return instance[dataModelAction.fnName].apply(instance, call.args);\n  }\n  const standaloneAction2 = getStandaloneAction(call.actionName);\n  if (standaloneAction2) {\n    return standaloneAction2.apply(current, call.args);\n  }\n  return current[call.actionName].apply(current, call.args);\n}\nfunction checkModelActionArgs(target, propertyKey, value) {\n  if (typeof value !== \"function\") {\n    throw failure(\"modelAction has to be used over functions\");\n  }\n  checkModelDecoratorArgs(\"modelAction\", target, propertyKey);\n}\nfunction modelAction(target, propertyKey, baseDescriptor) {\n  const { actionName, overrideContext } = getActionNameAndContextOverride(target, propertyKey);\n  return decorateWrapMethodOrField(\"modelAction\", {\n    target,\n    propertyKey,\n    baseDescriptor\n  }, (data, fn) => {\n    if (isModelAction(fn)) {\n      return fn;\n    } else {\n      checkModelActionArgs(data.target, data.propertyKey, fn);\n      return wrapInAction({\n        nameOrNameFn: actionName,\n        fn,\n        actionType: ActionContextActionType.Sync,\n        overrideContext\n      });\n    }\n  });\n}\nfunction runUnprotected(arg1, arg2) {\n  const name = typeof arg1 === \"string\" ? arg1 : void 0;\n  const fn = typeof arg1 === \"string\" ? arg2 : arg1;\n  const innerAction = () => {\n    const oldActionProtection = getActionProtection();\n    setActionProtection(false);\n    try {\n      return fn();\n    } finally {\n      setActionProtection(oldActionProtection);\n      tryRunPendingActions();\n    }\n  };\n  if (name) {\n    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(name, innerAction)();\n  } else {\n    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(innerAction)();\n  }\n}\nconst cannotSerialize = Symbol(\"cannotSerialize\");\nconst arraySerializer = {\n  id: `${namespace$2}/array`,\n  serialize(value, serialize) {\n    if (!isArray(value))\n      return cannotSerialize;\n    return value.map(serialize);\n  },\n  deserialize(arr, deserialize) {\n    return arr.map(deserialize);\n  }\n};\nconst dateSerializer = {\n  id: `${namespace$2}/dateAsTimestamp`,\n  serialize(date) {\n    if (!(date instanceof Date))\n      return cannotSerialize;\n    return +date;\n  },\n  deserialize(timestamp) {\n    return new Date(timestamp);\n  }\n};\nconst mapSerializer = {\n  id: `${namespace$2}/mapAsArray`,\n  serialize(map, serialize) {\n    if (!(map instanceof Map) && !(0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableMap)(map))\n      return cannotSerialize;\n    const arr = [];\n    const iter = map.keys();\n    let cur = iter.next();\n    while (!cur.done) {\n      const k = cur.value;\n      const v = map.get(k);\n      arr.push([serialize(k), serialize(v)]);\n      cur = iter.next();\n    }\n    return arr;\n  },\n  deserialize(arr, deserialize) {\n    const map = /* @__PURE__ */ new Map();\n    const len = arr.length;\n    for (let i = 0; i < len; i++) {\n      const k = arr[i][0];\n      const v = arr[i][1];\n      map.set(deserialize(k), deserialize(v));\n    }\n    return map;\n  }\n};\nfunction rootPathToTargetPathIds(rootPath) {\n  var _a2;\n  const targetPathIds = [];\n  for (let i = 0; i < rootPath.path.length; i++) {\n    const targetObj = rootPath.pathObjects[i + 1];\n    const targetObjId = isModel(targetObj) ? (_a2 = targetObj[modelIdKey]) != null ? _a2 : null : null;\n    targetPathIds.push(targetObjId);\n  }\n  return targetPathIds;\n}\nfunction pathToTargetPathIds(root, path) {\n  var _a2;\n  const targetPathIds = [];\n  let current = root;\n  for (let i = 0; i < path.length; i++) {\n    current = current[path[i]];\n    const targetObjId = isModel(current) ? (_a2 = current[modelIdKey]) != null ? _a2 : null : null;\n    targetPathIds.push(targetObjId);\n  }\n  return targetPathIds;\n}\nconst objectPathSerializer = {\n  id: `${namespace$2}/objectPath`,\n  serialize(value, _, targetRoot) {\n    if (typeof value !== \"object\" || value === null || !isTweakedObject(value, false))\n      return cannotSerialize;\n    if (targetRoot) {\n      const rootPath = fastGetRootPath(value);\n      if (rootPath.root === targetRoot) {\n        return {\n          targetPath: rootPath.path,\n          targetPathIds: rootPathToTargetPathIds(rootPath)\n        };\n      }\n    }\n    return cannotSerialize;\n  },\n  deserialize(ref, _, targetRoot) {\n    if (targetRoot) {\n      const result = resolvePathCheckingIds(targetRoot, ref.targetPath, ref.targetPathIds);\n      if (result.resolved) {\n        return result.value;\n      }\n    }\n    throw failure(`object at path ${JSON.stringify(ref.targetPath)} with ids ${JSON.stringify(ref.targetPathIds)} could not be resolved`);\n  }\n};\nconst objectSnapshotSerializer = {\n  id: `${namespace$2}/objectSnapshot`,\n  serialize(value) {\n    if (typeof value !== \"object\" || value === null || !isTweakedObject(value, false))\n      return cannotSerialize;\n    return getSnapshot(value);\n  },\n  deserialize(snapshot) {\n    return fromSnapshot(snapshot);\n  }\n};\nconst plainObjectSerializer = {\n  id: `${namespace$2}/plainObject`,\n  serialize(value, serialize) {\n    if (!isPlainObject(value) && !(0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableObject)(value))\n      return cannotSerialize;\n    return mapObjectFields(value, serialize);\n  },\n  deserialize(obj, serialize) {\n    return mapObjectFields(obj, serialize);\n  }\n};\nfunction mapObjectFields(originalObj, mapFn) {\n  const obj = {};\n  const keys2 = Object.keys(originalObj);\n  const len = keys2.length;\n  for (let i = 0; i < len; i++) {\n    const k = keys2[i];\n    const v = originalObj[k];\n    obj[k] = mapFn(v);\n  }\n  return obj;\n}\nconst primitiveSerializer = {\n  id: `${namespace$2}/primitiveAsString`,\n  serialize(value) {\n    if (Number.isNaN(value)) {\n      return \"nan\";\n    }\n    switch (value) {\n      case Infinity:\n        return \"+inf\";\n      case -Infinity:\n        return \"-inf\";\n    }\n    if (typeof value === \"bigint\") {\n      return value.toString();\n    }\n    if (value === void 0) {\n      return \"undefined\";\n    }\n    return cannotSerialize;\n  },\n  deserialize(str) {\n    switch (str) {\n      case \"nan\":\n        return NaN;\n      case \"+inf\":\n        return Infinity;\n      case \"-inf\":\n        return -Infinity;\n      case \"undefined\":\n        return void 0;\n      default:\n        return BigInt(str);\n    }\n  }\n};\nconst setSerializer = {\n  id: `${namespace$2}/setAsArray`,\n  serialize(set2, serialize) {\n    if (!(set2 instanceof Set))\n      return cannotSerialize;\n    const arr = [];\n    const iter = set2.keys();\n    let cur = iter.next();\n    while (!cur.done) {\n      const k = cur.value;\n      arr.push(serialize(k));\n      cur = iter.next();\n    }\n    return arr;\n  },\n  deserialize(arr, deserialize) {\n    const set2 = /* @__PURE__ */ new Set();\n    const len = arr.length;\n    for (let i = 0; i < len; i++) {\n      const k = arr[i];\n      set2.add(deserialize(k));\n    }\n    return set2;\n  }\n};\nconst serializersArray = [];\nconst serializersMap = /* @__PURE__ */ new Map();\nfunction registerActionCallArgumentSerializer(serializer) {\n  registerDefaultActionCallArgumentSerializers();\n  if (serializersArray.includes(serializer)) {\n    throw failure(\"action call argument serializer already registered\");\n  }\n  if (serializersMap.has(serializer.id)) {\n    throw failure(`action call argument serializer with id '${serializer.id}' already registered`);\n  }\n  serializersArray.unshift(serializer);\n  serializersMap.set(serializer.id, serializer);\n  return () => {\n    const index = serializersArray.indexOf(serializer);\n    if (index >= 0) {\n      serializersArray.splice(index, 1);\n    }\n    serializersMap.delete(serializer.id);\n  };\n}\nfunction serializeActionCallArgument(argValue, targetRoot) {\n  registerDefaultActionCallArgumentSerializers();\n  if (isJSONPrimitive(argValue)) {\n    return argValue;\n  }\n  const origValue = argValue;\n  const serialize = (v) => serializeActionCallArgument(v, targetRoot);\n  for (let i = 0; i < serializersArray.length; i++) {\n    const serializer = serializersArray[i];\n    const serializedValue = serializer.serialize(argValue, serialize, targetRoot);\n    if (serializedValue !== cannotSerialize) {\n      return {\n        $mobxKeystoneSerializer: serializer.id,\n        value: serializedValue\n      };\n    }\n  }\n  throw failure(`serializeActionCallArgument could not serialize the given value: ${origValue}`);\n}\nfunction serializeActionCall(actionCall, targetRoot) {\n  if (actionCall.serialized) {\n    throw failure(\"cannot serialize an already serialized action call\");\n  }\n  if (targetRoot !== void 0) {\n    assertTweakedObject(targetRoot, \"targetRoot\");\n  }\n  const serialize = (v) => serializeActionCallArgument(v, targetRoot);\n  return {\n    ...actionCall,\n    serialized: true,\n    args: actionCall.args.map(serialize)\n  };\n}\nfunction deserializeActionCallArgument(argValue, targetRoot) {\n  registerDefaultActionCallArgumentSerializers();\n  if (isJSONPrimitive(argValue)) {\n    return argValue;\n  }\n  if (!isPlainObject(argValue) || typeof argValue.$mobxKeystoneSerializer !== \"string\") {\n    throw failure(\"invalid serialized action call argument\");\n  }\n  const serializerId = argValue.$mobxKeystoneSerializer;\n  const serializer = serializersMap.get(serializerId);\n  if (!serializer) {\n    throw failure(`a serializer with id '${serializerId}' could not be found`);\n  }\n  const serializedValue = argValue;\n  const deserialize = (v) => deserializeActionCallArgument(v, targetRoot);\n  return serializer.deserialize(serializedValue.value, deserialize, targetRoot);\n}\nfunction deserializeActionCall(actionCall, targetRoot) {\n  if (!actionCall.serialized) {\n    throw failure(\"cannot deserialize a non-serialized action call\");\n  }\n  if (targetRoot !== void 0) {\n    assertTweakedObject(targetRoot, \"targetRoot\");\n  }\n  const deserialize = (v) => deserializeActionCallArgument(v, targetRoot);\n  const deserializedActionCall = {\n    ...actionCall,\n    serialized: void 0,\n    args: actionCall.args.map(deserialize)\n  };\n  delete deserializedActionCall.serialized;\n  return deserializedActionCall;\n}\nlet defaultActionCallArgumentSerializersRegistered = false;\nfunction registerDefaultActionCallArgumentSerializers() {\n  if (defaultActionCallArgumentSerializersRegistered) {\n    return;\n  }\n  defaultActionCallArgumentSerializersRegistered = true;\n  registerActionCallArgumentSerializer(primitiveSerializer);\n  registerActionCallArgumentSerializer(plainObjectSerializer);\n  registerActionCallArgumentSerializer(setSerializer);\n  registerActionCallArgumentSerializer(mapSerializer);\n  registerActionCallArgumentSerializer(dateSerializer);\n  registerActionCallArgumentSerializer(arraySerializer);\n  registerActionCallArgumentSerializer(objectSnapshotSerializer);\n  registerActionCallArgumentSerializer(objectPathSerializer);\n}\nfunction applySerializedActionAndTrackNewModelIds(subtreeRoot, call) {\n  if (!call.serialized) {\n    throw failure(\"cannot apply a non-serialized action call, use 'applyAction' instead\");\n  }\n  assertTweakedObject(subtreeRoot, \"subtreeRoot\");\n  const deserializedCall = deserializeActionCall(call, subtreeRoot);\n  const modelIdOverrides = [];\n  const patchDisposer = onPatches(subtreeRoot, (patches) => {\n    scanPatchesForModelIdChanges(subtreeRoot, modelIdOverrides, patches);\n  });\n  try {\n    const returnValue = applyAction(subtreeRoot, deserializedCall);\n    return {\n      returnValue,\n      serializedActionCall: {\n        ...call,\n        modelIdOverrides\n      }\n    };\n  } finally {\n    patchDisposer();\n  }\n}\nfunction scanPatchesForModelIdChanges(root, modelIdOverrides, patches) {\n  const len = patches.length;\n  for (let i = 0; i < len; i++) {\n    const patch = patches[i];\n    if (patch.op === \"replace\" || patch.op === \"add\") {\n      deepScanValueForModelIdChanges(root, modelIdOverrides, patch.value, patch.path);\n    }\n  }\n}\nfunction deepScanValueForModelIdChanges(root, modelIdOverrides, value, path) {\n  if (path.length >= 1 && typeof value === \"string\") {\n    const parent = resolvePath(root, path.slice(0, path.length - 1)).value;\n    if (isModel(parent)) {\n      const propertyName = path[path.length - 1];\n      if (propertyName === getModelIdPropertyName(parent.constructor)) {\n        modelIdOverrides.push({\n          op: \"replace\",\n          path: path.slice(),\n          value\n        });\n      }\n    }\n  } else if (Array.isArray(value)) {\n    const len = value.length;\n    for (let i = 0; i < len; i++) {\n      path.push(i);\n      deepScanValueForModelIdChanges(root, modelIdOverrides, value[i], path);\n      path.pop();\n    }\n  } else if (isObject(value)) {\n    if (!value[frozenKey]) {\n      const keys2 = Object.keys(value);\n      const len = keys2.length;\n      for (let i = 0; i < len; i++) {\n        const propName = keys2[i];\n        const propValue = value[propName];\n        path.push(propName);\n        deepScanValueForModelIdChanges(root, modelIdOverrides, propValue, path);\n        path.pop();\n      }\n    }\n  }\n}\nfunction applySerializedActionAndSyncNewModelIds(subtreeRoot, call) {\n  if (!call.serialized) {\n    throw failure(\"cannot apply a non-serialized action call, use 'applyAction' instead\");\n  }\n  assertTweakedObject(subtreeRoot, \"subtreeRoot\");\n  const deserializedCall = deserializeActionCall(call, subtreeRoot);\n  let returnValue;\n  (0,mobx__WEBPACK_IMPORTED_MODULE_0__.runInAction)(() => {\n    returnValue = applyAction(subtreeRoot, deserializedCall);\n    applyPatches(subtreeRoot, call.modelIdOverrides);\n  });\n  return returnValue;\n}\nvar ActionTrackingResult;\n(function(ActionTrackingResult2) {\n  ActionTrackingResult2[\"Return\"] = \"return\";\n  ActionTrackingResult2[\"Throw\"] = \"throw\";\n})(ActionTrackingResult || (ActionTrackingResult = {}));\nfunction actionTrackingMiddleware(subtreeRoot, hooks) {\n  assertTweakedObject(subtreeRoot, \"subtreeRoot\");\n  const dataSymbol = Symbol(\"actionTrackingMiddlewareData\");\n  let State;\n  (function(State2) {\n    State2[\"Idle\"] = \"idle\";\n    State2[\"Started\"] = \"started\";\n    State2[\"RealResumed\"] = \"realResumed\";\n    State2[\"FakeResumed\"] = \"fakeResumed\";\n    State2[\"Suspended\"] = \"suspended\";\n    State2[\"Finished\"] = \"finished\";\n  })(State || (State = {}));\n  function getCtxData(ctx) {\n    return ctx.data[dataSymbol];\n  }\n  function setCtxData(ctx, partialData) {\n    let currentData = ctx.data[dataSymbol];\n    if (!currentData) {\n      ctx.data[dataSymbol] = partialData;\n    } else {\n      Object.assign(currentData, partialData);\n    }\n  }\n  const userFilter = (ctx) => {\n    if (hooks.filter) {\n      return hooks.filter(simplifyActionContext(ctx));\n    }\n    return true;\n  };\n  const resumeSuspendSupport = !!hooks.onResume || !!hooks.onSuspend;\n  const filter = (ctx) => {\n    if (ctx.type === ActionContextActionType.Sync) {\n      const accepted = userFilter(ctx);\n      if (accepted) {\n        setCtxData(ctx, {\n          startAccepted: true,\n          state: State.Idle\n        });\n      }\n      return accepted;\n    } else {\n      switch (ctx.asyncStepType) {\n        case ActionContextAsyncStepType.Spawn:\n          const accepted = userFilter(ctx);\n          if (accepted) {\n            setCtxData(ctx, {\n              startAccepted: true,\n              state: State.Idle\n            });\n          }\n          return accepted;\n        case ActionContextAsyncStepType.Return:\n        case ActionContextAsyncStepType.Throw:\n          const data = getCtxData(ctx.spawnAsyncStepContext);\n          return data ? data.startAccepted : false;\n        case ActionContextAsyncStepType.Resume:\n        case ActionContextAsyncStepType.ResumeError:\n          if (!resumeSuspendSupport) {\n            return false;\n          } else {\n            const data2 = getCtxData(ctx.spawnAsyncStepContext);\n            return data2 ? data2.startAccepted : false;\n          }\n        default:\n          return false;\n      }\n    }\n  };\n  const start = (simpleCtx) => {\n    setCtxData(simpleCtx, {\n      state: State.Started\n    });\n    if (hooks.onStart) {\n      return hooks.onStart(simpleCtx) || void 0;\n    }\n    return void 0;\n  };\n  const finish = (simpleCtx, ret) => {\n    const parentCtx = simpleCtx.parentContext;\n    let parentResumed = false;\n    if (parentCtx) {\n      const parentData = getCtxData(parentCtx);\n      if (parentData && parentData.startAccepted && parentData.state === State.Suspended) {\n        parentResumed = true;\n        resume(parentCtx, false);\n      }\n    }\n    setCtxData(simpleCtx, {\n      state: State.Finished\n    });\n    if (hooks.onFinish) {\n      ret = hooks.onFinish(simpleCtx, ret) || ret;\n    }\n    if (parentResumed) {\n      suspend(parentCtx);\n    }\n    return ret;\n  };\n  const resume = (simpleCtx, real) => {\n    const parentCtx = simpleCtx.parentContext;\n    if (parentCtx) {\n      const parentData = getCtxData(parentCtx);\n      if (parentData && parentData.startAccepted && parentData.state === State.Suspended) {\n        resume(parentCtx, false);\n      }\n    }\n    setCtxData(simpleCtx, {\n      state: real ? State.RealResumed : State.FakeResumed\n    });\n    if (hooks.onResume) {\n      hooks.onResume(simpleCtx);\n    }\n  };\n  const suspend = (simpleCtx) => {\n    setCtxData(simpleCtx, {\n      state: State.Suspended\n    });\n    if (hooks.onSuspend) {\n      hooks.onSuspend(simpleCtx);\n    }\n    const parentCtx = simpleCtx.parentContext;\n    if (parentCtx) {\n      const parentData = getCtxData(parentCtx);\n      if (parentData && parentData.startAccepted && parentData.state === State.FakeResumed) {\n        suspend(parentCtx);\n      }\n    }\n  };\n  const mware = (ctx, next) => {\n    const simpleCtx = simplifyActionContext(ctx);\n    const origNext = next;\n    next = () => {\n      resume(simpleCtx, true);\n      try {\n        return origNext();\n      } finally {\n        suspend(simpleCtx);\n      }\n    };\n    if (ctx.type === ActionContextActionType.Sync) {\n      let retObj = start(simpleCtx);\n      if (retObj) {\n        resume(simpleCtx, true);\n        suspend(simpleCtx);\n        retObj = finish(simpleCtx, retObj);\n      } else {\n        try {\n          retObj = finish(simpleCtx, { result: ActionTrackingResult.Return, value: next() });\n        } catch (err) {\n          retObj = finish(simpleCtx, { result: ActionTrackingResult.Throw, value: err });\n        }\n      }\n      return returnOrThrowActionTrackingReturn(retObj);\n    } else {\n      switch (ctx.asyncStepType) {\n        case ActionContextAsyncStepType.Spawn: {\n          let retObj = start(simpleCtx);\n          if (retObj) {\n            resume(simpleCtx, true);\n            suspend(simpleCtx);\n            retObj = finish(simpleCtx, retObj);\n            return returnOrThrowActionTrackingReturn(retObj);\n          } else {\n            return next();\n          }\n        }\n        case ActionContextAsyncStepType.Return: {\n          const flowFinisher = next();\n          const retObj = finish(simpleCtx, {\n            result: ActionTrackingResult.Return,\n            value: flowFinisher.value\n          });\n          flowFinisher.resolution = retObj.result === ActionTrackingResult.Return ? \"accept\" : \"reject\";\n          flowFinisher.value = retObj.value;\n          return flowFinisher;\n        }\n        case ActionContextAsyncStepType.Throw: {\n          const flowFinisher = next();\n          const retObj = finish(simpleCtx, {\n            result: ActionTrackingResult.Throw,\n            value: flowFinisher.value\n          });\n          flowFinisher.resolution = retObj.result === ActionTrackingResult.Return ? \"accept\" : \"reject\";\n          flowFinisher.value = retObj.value;\n          return flowFinisher;\n        }\n        case ActionContextAsyncStepType.Resume:\n        case ActionContextAsyncStepType.ResumeError:\n          if (resumeSuspendSupport) {\n            return next();\n          } else {\n            throw failure(`assertion error: async step should have been filtered out - ${ctx.asyncStepType}`);\n          }\n        default:\n          throw failure(`assertion error: async step should have been filtered out - ${ctx.asyncStepType}`);\n      }\n    }\n  };\n  return addActionMiddleware({ middleware: mware, filter, subtreeRoot });\n}\nfunction returnOrThrowActionTrackingReturn(retObj) {\n  if (retObj.result === ActionTrackingResult.Return) {\n    return retObj.value;\n  } else {\n    throw retObj.value;\n  }\n}\nconst simpleDataContextSymbol = Symbol(\"simpleDataContext\");\nfunction simplifyActionContext(ctx) {\n  while (ctx.previousAsyncStepContext) {\n    ctx = ctx.previousAsyncStepContext;\n  }\n  let simpleCtx = ctx.data[simpleDataContextSymbol];\n  if (!simpleCtx) {\n    const parentContext = ctx.parentContext ? simplifyActionContext(ctx.parentContext) : void 0;\n    simpleCtx = {\n      actionName: ctx.actionName,\n      type: ctx.type,\n      target: ctx.target,\n      args: ctx.args,\n      data: ctx.data,\n      parentContext\n    };\n    simpleCtx.rootContext = parentContext ? parentContext.rootContext : simpleCtx;\n    ctx.data[simpleDataContextSymbol] = simpleCtx;\n  }\n  return simpleCtx;\n}\nfunction onActionMiddleware(subtreeRoot, listeners) {\n  assertTweakedObject(subtreeRoot, \"subtreeRoot\");\n  assertIsObject(listeners, \"listeners\");\n  return actionTrackingMiddleware(subtreeRoot, {\n    filter(ctx) {\n      if (ctx.parentContext) {\n        return false;\n      }\n      if (isHookAction(ctx.actionName)) {\n        return false;\n      }\n      return true;\n    },\n    onStart(ctx) {\n      if (listeners.onStart) {\n        const actionCall = actionContextToActionCall(ctx);\n        return listeners.onStart(actionCall, ctx);\n      }\n    },\n    onFinish(ctx, ret) {\n      if (listeners.onFinish) {\n        const actionCall = actionContextToActionCall(ctx);\n        return listeners.onFinish(actionCall, ctx, ret);\n      }\n    }\n  });\n}\nfunction actionContextToActionCall(ctx) {\n  const rootPath = fastGetRootPath(ctx.target);\n  return {\n    actionName: ctx.actionName,\n    args: ctx.args,\n    targetPath: rootPath.path,\n    targetPathIds: rootPathToTargetPathIds(rootPath)\n  };\n}\nfunction readonlyMiddleware(subtreeRoot) {\n  assertTweakedObject(subtreeRoot, \"subtreeRoot\");\n  let writable = false;\n  const writableSymbol = Symbol(\"writable\");\n  const disposer = actionTrackingMiddleware(subtreeRoot, {\n    filter(ctx) {\n      if (isHookAction(ctx.actionName)) {\n        return false;\n      }\n      let currentlyWritable = writable;\n      if (!currentlyWritable) {\n        let currentCtx = ctx;\n        while (currentCtx && !currentlyWritable) {\n          currentlyWritable = !!currentCtx.data[writableSymbol];\n          currentCtx = currentCtx.parentContext;\n        }\n      }\n      if (currentlyWritable) {\n        ctx.data[writableSymbol] = true;\n        return false;\n      }\n      return true;\n    },\n    onStart(ctx) {\n      return {\n        result: ActionTrackingResult.Throw,\n        value: failure(`tried to invoke action '${ctx.actionName}' over a readonly node`)\n      };\n    }\n  });\n  return {\n    dispose: disposer,\n    allowWrite(fn) {\n      const oldWritable = writable;\n      writable = true;\n      try {\n        return fn();\n      } finally {\n        writable = oldWritable;\n      }\n    }\n  };\n}\nfunction escapePathComponent(path) {\n  if (typeof path === \"number\") {\n    return \"\" + path;\n  }\n  if (path.indexOf(\"/\") === -1 && path.indexOf(\"~\") === -1) {\n    return path;\n  }\n  return path.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n}\nfunction unescapePathComponent(path) {\n  return path.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\nfunction pathToJsonPointer(path) {\n  if (path.length <= 0) {\n    return \"\";\n  }\n  return \"/\" + path.map(escapePathComponent).join(\"/\");\n}\nfunction jsonPointerToPath(jsonPointer) {\n  if (jsonPointer === \"\") {\n    return [];\n  }\n  if (!jsonPointer.startsWith(\"/\")) {\n    throw failure(\"a JSON pointer must start with '/' or be empty\");\n  }\n  jsonPointer = jsonPointer.slice(1);\n  return jsonPointer.split(\"/\").map(unescapePathComponent);\n}\nfunction patchToJsonPatch(patch) {\n  return {\n    ...patch,\n    path: pathToJsonPointer(patch.path)\n  };\n}\nfunction jsonPatchToPatch(jsonPatch) {\n  return {\n    ...jsonPatch,\n    path: jsonPointerToPath(jsonPatch.path)\n  };\n}\nfunction patchRecorder(subtreeRoot, opts) {\n  assertTweakedObject(subtreeRoot, \"subtreeRoot\");\n  return internalPatchRecorder(subtreeRoot, opts);\n}\nfunction internalPatchRecorder(subtreeRoot, opts) {\n  let { recording, filter } = {\n    recording: true,\n    filter: alwaysAcceptFilter,\n    ...opts\n  };\n  const events = mobx__WEBPACK_IMPORTED_MODULE_0__.observable.array([], {\n    deep: false\n  });\n  let onPatchesDisposer;\n  if (subtreeRoot) {\n    onPatchesDisposer = onPatches(subtreeRoot, (p, invP) => {\n      var _a2;\n      if (recording && filter(p, invP)) {\n        events.push({\n          target: subtreeRoot,\n          patches: p,\n          inversePatches: invP\n        });\n        (_a2 = opts == null ? void 0 : opts.onPatches) == null ? void 0 : _a2.call(opts, p, invP);\n      }\n    });\n  } else {\n    onPatchesDisposer = onGlobalPatches((target, p, invP) => {\n      var _a2;\n      if (recording && filter(p, invP)) {\n        events.push({\n          target,\n          patches: p,\n          inversePatches: invP\n        });\n        (_a2 = opts == null ? void 0 : opts.onPatches) == null ? void 0 : _a2.call(opts, p, invP);\n      }\n    });\n  }\n  return {\n    get recording() {\n      return recording;\n    },\n    set recording(enabled) {\n      recording = enabled;\n    },\n    get events() {\n      return events;\n    },\n    dispose() {\n      onPatchesDisposer();\n    }\n  };\n}\nconst alwaysAcceptFilter = () => true;\nfunction transactionMiddleware(target) {\n  assertIsObject(target, \"target\");\n  const { model: model2, actionName } = target;\n  assertIsModel(model2, \"target.model\");\n  if (typeof actionName !== \"string\") {\n    throw failure(\"target.actionName must be a string\");\n  }\n  const patchRecorderSymbol = Symbol(\"patchRecorder\");\n  function initPatchRecorder(ctx) {\n    ctx.rootContext.data[patchRecorderSymbol] = internalPatchRecorder(void 0, {\n      recording: false\n    });\n  }\n  function getPatchRecorder(ctx) {\n    return ctx.rootContext.data[patchRecorderSymbol];\n  }\n  return actionTrackingMiddleware(model2, {\n    filter(ctx) {\n      const rootContext = ctx.rootContext;\n      return rootContext.target === model2 && rootContext.actionName === actionName;\n    },\n    onStart(ctx) {\n      if (ctx === ctx.rootContext) {\n        initPatchRecorder(ctx);\n      }\n    },\n    onResume(ctx) {\n      getPatchRecorder(ctx).recording = true;\n    },\n    onSuspend(ctx) {\n      getPatchRecorder(ctx).recording = false;\n    },\n    onFinish(ctx, ret) {\n      if (ctx === ctx.rootContext) {\n        const patchRecorder2 = getPatchRecorder(ctx);\n        try {\n          if (ret.result === ActionTrackingResult.Throw) {\n            const { events } = patchRecorder2;\n            for (let i = events.length - 1; i >= 0; i--) {\n              const event = events[i];\n              applyPatches(event.target, event.inversePatches, true);\n            }\n          }\n        } finally {\n          patchRecorder2.dispose();\n        }\n      }\n    }\n  });\n}\nfunction transaction(target, propertyKey) {\n  checkModelDecoratorArgs(\"transaction\", target, propertyKey);\n  addModelClassInitializer(target.constructor, (modelInstance) => {\n    transactionMiddleware({\n      model: modelInstance,\n      actionName: propertyKey\n    });\n  });\n}\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n    r = Reflect.decorate(decorators, target, key, desc);\n  else\n    for (var i = decorators.length - 1; i >= 0; i--)\n      if (d = decorators[i])\n        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nfunction typesObjectHelper(objFn, frozen2, typeInfoGen) {\n  assertIsFunction(objFn, \"objFn\");\n  return lateTypeChecker(() => {\n    const objectSchema = objFn();\n    assertIsObject(objectSchema, \"objectSchema\");\n    const schemaEntries = Object.entries(objectSchema);\n    const getTypeName = (...recursiveTypeCheckers) => {\n      const propsMsg = [];\n      for (const [k, unresolvedTc] of schemaEntries) {\n        const tc = resolveTypeChecker(unresolvedTc);\n        let propTypename = \"...\";\n        if (!recursiveTypeCheckers.includes(tc)) {\n          propTypename = tc.getTypeName(...recursiveTypeCheckers, tc);\n        }\n        propsMsg.push(`${k}: ${propTypename};`);\n      }\n      return `{ ${propsMsg.join(\" \")} }`;\n    };\n    const applySnapshotProcessor = (obj, mode) => {\n      const newObj = {};\n      const keys2 = Object.keys(obj);\n      for (let i = 0; i < keys2.length; i++) {\n        const k = keys2[i];\n        const unresolvedTc = objectSchema[k];\n        if (unresolvedTc) {\n          const tc = resolveTypeChecker(unresolvedTc);\n          newObj[k] = mode === \"from\" ? tc.fromSnapshotProcessor(obj[k]) : tc.toSnapshotProcessor(obj[k]);\n        } else {\n          newObj[k] = obj[k];\n        }\n      }\n      return newObj;\n    };\n    const thisTc = new TypeChecker(TypeCheckerBaseType.Object, (obj, path, typeCheckedValue) => {\n      if (!isObject(obj) || frozen2 && !(obj instanceof Frozen)) {\n        return new TypeCheckError(path, getTypeName(thisTc), obj, typeCheckedValue);\n      }\n      for (const [k, unresolvedTc] of schemaEntries) {\n        const tc = resolveTypeChecker(unresolvedTc);\n        const objVal = obj[k];\n        const valueError = tc.check(objVal, [...path, k], typeCheckedValue);\n        if (valueError) {\n          return valueError;\n        }\n      }\n      return null;\n    }, getTypeName, typeInfoGen, (obj) => {\n      if (!isObject(obj)) {\n        return null;\n      }\n      for (const [k, unresolvedTc] of schemaEntries) {\n        const tc = resolveTypeChecker(unresolvedTc);\n        const objVal = obj[k];\n        const valueActualChecker = tc.snapshotType(objVal);\n        if (!valueActualChecker) {\n          return null;\n        }\n      }\n      return thisTc;\n    }, (obj) => {\n      return applySnapshotProcessor(obj, \"from\");\n    }, (obj) => {\n      return applySnapshotProcessor(obj, \"to\");\n    });\n    return thisTc;\n  }, typeInfoGen);\n}\nfunction typesObject(objectFunction) {\n  const typeInfoGen = (t) => new ObjectTypeInfo(t, objectFunction);\n  return typesObjectHelper(objectFunction, false, typeInfoGen);\n}\nclass ObjectTypeInfo extends TypeInfo {\n  constructor(thisType, _objTypeFn) {\n    super(thisType);\n    __publicField(this, \"_objTypeFn\");\n    // memoize to always return the same object\n    __publicField(this, \"_props\", lazy(() => {\n      const objSchema = this._objTypeFn();\n      const propTypes = {};\n      Object.keys(objSchema).forEach((propName) => {\n        const type = resolveStandardType(objSchema[propName]);\n        propTypes[propName] = { type, typeInfo: getTypeInfo(type) };\n      });\n      return propTypes;\n    }));\n    this._objTypeFn = _objTypeFn;\n  }\n  get props() {\n    return this._props();\n  }\n}\nfunction typesFrozen(dataType) {\n  return typesObjectHelper(() => ({\n    data: dataType\n  }), true, (t) => new FrozenTypeInfo(t, resolveStandardType(dataType)));\n}\nclass FrozenTypeInfo extends TypeInfo {\n  constructor(thisType, dataType) {\n    super(thisType);\n    __publicField(this, \"dataType\");\n    this.dataType = dataType;\n  }\n  get dataTypeInfo() {\n    return getTypeInfo(this.dataType);\n  }\n}\nconst unchecked = new TypeChecker(TypeCheckerBaseType.Any, null, () => \"any\", (t) => new UncheckedTypeInfo(t), () => unchecked, identityFn, identityFn);\nfunction typesUnchecked() {\n  return unchecked;\n}\nclass UncheckedTypeInfo extends TypeInfo {\n}\nfunction typesOr(dispatcherOrType, ...moreOrTypes) {\n  const orTypes = moreOrTypes.slice();\n  let finalDispatcher;\n  const firstTypeChecker = resolveStandardTypeNoThrow(dispatcherOrType);\n  if (firstTypeChecker) {\n    orTypes.unshift(firstTypeChecker);\n  } else {\n    const dispatcher = dispatcherOrType;\n    finalDispatcher = (sn) => {\n      const type = dispatcher(sn);\n      const typeChecker = resolveTypeChecker(type);\n      return typeChecker;\n    };\n  }\n  if (orTypes.length <= 0) {\n    throw failure(\"or type must have at least 1 possible type\");\n  }\n  const typeInfoGen = (t) => new OrTypeInfo(t, orTypes.map(resolveStandardType));\n  return lateTypeChecker(() => {\n    const checkers = orTypes.map(resolveTypeChecker);\n    if (checkers.some((tc) => tc.unchecked)) {\n      return typesUnchecked();\n    }\n    const getTypeName = (...recursiveTypeCheckers) => {\n      const typeNames = checkers.map((tc) => {\n        if (recursiveTypeCheckers.includes(tc)) {\n          return \"...\";\n        }\n        return tc.getTypeName(...recursiveTypeCheckers, tc);\n      });\n      return typeNames.join(\" | \");\n    };\n    let thisTcBaseType;\n    if (checkers.some((c) => c.baseType !== checkers[0].baseType)) {\n      thisTcBaseType = TypeCheckerBaseType.Any;\n    } else {\n      thisTcBaseType = checkers[0].baseType;\n    }\n    const thisTc = new TypeChecker(thisTcBaseType, (value, path, typeCheckedValue) => {\n      const someMatchingType = checkers.some((tc) => !tc.check(value, path, typeCheckedValue));\n      if (someMatchingType) {\n        return null;\n      } else {\n        return new TypeCheckError(path, getTypeName(thisTc), value, typeCheckedValue);\n      }\n    }, getTypeName, typeInfoGen, (value) => {\n      const valueBaseType = getTypeCheckerBaseTypeFromValue(value);\n      const checkerForBaseType = checkers.filter((c) => c.baseType === valueBaseType || c.baseType === TypeCheckerBaseType.Any);\n      if (checkerForBaseType.length === 1 && checkerForBaseType[0].baseType === valueBaseType) {\n        return checkerForBaseType[0];\n      }\n      for (let i = 0; i < checkerForBaseType.length; i++) {\n        const matchingType = checkerForBaseType[i].snapshotType(value);\n        if (matchingType) {\n          return matchingType;\n        }\n      }\n      return null;\n    }, (sn) => {\n      const type = finalDispatcher ? finalDispatcher(sn) : thisTc.snapshotType(sn);\n      if (!type) {\n        throw failure(`snapshot '${JSON.stringify(sn)}' does not match the following type: ${getTypeName(thisTc)}`);\n      }\n      return type.fromSnapshotProcessor(sn);\n    }, (sn) => {\n      const type = finalDispatcher ? finalDispatcher(sn) : thisTc.snapshotType(sn);\n      if (!type) {\n        throw failure(`snapshot '${JSON.stringify(sn)}' does not match the following type: ${getTypeName(thisTc)}`);\n      }\n      return type.toSnapshotProcessor(sn);\n    });\n    return thisTc;\n  }, typeInfoGen);\n}\nclass OrTypeInfo extends TypeInfo {\n  constructor(thisType, orTypes) {\n    super(thisType);\n    __publicField(this, \"orTypes\");\n    // memoize to always return the same array on the getter\n    __publicField(this, \"_orTypeInfos\", lazy(() => this.orTypes.map(getTypeInfo)));\n    this.orTypes = orTypes;\n  }\n  get orTypeInfos() {\n    return this._orTypeInfos();\n  }\n}\nconst noDefaultValueSymbol = Symbol(\"noDefaultValue\");\nconst tPropCache = /* @__PURE__ */ new WeakMap();\nfunction getOrCreateTProp(type, defKey, createTProp) {\n  let defValueCache = tPropCache.get(type);\n  if (!defValueCache) {\n    defValueCache = /* @__PURE__ */ new Map();\n    tPropCache.set(type, defValueCache);\n  }\n  let prop2 = defValueCache.get(defKey);\n  if (!prop2) {\n    prop2 = createTProp();\n    defValueCache.set(defKey, prop2);\n  }\n  return prop2;\n}\nfunction tProp(typeOrDefaultValue, def) {\n  switch (typeof typeOrDefaultValue) {\n    case \"string\":\n      return tProp(typesString, typeOrDefaultValue);\n    case \"number\":\n      return tProp(typesNumber, typeOrDefaultValue);\n    case \"boolean\":\n      return tProp(typesBoolean, typeOrDefaultValue);\n  }\n  const hasDefaultValue = arguments.length >= 2;\n  const typeChecker = resolveStandardType(typeOrDefaultValue);\n  return getOrCreateTProp(typeChecker, hasDefaultValue ? def : noDefaultValueSymbol, () => {\n    const fromSnapshotTypeChecker = hasDefaultValue ? typesOr(typeChecker, typesUndefined, typesNull) : typeChecker;\n    const newProp = Object.create(hasDefaultValue ? prop(def) : prop());\n    Object.assign(newProp, {\n      _typeChecker: typeChecker,\n      _fromSnapshotProcessor: tPropFromSnapshotProcessor.bind(void 0, fromSnapshotTypeChecker),\n      _toSnapshotProcessor: tPropToSnapshotProcessor.bind(void 0, typeChecker)\n    });\n    return newProp;\n  });\n}\nfunction tPropFromSnapshotProcessor(fromSnapshotTypeChecker, sn) {\n  const fsnp = resolveTypeChecker(fromSnapshotTypeChecker).fromSnapshotProcessor;\n  return fsnp ? fsnp(sn) : sn;\n}\nfunction tPropToSnapshotProcessor(typeChecker, sn) {\n  const tsnp = resolveTypeChecker(typeChecker).toSnapshotProcessor;\n  return tsnp ? tsnp(sn) : sn;\n}\nfunction chainFns(...fns) {\n  const definedFns = fns.filter((fn) => !!fn);\n  if (definedFns.length <= 0)\n    return void 0;\n  const chainedFn = (v, ...args) => {\n    let ret = v;\n    for (let i = 0; i < definedFns.length; i++) {\n      ret = definedFns[i](ret, ...args);\n    }\n    return ret;\n  };\n  return chainedFn;\n}\nfunction assertIsClassOrDataModelClass(model2, argName, customErrMsg = \"must be a class or data model class\") {\n  if (!isModelClass(model2) && !isDataModelClass(model2)) {\n    throw failure(`${argName} ${customErrMsg}`);\n  }\n}\nfunction getModelInstanceDataField(model2, modelProp, modelPropName) {\n  const value = model2.$[modelPropName];\n  if (!modelProp._transform) {\n    return value;\n  }\n  return modelProp._transform.transform(value, model2, modelPropName, (newValue) => {\n    applySet(model2.$, modelPropName, newValue);\n  });\n}\nfunction setModelInstanceDataField(model2, modelProp, modelPropName, value) {\n  if (!(modelInitializedSymbol in model2)) {\n    return;\n  }\n  if (modelProp._setter === \"assign\" && !getCurrentActionContext()) {\n    applySet(model2, modelPropName, value);\n    return;\n  }\n  let untransformedValue = modelProp._transform ? modelProp._transform.untransform(value, model2, modelPropName) : value;\n  if (untransformedValue == null) {\n    const defaultValue = getModelPropDefaultValue(modelProp);\n    if (defaultValue !== noDefaultValue) {\n      untransformedValue = defaultValue;\n    }\n  }\n  model2.$[modelPropName] = untransformedValue;\n}\nconst idGenerator = () => getGlobalConfig().modelIdGenerator();\nconst tPropForId = tProp(typesString, idGenerator);\ntPropForId._isId = true;\nconst propForId = prop(idGenerator);\npropForId._isId = true;\nfunction sharedInternalModel({ modelProps, baseModel, type, valueType, fromSnapshotProcessor, toSnapshotProcessor }) {\n  assertIsObject(modelProps, \"modelProps\");\n  modelProps = Object.assign(/* @__PURE__ */ Object.create(null), modelProps);\n  if (baseModel) {\n    assertIsClassOrDataModelClass(baseModel, \"baseModel\");\n    const unwrappedClass = baseModel[modelUnwrappedClassSymbol];\n    if (unwrappedClass) {\n      baseModel = unwrappedClass;\n      assertIsClassOrDataModelClass(baseModel, \"baseModel\");\n    }\n  }\n  const composedModelProps = modelProps;\n  if (baseModel) {\n    const oldModelProps = getInternalModelClassPropsInfo(baseModel);\n    for (const oldModelPropKey of Object.keys(oldModelProps)) {\n      if (!modelProps[oldModelPropKey]) {\n        composedModelProps[oldModelPropKey] = oldModelProps[oldModelPropKey];\n      }\n    }\n  }\n  const idKeys = Object.keys(composedModelProps).filter((k) => {\n    const p = composedModelProps[k];\n    return p._isId;\n  });\n  if (type === \"class\") {\n    if (idKeys.length > 1) {\n      throw failure(`expected at most one idProp but got many: ${JSON.stringify(idKeys)}`);\n    }\n  } else {\n    if (idKeys.length >= 1) {\n      throw failure(`expected no idProp but got some: ${JSON.stringify(idKeys)}`);\n    }\n  }\n  const needsTypeChecker = Object.values(composedModelProps).some((mp) => !!mp._typeChecker);\n  let idKey;\n  if (idKeys.length >= 1) {\n    idKey = idKeys[0];\n    const idProp2 = composedModelProps[idKey];\n    let baseProp2 = needsTypeChecker ? tPropForId : propForId;\n    switch (idProp2 == null ? void 0 : idProp2._setter) {\n      case true:\n        baseProp2 = baseProp2.withSetter();\n        break;\n      case \"assign\":\n        baseProp2 = baseProp2.withSetter(\"assign\");\n        break;\n    }\n    composedModelProps[idKey] = baseProp2;\n  }\n  let dataTypeChecker;\n  if (needsTypeChecker) {\n    const typeCheckerObj = {};\n    for (const [k, mp] of Object.entries(composedModelProps)) {\n      typeCheckerObj[k] = !mp._typeChecker ? typesUnchecked() : mp._typeChecker;\n    }\n    dataTypeChecker = typesObject(() => typeCheckerObj);\n  }\n  const base = baseModel != null ? baseModel : type === \"class\" ? BaseModel : BaseDataModel;\n  const basePropNames = type === \"class\" ? baseModelPropNames : baseDataModelPropNames;\n  let propsToDeleteFromBase;\n  function ThisModel(initialData, constructorOptions) {\n    var _a2;\n    const modelClass2 = (_a2 = constructorOptions == null ? void 0 : constructorOptions.modelClass) != null ? _a2 : this.constructor;\n    const baseModel2 = new base(initialData, {\n      ...constructorOptions,\n      modelClass: modelClass2\n    });\n    if (!propsToDeleteFromBase) {\n      propsToDeleteFromBase = Object.keys(composedModelProps).filter((p) => !basePropNames.has(p) && Object.hasOwn(baseModel2, p));\n    }\n    propsToDeleteFromBase.forEach((prop2) => delete baseModel2[prop2]);\n    return baseModel2;\n  }\n  Object.assign(ThisModel, base);\n  const initializers = base[modelInitializersSymbol];\n  if (initializers) {\n    ThisModel[modelInitializersSymbol] = initializers.slice();\n  }\n  setInternalModelClassPropsInfo(ThisModel, composedModelProps);\n  if (type === \"class\") {\n    const metadata = {\n      dataType: dataTypeChecker,\n      modelIdProperty: idKey,\n      valueType\n    };\n    ThisModel[modelMetadataSymbol] = metadata;\n  } else {\n    const metadata = {\n      dataType: dataTypeChecker\n    };\n    ThisModel[modelMetadataSymbol] = metadata;\n  }\n  const newPrototype = Object.create(base.prototype);\n  ThisModel.prototype = new Proxy(newPrototype, {\n    get(target, p, receiver) {\n      if (receiver === ThisModel.prototype) {\n        return target[p];\n      }\n      const modelProp = !basePropNames.has(p) && composedModelProps[p];\n      return modelProp ? getModelInstanceDataField(receiver, modelProp, p) : Reflect.get(target, p, receiver);\n    },\n    set(target, p, v, receiver) {\n      if (receiver === ThisModel.prototype) {\n        target[p] = v;\n        return true;\n      }\n      const modelProp = !basePropNames.has(p) && composedModelProps[p];\n      if (modelProp) {\n        setModelInstanceDataField(receiver, modelProp, p, v);\n        return true;\n      }\n      return Reflect.set(target, p, v, receiver);\n    },\n    has(target, p) {\n      const modelProp = !basePropNames.has(p) && composedModelProps[p];\n      return !!modelProp || Reflect.has(target, p);\n    }\n  });\n  newPrototype.constructor = ThisModel;\n  for (const [propName, propData] of Object.entries(modelProps)) {\n    if (propData._setter === true) {\n      const setterName = propNameToSetterName(propName);\n      const newPropDescriptor = modelAction(newPrototype, setterName, {\n        value: function(value) {\n          this[propName] = value;\n        },\n        writable: true,\n        enumerable: false,\n        configurable: true\n      });\n      Object.defineProperty(newPrototype, setterName, newPropDescriptor);\n    }\n  }\n  const modelPropsFromSnapshotProcessor = getModelPropsFromSnapshotProcessor(composedModelProps);\n  const modelPropsToSnapshotProcessor = getModelPropsToSnapshotProcessor(composedModelProps);\n  if (fromSnapshotProcessor) {\n    const fn = fromSnapshotProcessor;\n    fromSnapshotProcessor = (sn) => {\n      return {\n        ...fn(sn),\n        [modelTypeKey]: sn[modelTypeKey]\n      };\n    };\n  }\n  if (toSnapshotProcessor) {\n    const fn = toSnapshotProcessor;\n    toSnapshotProcessor = (sn, modelInstance) => {\n      return {\n        ...fn(sn, modelInstance),\n        [modelTypeKey]: sn[modelTypeKey]\n      };\n    };\n  }\n  ThisModel.fromSnapshotProcessor = chainFns(fromSnapshotProcessor, modelPropsFromSnapshotProcessor);\n  ThisModel.toSnapshotProcessor = chainFns(modelPropsToSnapshotProcessor, toSnapshotProcessor);\n  return ThisModel;\n}\nfunction getModelPropsFromSnapshotProcessor(composedModelProps) {\n  const propsWithFromSnapshotProcessor = Object.entries(composedModelProps).filter(([_propName, propData]) => propData._fromSnapshotProcessor);\n  if (propsWithFromSnapshotProcessor.length <= 0) {\n    return void 0;\n  }\n  return (sn) => {\n    const newSn = { ...sn };\n    for (const [propName, propData] of propsWithFromSnapshotProcessor) {\n      if (propData._fromSnapshotProcessor) {\n        newSn[propName] = propData._fromSnapshotProcessor(sn[propName]);\n      }\n    }\n    return newSn;\n  };\n}\nfunction getModelPropsToSnapshotProcessor(composedModelProps) {\n  const propsWithToSnapshotProcessor = Object.entries(composedModelProps).filter(([_propName, propData]) => propData._toSnapshotProcessor);\n  if (propsWithToSnapshotProcessor.length <= 0) {\n    return void 0;\n  }\n  return (sn) => {\n    const newSn = { ...sn };\n    for (const [propName, propData] of propsWithToSnapshotProcessor) {\n      if (propData._toSnapshotProcessor) {\n        newSn[propName] = propData._toSnapshotProcessor(sn[propName]);\n      }\n    }\n    return newSn;\n  };\n}\nfunction ExtendedModel(...args) {\n  let baseModel;\n  let modelProps;\n  let modelOptions;\n  if (isModelClass(args[0])) {\n    baseModel = args[0];\n    modelProps = args[1];\n    modelOptions = args[2];\n  } else {\n    const gen = args[0]();\n    baseModel = gen.baseModel;\n    modelProps = gen.props;\n    modelOptions = args[1];\n  }\n  assertIsModelClass(baseModel, \"baseModel\");\n  return internalModel$1(modelProps, baseModel, modelOptions);\n}\nfunction Model(fnModelPropsOrModelProps, modelOptions) {\n  const modelProps = typeof fnModelPropsOrModelProps === \"function\" ? fnModelPropsOrModelProps() : fnModelPropsOrModelProps;\n  return internalModel$1(modelProps, void 0, modelOptions);\n}\nfunction internalModel$1(modelProps, baseModel, modelOptions) {\n  var _a2;\n  return sharedInternalModel({\n    modelProps,\n    baseModel,\n    type: \"class\",\n    valueType: (_a2 = modelOptions == null ? void 0 : modelOptions.valueType) != null ? _a2 : false,\n    fromSnapshotProcessor: modelOptions == null ? void 0 : modelOptions.fromSnapshotProcessor,\n    toSnapshotProcessor: modelOptions == null ? void 0 : modelOptions.toSnapshotProcessor\n  });\n}\nconst model = (name) => (clazz) => {\n  return internalModel(name)(clazz);\n};\nconst proxyClassHandlerTag = /* @__PURE__ */ new WeakMap();\nconst proxyClassHandler = {\n  construct(target, args) {\n    const instance = new target(...args);\n    runLateInitializationFunctions(instance, runAfterNewSymbol);\n    const tag2 = proxyClassHandlerTag.get(target);\n    if (!tag2.makeObservableFailed && getMobxVersion() >= 6) {\n      try {\n        mobx6.makeObservable(instance);\n      } catch (e) {\n        tag2.makeObservableFailed = true;\n        const err = e;\n        if (err.message !== \"[MobX] No annotations were passed to makeObservable, but no decorator members have been found either\" && err.message !== \"[MobX] No annotations were passed to makeObservable, but no decorated members have been found either\") {\n          throw err;\n        }\n      }\n    }\n    addHiddenProp(instance, modelInitializedSymbol, true, false);\n    runLateInitializationFunctions(instance, runBeforeOnInitSymbol);\n    if (tag2.type === \"class\" && instance.onInit) {\n      wrapModelMethodInActionIfNeeded(instance, \"onInit\", HookAction.OnInit);\n      instance.onInit();\n    }\n    if (tag2.type === \"data\" && instance.onLazyInit) {\n      wrapModelMethodInActionIfNeeded(instance, \"onLazyInit\", HookAction.OnLazyInit);\n      instance.onLazyInit();\n    }\n    return instance;\n  }\n};\nconst internalModel = (name) => (clazz) => {\n  const type = isModelClass(clazz) ? \"class\" : isDataModelClass(clazz) ? \"data\" : void 0;\n  if (!type) {\n    throw failure(`clazz must be a class that extends from Model/DataModel`);\n  }\n  if (modelInfoByName[name]) {\n    if (getGlobalConfig().showDuplicateModelNameWarnings) {\n      logWarning(\"warn\", `a model with name \"${name}\" already exists (if you are using hot-reloading you may safely ignore this warning)`, `duplicateModelName - ${name}`);\n    }\n  }\n  if (modelUnwrappedClassSymbol in clazz && clazz[modelUnwrappedClassSymbol] === clazz) {\n    throw failure(\"a class already decorated with `@model` cannot be re-decorated\");\n  }\n  proxyClassHandlerTag.set(clazz, { makeObservableFailed: false, type });\n  const proxyClass = new Proxy(clazz, proxyClassHandler);\n  clazz.toString = () => `class ${clazz.name}#${name}`;\n  if (type === \"class\") {\n    clazz[modelTypeKey] = name;\n  }\n  proxyClass.prototype.constructor = proxyClass;\n  proxyClass[modelUnwrappedClassSymbol] = clazz;\n  const modelInfo = {\n    name,\n    class: proxyClass\n  };\n  modelInfoByName[name] = modelInfo;\n  modelInfoByClass.set(proxyClass, modelInfo);\n  modelInfoByClass.set(clazz, modelInfo);\n  runLateInitializationFunctions(clazz, runAfterModelDecoratorSymbol);\n  return proxyClass;\n};\nfunction tsDecorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n    r = Reflect.decorate(decorators, target, key, desc);\n  else\n    for (var i = decorators.length - 1; i >= 0; i--)\n      if (d = decorators[i])\n        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction decoratedModel(name, clazz, decorators) {\n  for (const [k, decorator] of Object.entries(decorators)) {\n    const prototypeValueDesc = Object.getOwnPropertyDescriptor(clazz.prototype, k);\n    tsDecorate(Array.isArray(decorator) ? decorator : [decorator], clazz.prototype, k, prototypeValueDesc ? prototypeValueDesc : void 0);\n  }\n  return name ? model(name)(clazz) : clazz;\n}\nfunction typesArray(itemType) {\n  const typeInfoGen = (t) => new ArrayTypeInfo(t, resolveStandardType(itemType));\n  return lateTypeChecker(() => {\n    const itemChecker = resolveTypeChecker(itemType);\n    const getTypeName = (...recursiveTypeCheckers) => `Array<${itemChecker.getTypeName(...recursiveTypeCheckers, itemChecker)}>`;\n    const thisTc = new TypeChecker(TypeCheckerBaseType.Array, (array, path, typeCheckedValue) => {\n      if (!isArray(array)) {\n        return new TypeCheckError(path, getTypeName(thisTc), array, typeCheckedValue);\n      }\n      if (!itemChecker.unchecked) {\n        for (let i = 0; i < array.length; i++) {\n          const itemError = itemChecker.check(array[i], [...path, i], typeCheckedValue);\n          if (itemError) {\n            return itemError;\n          }\n        }\n      }\n      return null;\n    }, getTypeName, typeInfoGen, (array) => {\n      if (!isArray(array)) {\n        return null;\n      }\n      if (!itemChecker.unchecked) {\n        for (let i = 0; i < array.length; i++) {\n          const itemActualChecker = itemChecker.snapshotType(array[i]);\n          if (!itemActualChecker) {\n            return null;\n          }\n        }\n      }\n      return thisTc;\n    }, (sn) => {\n      if (itemChecker.unchecked) {\n        return sn;\n      }\n      return sn.map((item) => itemChecker.fromSnapshotProcessor(item));\n    }, (sn) => {\n      if (itemChecker.unchecked) {\n        return sn;\n      }\n      return sn.map((item) => itemChecker.toSnapshotProcessor(item));\n    });\n    return thisTc;\n  }, typeInfoGen);\n}\nclass ArrayTypeInfo extends TypeInfo {\n  constructor(thisType, itemType) {\n    super(thisType);\n    __publicField(this, \"itemType\");\n    this.itemType = itemType;\n  }\n  get itemTypeInfo() {\n    return getTypeInfo(this.itemType);\n  }\n}\nvar UndoEventType;\n(function(UndoEventType2) {\n  UndoEventType2[\"Single\"] = \"single\";\n  UndoEventType2[\"Group\"] = \"group\";\n})(UndoEventType || (UndoEventType = {}));\nfunction toSingleEvents(event, reverse) {\n  if (event.type === UndoEventType.Single)\n    return [event];\n  else {\n    const array = [];\n    for (const e of event.events) {\n      if (reverse) {\n        array.unshift(...toSingleEvents(e, true));\n      } else {\n        array.push(...toSingleEvents(e, false));\n      }\n    }\n    return array;\n  }\n}\nlet UndoStore = class UndoStore2 extends Model({\n  // TODO: add proper type checking to undo store\n  undoEvents: tProp(typesArray(typesUnchecked()), () => []),\n  redoEvents: tProp(typesArray(typesUnchecked()), () => [])\n}) {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"_groupStack\", []);\n  }\n  /**\n   * @ignore\n   */\n  _clearUndo() {\n    withoutUndo(() => {\n      this.undoEvents.length = 0;\n    });\n  }\n  /**\n   * @ignore\n   */\n  _clearRedo() {\n    withoutUndo(() => {\n      this.redoEvents.length = 0;\n    });\n  }\n  /**\n   * @ignore\n   */\n  enforceMaxLevels({ maxUndoLevels, maxRedoLevels }) {\n    if (maxUndoLevels !== void 0) {\n      while (this.undoEvents.length > maxUndoLevels) {\n        this.undoEvents.shift();\n      }\n    }\n    if (maxRedoLevels !== void 0) {\n      while (this.redoEvents.length > maxRedoLevels) {\n        this.redoEvents.shift();\n      }\n    }\n  }\n  /**\n   * @ignore\n   */\n  _undo({ maxRedoLevels }) {\n    withoutUndo(() => {\n      const event = this.undoEvents.pop();\n      this.redoEvents.push(event);\n      this.enforceMaxLevels({ maxRedoLevels });\n    });\n  }\n  /**\n   * @ignore\n   */\n  _redo({ maxUndoLevels }) {\n    withoutUndo(() => {\n      const event = this.redoEvents.pop();\n      this.undoEvents.push(event);\n      this.enforceMaxLevels({ maxUndoLevels });\n    });\n  }\n  /**\n   * @ignore\n   */\n  _addUndo({ event, maxUndoLevels }) {\n    withoutUndo(() => {\n      this.undoEvents.push(event);\n      this.redoEvents.length = 0;\n      this.enforceMaxLevels({ maxUndoLevels });\n    });\n  }\n  /**\n   * @ignore\n   */\n  _addUndoToParentGroup(parentGroup, event) {\n    parentGroup.events.push(event);\n  }\n  /**\n   * @ignore\n   */\n  get _currentGroup() {\n    return this._groupStack[this._groupStack.length - 1];\n  }\n  /**\n   * @ignore\n   */\n  _startGroup(groupName, startRunning, options) {\n    var _a2;\n    let running = false;\n    let ended = false;\n    const parentGroup = this._currentGroup;\n    const group = {\n      type: UndoEventType.Group,\n      groupName,\n      events: []\n    };\n    const attachedStateBeforeEvent = parentGroup ? void 0 : (_a2 = options == null ? void 0 : options.attachedState) == null ? void 0 : _a2.save();\n    const api = {\n      pause: () => {\n        if (ended) {\n          throw failure(\"cannot pause a group when it is already ended\");\n        }\n        if (!running) {\n          throw failure(\"cannot pause a group when it is not running\");\n        }\n        if (this._currentGroup !== group) {\n          throw failure(\"group out of order\");\n        }\n        this._groupStack.pop();\n        running = false;\n      },\n      resume: () => {\n        if (ended) {\n          throw failure(\"cannot resume a group when it is already ended\");\n        }\n        if (running) {\n          throw failure(\"cannot resume a group when it is already running\");\n        }\n        this._groupStack.push(group);\n        running = true;\n      },\n      end: () => {\n        var _a3;\n        if (running) {\n          api.pause();\n        }\n        ended = true;\n        if (parentGroup) {\n          this._addUndoToParentGroup(parentGroup, group);\n        } else {\n          this._addUndo({\n            event: {\n              ...group,\n              attachedState: {\n                beforeEvent: attachedStateBeforeEvent,\n                afterEvent: (_a3 = options == null ? void 0 : options.attachedState) == null ? void 0 : _a3.save()\n              }\n            },\n            maxUndoLevels: options == null ? void 0 : options.maxUndoLevels\n          });\n        }\n      }\n    };\n    if (startRunning) {\n      api.resume();\n    }\n    return api;\n  }\n};\n__decorate([\n  modelAction\n], UndoStore.prototype, \"_clearUndo\", null);\n__decorate([\n  modelAction\n], UndoStore.prototype, \"_clearRedo\", null);\n__decorate([\n  modelAction\n], UndoStore.prototype, \"_undo\", null);\n__decorate([\n  modelAction\n], UndoStore.prototype, \"_redo\", null);\n__decorate([\n  modelAction\n], UndoStore.prototype, \"_addUndo\", null);\nUndoStore = __decorate([\n  model(`${namespace$2}/UndoStore`)\n], UndoStore);\nclass UndoManager {\n  /**\n   * Creates an instance of `UndoManager`.\n   * Do not use directly, use `undoMiddleware` instead.\n   *\n   * @param disposer\n   * @param subtreeRoot\n   * @param [store]\n   */\n  constructor(disposer, subtreeRoot, store, options) {\n    __publicField(this, \"disposer\");\n    __publicField(this, \"subtreeRoot\");\n    __publicField(this, \"options\");\n    /**\n     * The store currently being used to store undo/redo action events.\n     */\n    __publicField(this, \"store\");\n    __publicField(this, \"_isUndoRecordingDisabled\", false);\n    this.disposer = disposer;\n    this.subtreeRoot = subtreeRoot;\n    this.options = options;\n    if (getMobxVersion() >= 6) {\n      mobx6.makeObservable(this);\n    }\n    this.store = store != null ? store : new UndoStore({});\n  }\n  /**\n   * The undo stack, where the first operation to undo will be the last of the array.\n   * Do not manipulate this array directly.\n   */\n  get undoQueue() {\n    return this.store.undoEvents;\n  }\n  /**\n   * The redo stack, where the first operation to redo will be the last of the array.\n   * Do not manipulate this array directly.\n   */\n  get redoQueue() {\n    return this.store.redoEvents;\n  }\n  /**\n   * The number of undo actions available.\n   */\n  get undoLevels() {\n    return this.undoQueue.length;\n  }\n  /**\n   * If undo can be performed (if there is at least one undo action available).\n   */\n  get canUndo() {\n    return this.undoLevels > 0;\n  }\n  /**\n   * Clears the undo queue.\n   */\n  clearUndo() {\n    this.store._clearUndo();\n  }\n  /**\n   * The number of redo actions available.\n   */\n  get redoLevels() {\n    return this.redoQueue.length;\n  }\n  /**\n   * If redo can be performed (if there is at least one redo action available)\n   */\n  get canRedo() {\n    return this.redoLevels > 0;\n  }\n  /**\n   * Clears the redo queue.\n   */\n  clearRedo() {\n    this.store._clearRedo();\n  }\n  /**\n   * Undoes the last action.\n   * Will throw if there is no action to undo.\n   */\n  undo() {\n    var _a2;\n    if (!this.canUndo) {\n      throw failure(\"nothing to undo\");\n    }\n    const event = this.undoQueue[this.undoQueue.length - 1];\n    withoutUndo(() => {\n      var _a3, _b2, _c2;\n      toSingleEvents(event, true).forEach((e) => {\n        applyPatches(this.subtreeRoot, e.inversePatches, true);\n      });\n      if ((_a3 = event.attachedState) == null ? void 0 : _a3.beforeEvent) {\n        (_c2 = (_b2 = this.options) == null ? void 0 : _b2.attachedState) == null ? void 0 : _c2.restore(event.attachedState.beforeEvent);\n      }\n    });\n    this.store._undo({ maxRedoLevels: (_a2 = this.options) == null ? void 0 : _a2.maxRedoLevels });\n  }\n  /**\n   * Redoes the previous action.\n   * Will throw if there is no action to redo.\n   */\n  redo() {\n    var _a2;\n    if (!this.canRedo) {\n      throw failure(\"nothing to redo\");\n    }\n    const event = this.redoQueue[this.redoQueue.length - 1];\n    withoutUndo(() => {\n      var _a3, _b2, _c2;\n      toSingleEvents(event, false).forEach((e) => {\n        applyPatches(this.subtreeRoot, e.patches);\n      });\n      if ((_a3 = event.attachedState) == null ? void 0 : _a3.afterEvent) {\n        (_c2 = (_b2 = this.options) == null ? void 0 : _b2.attachedState) == null ? void 0 : _c2.restore(event.attachedState.afterEvent);\n      }\n    });\n    this.store._redo({ maxUndoLevels: (_a2 = this.options) == null ? void 0 : _a2.maxUndoLevels });\n  }\n  /**\n   * Disposes the undo middleware.\n   */\n  dispose() {\n    this.disposer();\n  }\n  /**\n   * Returns if undo recording is currently disabled or not for this particular `UndoManager`.\n   */\n  get isUndoRecordingDisabled() {\n    return this._isUndoRecordingDisabled;\n  }\n  /**\n   * Skips the undo recording mechanism for the code block that gets run synchronously inside.\n   *\n   * @typeparam T Code block return type.\n   * @param fn Code block to run.\n   * @returns The value returned by the code block.\n   */\n  withoutUndo(fn) {\n    const savedUndoDisabled = this._isUndoRecordingDisabled;\n    this._isUndoRecordingDisabled = true;\n    try {\n      return fn();\n    } finally {\n      this._isUndoRecordingDisabled = savedUndoDisabled;\n    }\n  }\n  /**\n   * Creates a custom group that can be continued multiple times and then ended.\n   * @param groupName Optional group name.\n   * @returns An API to continue/end the group.\n   */\n  createGroup(groupName) {\n    const group = this.store._startGroup(groupName, false, this.options);\n    return {\n      continue(fn) {\n        group.resume();\n        try {\n          return fn();\n        } finally {\n          group.pause();\n        }\n      },\n      end() {\n        group.end();\n      }\n    };\n  }\n  withGroup(arg1, arg2) {\n    let groupName;\n    let fn;\n    if (typeof arg1 === \"string\") {\n      groupName = arg1;\n      fn = arg2;\n    } else {\n      fn = arg1;\n    }\n    const group = this.store._startGroup(groupName, true, this.options);\n    try {\n      return fn();\n    } finally {\n      group.end();\n    }\n  }\n  withGroupFlow(arg1, arg2) {\n    let groupName;\n    let fn;\n    if (typeof arg1 === \"string\") {\n      groupName = arg1;\n      fn = arg2;\n    } else {\n      fn = arg1;\n    }\n    const gen = fn();\n    const group = this.store._startGroup(groupName, false, this.options);\n    const genNext = gen.next.bind(gen);\n    const genThrow = gen.throw.bind(gen);\n    const promise = new Promise(function(resolve, reject) {\n      function onFulfilled(res) {\n        group.resume();\n        let ret;\n        try {\n          ret = genNext(res);\n        } catch (e) {\n          group.end();\n          reject(e);\n          return;\n        }\n        group.pause();\n        next(ret);\n      }\n      function onRejected(err) {\n        group.resume();\n        let ret;\n        try {\n          ret = genThrow(err);\n        } catch (e) {\n          group.end();\n          reject(e);\n          return;\n        }\n        group.pause();\n        next(ret);\n      }\n      function next(ret) {\n        if (ret && typeof ret.then === \"function\") {\n          ret.then(next, reject);\n        } else if (ret.done) {\n          group.end();\n          resolve(ret.value);\n        } else {\n          Promise.resolve(ret.value).then(onFulfilled, onRejected);\n        }\n      }\n      onFulfilled(void 0);\n    });\n    return promise;\n  }\n}\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.computed\n], UndoManager.prototype, \"undoQueue\", null);\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.computed\n], UndoManager.prototype, \"redoQueue\", null);\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.computed\n], UndoManager.prototype, \"undoLevels\", null);\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.computed\n], UndoManager.prototype, \"canUndo\", null);\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.action\n], UndoManager.prototype, \"clearUndo\", null);\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.computed\n], UndoManager.prototype, \"redoLevels\", null);\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.computed\n], UndoManager.prototype, \"canRedo\", null);\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.action\n], UndoManager.prototype, \"clearRedo\", null);\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.action\n], UndoManager.prototype, \"undo\", null);\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.action\n], UndoManager.prototype, \"redo\", null);\nfunction undoMiddleware(subtreeRoot, store, options) {\n  assertTweakedObject(subtreeRoot, \"subtreeRoot\");\n  let manager;\n  const patchRecorderSymbol = Symbol(\"patchRecorder\");\n  function initPatchRecorder(ctx) {\n    var _a2;\n    const group = manager.store._currentGroup;\n    const patchRecorderData = {\n      recorder: patchRecorder(subtreeRoot, {\n        recording: false,\n        filter: () => {\n          return !_isGlobalUndoRecordingDisabled && !manager.isUndoRecordingDisabled;\n        }\n      }),\n      recorderStack: 0,\n      undoRootContext: ctx,\n      group,\n      attachedStateBeforeEvent: (_a2 = options == null ? void 0 : options.attachedState) == null ? void 0 : _a2.save()\n    };\n    ctx.rootContext.data[patchRecorderSymbol] = patchRecorderData;\n  }\n  function getPatchRecorderData(ctx) {\n    return ctx.rootContext.data[patchRecorderSymbol];\n  }\n  const middlewareDisposer = actionTrackingMiddleware(subtreeRoot, {\n    onStart(ctx) {\n      if (!getPatchRecorderData(ctx)) {\n        initPatchRecorder(ctx);\n      }\n    },\n    onResume(ctx) {\n      const patchRecorderData = getPatchRecorderData(ctx);\n      patchRecorderData.recorderStack++;\n      patchRecorderData.recorder.recording = patchRecorderData.recorderStack > 0;\n    },\n    onSuspend(ctx) {\n      const patchRecorderData = getPatchRecorderData(ctx);\n      patchRecorderData.recorderStack--;\n      patchRecorderData.recorder.recording = patchRecorderData.recorderStack > 0;\n    },\n    onFinish(ctx) {\n      var _a2;\n      const patchRecorderData = getPatchRecorderData(ctx);\n      if (patchRecorderData && patchRecorderData.undoRootContext === ctx) {\n        const patchRecorder2 = patchRecorderData.recorder;\n        if (patchRecorder2.events.length > 0) {\n          const patches = [];\n          const inversePatches = [];\n          for (const event2 of patchRecorder2.events) {\n            patches.push(...event2.patches);\n            inversePatches.push(...event2.inversePatches);\n          }\n          const event = {\n            type: UndoEventType.Single,\n            targetPath: fastGetRootPath(ctx.target).path,\n            actionName: ctx.actionName,\n            patches,\n            inversePatches\n          };\n          const parentGroup = patchRecorderData.group;\n          if (parentGroup) {\n            manager.store._addUndoToParentGroup(parentGroup, event);\n          } else {\n            manager.store._addUndo({\n              event: {\n                ...event,\n                attachedState: {\n                  beforeEvent: patchRecorderData.attachedStateBeforeEvent,\n                  afterEvent: (_a2 = options == null ? void 0 : options.attachedState) == null ? void 0 : _a2.save()\n                }\n              },\n              maxUndoLevels: options == null ? void 0 : options.maxUndoLevels\n            });\n          }\n        }\n        patchRecorder2.dispose();\n      }\n    }\n  });\n  manager = new UndoManager(middlewareDisposer, subtreeRoot, store, options);\n  return manager;\n}\nlet _isGlobalUndoRecordingDisabled = false;\nfunction isGlobalUndoRecordingDisabled() {\n  return _isGlobalUndoRecordingDisabled;\n}\nfunction withoutUndo(fn) {\n  const savedUndoDisabled = _isGlobalUndoRecordingDisabled;\n  _isGlobalUndoRecordingDisabled = true;\n  try {\n    return fn();\n  } finally {\n    _isGlobalUndoRecordingDisabled = savedUndoDisabled;\n  }\n}\nfunction resolveContextValue(contextValue) {\n  if (contextValue.type === \"value\") {\n    return contextValue.value;\n  } else {\n    return contextValue.value.get();\n  }\n}\nconst createContextValueAtom = () => (0,mobx__WEBPACK_IMPORTED_MODULE_0__.createAtom)(\"contextValue\");\nclass ContextClass {\n  constructor(defaultValue) {\n    __publicField(this, \"defaultContextValue\", mobx__WEBPACK_IMPORTED_MODULE_0__.observable.box(void 0, { deep: false }));\n    __publicField(this, \"overrideContextValue\", mobx__WEBPACK_IMPORTED_MODULE_0__.observable.box(void 0, {\n      deep: false\n    }));\n    __publicField(this, \"nodeContextValue\", /* @__PURE__ */ new WeakMap());\n    __publicField(this, \"nodeAtom\", /* @__PURE__ */ new WeakMap());\n    __publicField(this, \"setDefault\", (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((value) => {\n      this.defaultContextValue.set({\n        type: \"value\",\n        value\n      });\n    }));\n    __publicField(this, \"setDefaultComputed\", (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((valueFn) => {\n      this.defaultContextValue.set({\n        type: \"computed\",\n        value: (0,mobx__WEBPACK_IMPORTED_MODULE_0__.computed)(valueFn)\n      });\n    }));\n    __publicField(this, \"set\", (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((node, value) => {\n      assertTweakedObject(node, \"node\");\n      this.nodeContextValue.set(node, {\n        type: \"value\",\n        value\n      });\n      this.getNodeAtom(node).reportChanged();\n    }));\n    __publicField(this, \"setComputed\", (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((node, valueFn) => {\n      this._setComputed(node, (0,mobx__WEBPACK_IMPORTED_MODULE_0__.computed)(valueFn));\n    }));\n    __publicField(this, \"unset\", (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((node) => {\n      assertTweakedObject(node, \"node\");\n      this.nodeContextValue.delete(node);\n      this.getNodeAtom(node).reportChanged();\n    }));\n    __publicField(this, \"apply\", (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((fn, value) => {\n      const old = this.overrideContextValue.get();\n      this.overrideContextValue.set({\n        type: \"value\",\n        value\n      });\n      try {\n        const ret = fn();\n        if (isTweakedObject(ret, true)) {\n          this.set(ret, value);\n        }\n        return ret;\n      } finally {\n        this.overrideContextValue.set(old);\n      }\n    }));\n    __publicField(this, \"applyComputed\", (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((fn, valueFn) => {\n      const computedValueFn = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.computed)(valueFn);\n      const old = this.overrideContextValue.get();\n      this.overrideContextValue.set({\n        type: \"computed\",\n        value: computedValueFn\n      });\n      try {\n        const ret = fn();\n        if (isTweakedObject(ret, true)) {\n          this._setComputed(ret, computedValueFn);\n        }\n        return ret;\n      } finally {\n        this.overrideContextValue.set(old);\n      }\n    }));\n    this.setDefault(defaultValue);\n  }\n  getNodeAtom(node) {\n    return getOrCreate(this.nodeAtom, node, createContextValueAtom);\n  }\n  fastGet(node) {\n    this.getNodeAtom(node).reportObserved();\n    const obsForNode = this.nodeContextValue.get(node);\n    if (obsForNode) {\n      return resolveContextValue(obsForNode);\n    }\n    const parent = fastGetParent(node);\n    if (!parent) {\n      const overrideValue = this.overrideContextValue.get();\n      if (overrideValue) {\n        return resolveContextValue(overrideValue);\n      }\n      return this.getDefault();\n    }\n    return this.fastGet(parent);\n  }\n  get(node) {\n    assertTweakedObject(node, \"node\");\n    return this.fastGet(node);\n  }\n  fastGetProviderNode(node) {\n    this.getNodeAtom(node).reportObserved();\n    const obsForNode = this.nodeContextValue.get(node);\n    if (obsForNode) {\n      return node;\n    }\n    const parent = fastGetParent(node);\n    if (!parent) {\n      return void 0;\n    }\n    return this.fastGetProviderNode(parent);\n  }\n  getProviderNode(node) {\n    assertTweakedObject(node, \"node\");\n    return this.fastGetProviderNode(node);\n  }\n  getDefault() {\n    return resolveContextValue(this.defaultContextValue.get());\n  }\n  _setComputed(node, computedValueFn) {\n    assertTweakedObject(node, \"node\");\n    this.nodeContextValue.set(node, { type: \"computed\", value: computedValueFn });\n    this.getNodeAtom(node).reportChanged();\n  }\n}\nfunction createContext(defaultValue) {\n  return new ContextClass(defaultValue);\n}\nconst computedTreeContext = createContext(false);\nfunction isComputedTreeNode(node) {\n  return computedTreeContext.get(node);\n}\nconst tweakedComputedTreeNodes = /* @__PURE__ */ new WeakSet();\nfunction tweakComputedTreeNode(newValue, parent, path) {\n  const tweakedValue = tweak(newValue, { parent, path });\n  if (isTreeNode(tweakedValue) && !tweakedComputedTreeNodes.has(tweakedValue)) {\n    tweakedComputedTreeNodes.add(tweakedValue);\n    readonlyMiddleware(tweakedValue);\n    computedTreeContext.set(tweakedValue, true);\n  }\n  return tweakedValue;\n}\nconst computedTreeNodeInfo = /* @__PURE__ */ new WeakMap();\nfunction getOrCreateComputedTreeNodeInfo(instance) {\n  return getOrCreate(computedTreeNodeInfo, instance, () => /* @__PURE__ */ new Map());\n}\nfunction computedTree(target, propertyKey, descriptor) {\n  if (!descriptor.get) {\n    throw failure(\"@computedTree requires a 'get' accessor\");\n  }\n  const targetClass = target.constructor;\n  if (!isModelClass(targetClass) && !isDataModelClass(targetClass)) {\n    throw failure(\"@computedTree can only decorate 'get' accessors of class or data models\");\n  }\n  const original = descriptor.get;\n  descriptor.get = function() {\n    const entry = getOrCreateComputedTreeNodeInfo(this).get(propertyKey);\n    const oldValue = entry.value;\n    const newValue = entry.computed.get();\n    if (oldValue === newValue) {\n      return entry.tweakedValue;\n    }\n    const oldTweakedValue = entry.tweakedValue;\n    tweak(oldTweakedValue, void 0);\n    const tweakedValue = tweakComputedTreeNode(newValue, this, propertyKey);\n    entry.value = newValue;\n    entry.tweakedValue = tweakedValue;\n    return tweakedValue;\n  };\n  addLateInitializationFunction(target, runBeforeOnInitSymbol, (instance) => {\n    const c = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.computed)(() => original.call(instance), { keepAlive: true });\n    const newValue = c.get();\n    const tweakedValue = tweakComputedTreeNode(newValue, instance, propertyKey);\n    getOrCreateComputedTreeNodeInfo(instance).set(propertyKey, {\n      computed: c,\n      value: newValue,\n      tweakedValue\n    });\n  });\n}\nfunction ExtendedDataModel(...args) {\n  let baseModel;\n  let modelProps;\n  if (isDataModelClass(args[0])) {\n    baseModel = args[0];\n    modelProps = args[1];\n  } else {\n    const gen = args[0]();\n    baseModel = gen.baseModel;\n    modelProps = gen.props;\n  }\n  assertIsDataModelClass(baseModel, \"baseModel\");\n  return internalDataModel(modelProps, baseModel);\n}\nfunction DataModel(fnModelPropsOrModelProps) {\n  const modelProps = typeof fnModelPropsOrModelProps === \"function\" ? fnModelPropsOrModelProps() : fnModelPropsOrModelProps;\n  return internalDataModel(modelProps, void 0);\n}\nfunction internalDataModel(modelProps, baseModel) {\n  return sharedInternalModel({\n    modelProps,\n    baseModel,\n    type: \"data\",\n    valueType: false,\n    fromSnapshotProcessor: void 0,\n    toSnapshotProcessor: void 0\n  });\n}\nfunction connectReduxDevTools(remotedevPackage, remotedevConnection, target, options) {\n  assertTweakedObject(target, \"target\");\n  const opts = {\n    logArgsNearName: true,\n    ...options\n  };\n  let handlingMonitorAction = 0;\n  remotedevConnection.subscribe((message) => {\n    if (message.type === \"DISPATCH\") {\n      handleMonitorActions(remotedevConnection, target, message);\n    }\n  });\n  const initialState = getSnapshot(target);\n  remotedevConnection.init(initialState);\n  let currentActionId = 0;\n  const actionIdSymbol = Symbol(\"actionId\");\n  actionTrackingMiddleware(target, {\n    onStart(ctx) {\n      ctx.data[actionIdSymbol] = currentActionId++;\n    },\n    onResume(ctx) {\n      if (ctx.parentContext) {\n        log(ctx.parentContext, void 0);\n      }\n      log(ctx, void 0);\n    },\n    onSuspend(ctx) {\n      log(ctx, void 0);\n    },\n    onFinish(ctx, ret) {\n      log(ctx, ret.result);\n    }\n  });\n  function handleMonitorActions(remotedev2, target2, message) {\n    try {\n      handlingMonitorAction++;\n      switch (message.payload.type) {\n        case \"RESET\":\n          applySnapshot(target2, initialState);\n          return remotedev2.init(initialState);\n        case \"COMMIT\":\n          return remotedev2.init(getSnapshot(target2));\n        case \"ROLLBACK\":\n          return remotedev2.init(remotedevPackage.extractState(message));\n        case \"JUMP_TO_STATE\":\n        case \"JUMP_TO_ACTION\":\n          applySnapshot(target2, remotedevPackage.extractState(message));\n          return;\n        case \"IMPORT_STATE\":\n          const nextLiftedState = message.payload.nextLiftedState;\n          const computedStates = nextLiftedState.computedStates;\n          applySnapshot(target2, computedStates[computedStates.length - 1].state);\n          remotedev2.send(null, nextLiftedState);\n          return;\n        default:\n      }\n    } finally {\n      handlingMonitorAction--;\n    }\n  }\n  let lastLoggedSnapshot = initialState;\n  function log(ctx, result) {\n    if (handlingMonitorAction) {\n      return;\n    }\n    const sn = getSnapshot(target);\n    if (sn === lastLoggedSnapshot && result !== ActionTrackingResult.Throw) {\n      return;\n    }\n    lastLoggedSnapshot = sn;\n    const rootPath = fastGetRootPath(ctx.target);\n    const name = getActionContextNameAndTypePath(ctx, rootPath, result);\n    const copy = {\n      type: name,\n      path: rootPath.path,\n      args: ctx.args\n    };\n    remotedevConnection.send(copy, sn);\n  }\n  function getActionContextNameAndTypePath(ctx, rootPath, result) {\n    const pathStr = \"[/\" + rootPath.path.join(\"/\") + \"] \";\n    let name = pathStr + ctx.actionName;\n    if (opts.logArgsNearName) {\n      let args = ctx.args.map((a) => {\n        try {\n          return JSON.stringify(a);\n        } catch {\n          return \"**unserializable**\";\n        }\n      }).join(\", \");\n      if (args.length > 64) {\n        args = args.slice(0, 64) + \"...\";\n      }\n      name += `(${args})`;\n    }\n    const actionId = ctx.data[actionIdSymbol];\n    name += ` (id ${actionId !== void 0 ? actionId : \"?\"}`;\n    if (ctx.type === ActionContextActionType.Async) {\n      name += \", async\";\n    }\n    name += \")\";\n    if (result === ActionTrackingResult.Throw) {\n      name += \" -error thrown-\";\n    }\n    if (ctx.parentContext) {\n      const parentName = getActionContextNameAndTypePath(ctx.parentContext, fastGetRootPath(ctx.parentContext.target), void 0);\n      if (parentName) {\n        name = `${parentName} >>> ${name}`;\n      }\n    }\n    return name;\n  }\n}\nconst reduxActionType = \"applyAction\";\nfunction actionCallToReduxAction(actionCall) {\n  return {\n    type: reduxActionType,\n    payload: actionCall\n  };\n}\nfunction asReduxStore(target, ...middlewares) {\n  assertTweakedObject(target, \"target\");\n  const defaultDispatch = (action2) => {\n    if (action2.type !== reduxActionType) {\n      throw failure(`action type was expected to be '${reduxActionType}', but it was '${action2.type}'`);\n    }\n    applyAction(target, action2.payload);\n    return action2;\n  };\n  let store = {\n    getState() {\n      return getSnapshot(target);\n    },\n    dispatch(action2) {\n      return runMiddlewares(action2, runners, defaultDispatch);\n    },\n    subscribe(listener) {\n      return onSnapshot(target, listener);\n    }\n  };\n  const runners = middlewares.map((mw) => mw(store));\n  return store;\n}\nfunction runMiddlewares(initialAction, runners, next) {\n  let i = 0;\n  function runNextMiddleware(action2) {\n    const runner = runners[i];\n    i++;\n    if (runner) {\n      return runner(runNextMiddleware)(action2);\n    } else {\n      return next(action2);\n    }\n  }\n  return runNextMiddleware(initialAction);\n}\nclass Ref extends Model({\n  /**\n   * Reference id.\n   */\n  id: tProp(typesString)\n}) {\n  /**\n   * The object this reference points to, or `undefined` if the reference is currently invalid.\n   */\n  get maybeCurrent() {\n    return this.resolve();\n  }\n  /**\n   * If the reference is currently valid.\n   */\n  get isValid() {\n    return !!this.maybeCurrent;\n  }\n  /**\n   * The object this reference points to, or throws if invalid.\n   */\n  get current() {\n    const current = this.maybeCurrent;\n    if (!current) {\n      throw failure(`a reference of type '${this[modelTypeKey]}' could not resolve an object with id '${this.id}'`);\n    }\n    return current;\n  }\n}\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.computed\n], Ref.prototype, \"maybeCurrent\", null);\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.computed\n], Ref.prototype, \"isValid\", null);\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.computed\n], Ref.prototype, \"current\", null);\nfunction isRefOfType(ref, refType) {\n  return ref instanceof refType.refClass;\n}\nconst objectBackRefs = /* @__PURE__ */ new WeakMap();\nfunction internalCustomRef(modelTypeId, resolverGen, getId, onResolvedValueChange) {\n  let CustomRef = class CustomRef extends Ref {\n    constructor() {\n      super(...arguments);\n      __publicField(this, \"resolver\");\n      __publicField(this, \"savedOldTarget\");\n    }\n    resolve() {\n      if (!this.resolver) {\n        this.resolver = resolverGen(this);\n      }\n      return this.resolver(this);\n    }\n    internalForceUpdateBackRefs(newTarget) {\n      const oldTarget = this.savedOldTarget;\n      this.savedOldTarget = newTarget;\n      updateBackRefs(this, thisRefConstructor, newTarget, oldTarget);\n    }\n    forceUpdateBackRefs() {\n      this.internalForceUpdateBackRefs(this.maybeCurrent);\n    }\n    onInit() {\n      let savedOldTarget;\n      let savedFirstTime = true;\n      (0,mobx__WEBPACK_IMPORTED_MODULE_0__.reaction)(() => this.maybeCurrent, (newTarget) => {\n        this.internalForceUpdateBackRefs(newTarget);\n        const oldTarget = savedOldTarget;\n        const firstTime = savedFirstTime;\n        savedOldTarget = newTarget;\n        savedFirstTime = false;\n        if (!firstTime && onResolvedValueChange && newTarget !== oldTarget) {\n          onResolvedValueChange(this, newTarget, oldTarget);\n        }\n      }, { fireImmediately: true });\n    }\n  };\n  __decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_0__.action\n  ], CustomRef.prototype, \"forceUpdateBackRefs\", null);\n  CustomRef = __decorate([\n    model(modelTypeId)\n  ], CustomRef);\n  const fn = (target) => {\n    let id;\n    if (typeof target === \"string\") {\n      id = target;\n    } else {\n      assertIsObject(target, \"target\");\n      id = getId(target);\n    }\n    if (typeof id !== \"string\") {\n      throw failure(\"ref target object must have an id of string type\");\n    }\n    const ref = new CustomRef({\n      id\n    });\n    return ref;\n  };\n  fn.refClass = CustomRef;\n  const thisRefConstructor = fn;\n  return thisRefConstructor;\n}\nfunction getModelRefId(target) {\n  if (isModel(target) && target.getRefId) {\n    const id = target.getRefId();\n    if (id !== void 0 && typeof id !== \"string\") {\n      throw failure(\"'getRefId()' must return a string or undefined when present\");\n    }\n    return id;\n  }\n  return void 0;\n}\nconst computedIdTrees = /* @__PURE__ */ new WeakMap();\nfunction resolveId(root, id, getId = getModelRefId) {\n  const computedIdTree = getOrCreate(computedIdTrees, getId, () => computedWalkTreeAggregate((node) => getId(node)));\n  const idMap = computedIdTree.walk(root);\n  return idMap ? idMap.get(id) : void 0;\n}\nfunction getBackRefs(target, refType) {\n  let backRefs = objectBackRefs.get(target);\n  if (!backRefs) {\n    backRefs = {\n      all: mobx__WEBPACK_IMPORTED_MODULE_0__.observable.set(void 0, { deep: false }),\n      byType: /* @__PURE__ */ new WeakMap()\n    };\n    objectBackRefs.set(target, backRefs);\n  }\n  if (!refType) {\n    return backRefs.all;\n  } else {\n    let byType = backRefs.byType.get(refType);\n    if (!byType) {\n      byType = mobx__WEBPACK_IMPORTED_MODULE_0__.observable.set(void 0, { deep: false });\n      backRefs.byType.set(refType, byType);\n    }\n    return byType;\n  }\n}\nfunction getRefsResolvingTo(target, refType, options) {\n  assertTweakedObject(target, \"target\");\n  if ((options == null ? void 0 : options.updateAllRefsIfNeeded) && isReactionDelayed()) {\n    const refsChecked = /* @__PURE__ */ new Set();\n    const updateRef = (ref) => {\n      if (!refsChecked.has(ref)) {\n        if (!refType || ref instanceof refType.refClass) {\n          ref.forceUpdateBackRefs();\n        }\n        refsChecked.add(ref);\n      }\n    };\n    const oldBackRefs = getBackRefs(target, refType);\n    oldBackRefs.forEach(updateRef);\n    const refsChildrenOfRoot = getDeepChildrenRefs(getDeepObjectChildren(fastGetRoot(target)));\n    let refs;\n    if (refType) {\n      refs = refsChildrenOfRoot.byType.get(refType.refClass);\n    } else {\n      refs = refsChildrenOfRoot.all;\n    }\n    refs == null ? void 0 : refs.forEach(updateRef);\n  }\n  return getBackRefs(target, refType);\n}\nconst updateBackRefs = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(\"updateBackRefs\", (ref, refClass, newTarget, oldTarget) => {\n  if (newTarget === oldTarget) {\n    return;\n  }\n  if (oldTarget) {\n    getBackRefs(oldTarget).delete(ref);\n    getBackRefs(oldTarget, refClass).delete(ref);\n  }\n  if (newTarget) {\n    getBackRefs(newTarget).add(ref);\n    getBackRefs(newTarget, refClass).add(ref);\n  }\n});\nfunction isReactionDelayed() {\n  let reactionDelayed = true;\n  const dispose = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.when)(() => true, () => {\n    reactionDelayed = false;\n  });\n  dispose();\n  return reactionDelayed;\n}\nconst getDeepChildrenRefs = registerDeepObjectChildrenExtension({\n  initData() {\n    return {\n      all: /* @__PURE__ */ new Set(),\n      byType: /* @__PURE__ */ new WeakMap()\n    };\n  },\n  addNode(node, data) {\n    if (node instanceof Ref) {\n      data.all.add(node);\n      const refsByThisType = getOrCreate(data.byType, node.constructor, () => /* @__PURE__ */ new Set());\n      refsByThisType.add(node);\n    }\n  }\n});\nconst customRef = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(\"customRef\", (modelTypeId, options) => {\n  var _a2;\n  const getId = (_a2 = options.getId) != null ? _a2 : getModelRefId;\n  return internalCustomRef(modelTypeId, () => options.resolve, getId, options.onResolvedValueChange);\n});\nconst rootRef = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(\"rootRef\", (modelTypeId, options) => {\n  var _a2;\n  const getId = (_a2 = options == null ? void 0 : options.getId) != null ? _a2 : getModelRefId;\n  const onResolvedValueChange = options == null ? void 0 : options.onResolvedValueChange;\n  const resolverGen = (ref) => {\n    let cachedTarget;\n    return () => {\n      const refRoot = fastGetRoot(ref);\n      if (isRefRootCachedTargetOk(ref, refRoot, cachedTarget, getId)) {\n        return cachedTarget;\n      }\n      const newTarget = resolveId(refRoot, ref.id, getId);\n      if (newTarget) {\n        cachedTarget = newTarget;\n      }\n      return newTarget;\n    };\n  };\n  return internalCustomRef(modelTypeId, resolverGen, getId, onResolvedValueChange);\n});\nfunction isRefRootCachedTargetOk(ref, refRoot, cachedTarget, getId) {\n  if (!cachedTarget)\n    return false;\n  if (ref.id !== getId(cachedTarget))\n    return false;\n  if (refRoot !== fastGetRoot(cachedTarget))\n    return false;\n  return true;\n}\nfunction standaloneAction(actionName, fn) {\n  return addStandaloneAction(actionName, fn, false);\n}\nfunction standaloneFlow(actionName, fn) {\n  return addStandaloneAction(actionName, fn, true);\n}\nfunction _splice(array, ...args) {\n  return array.splice(...args);\n}\nconst namespace$1 = `${namespace$2}/arrayActions`;\nconst arrayActions = {\n  set: standaloneAction(`${namespace$1}::set`, (array, index, value) => {\n    setIfDifferent(array, index, value);\n  }),\n  delete: standaloneAction(`${namespace$1}::delete`, (array, index) => {\n    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.remove)(array, \"\" + index);\n  }),\n  setLength: standaloneAction(`${namespace$1}::setLength`, (array, length) => {\n    array.length = length;\n  }),\n  concat: standaloneAction(`${namespace$1}::concat`, (array, ...items) => {\n    return array.concat(...items);\n  }),\n  copyWithin: standaloneAction(`${namespace$1}::copyWithin`, (array, target, start, end) => {\n    return array.copyWithin(target, start, end);\n  }),\n  fill: standaloneAction(`${namespace$1}::fill`, (array, value, start, end) => {\n    return array.fill(value, start, end);\n  }),\n  pop: standaloneAction(`${namespace$1}::pop`, (array) => {\n    return array.pop();\n  }),\n  push: standaloneAction(`${namespace$1}::push`, (array, ...items) => {\n    return array.push(...items);\n  }),\n  reverse: standaloneAction(`${namespace$1}::reverse`, (array) => {\n    return array.reverse();\n  }),\n  shift: standaloneAction(`${namespace$1}::shift`, (array) => {\n    return array.shift();\n  }),\n  slice: standaloneAction(`${namespace$1}::slice`, (array, start, end) => {\n    return array.slice(start, end);\n  }),\n  sort: standaloneAction(`${namespace$1}::sort`, (array, compareFn) => {\n    return array.sort(compareFn);\n  }),\n  splice: standaloneAction(`${namespace$1}::splice`, _splice),\n  unshift: standaloneAction(`${namespace$1}::unshift`, (array, ...items) => {\n    return array.unshift(...items);\n  }),\n  swap: standaloneAction(`${namespace$1}::swap`, (array, index1, index2) => {\n    if (index1 < 0 || index2 < 0 || index1 >= array.length || index2 >= array.length) {\n      return false;\n    }\n    if (index2 < index1) {\n      [index1, index2] = [index2, index1];\n    }\n    const [v1] = array.splice(index1, 1);\n    const [v2] = array.splice(index2 - 1, 1);\n    array.splice(index1, 0, v2);\n    array.splice(index2, 0, v1);\n    return true;\n  }),\n  create: (data) => toTreeNode(data)\n};\nconst namespace = `${namespace$2}/objectActions`;\nconst objectActions = {\n  set: standaloneAction(`${namespace}::set`, (target, key, value) => {\n    if ((0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservable)(target)) {\n      setIfDifferent(target, key, value);\n    } else {\n      target[key] = value;\n    }\n  }),\n  assign: standaloneAction(`${namespace}::assign`, (target, partialObject) => {\n    assertIsObject(partialObject, \"partialObject\");\n    const keys2 = Object.keys(partialObject);\n    if ((0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservable)(target)) {\n      for (const key of keys2) {\n        const newValue = partialObject[key];\n        setIfDifferent(target, key, newValue);\n      }\n    } else {\n      for (const key of keys2) {\n        target[key] = partialObject[key];\n      }\n    }\n  }),\n  delete: standaloneAction(`${namespace}::delete`, (target, key) => {\n    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.remove)(target, key);\n  }),\n  call: standaloneAction(`${namespace}::call`, (target, methodName, ...args) => {\n    return target[methodName](...args);\n  }),\n  create: (data) => toTreeNode(data)\n};\nfunction tag(tagDataConstructor) {\n  const map = /* @__PURE__ */ new WeakMap();\n  return {\n    for(target) {\n      if (!map.has(target)) {\n        const data = tagDataConstructor(target);\n        map.set(target, data);\n        return data;\n      } else {\n        return map.get(target);\n      }\n    }\n  };\n}\nconst observableMapBackedByObservableObject = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((obj) => {\n  if (inDevMode) {\n    if (!(0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableObject)(obj)) {\n      throw failure(\"assertion failed: expected an observable object\");\n    }\n  }\n  const map = mobx__WEBPACK_IMPORTED_MODULE_0__.observable.map();\n  map.dataObject = obj;\n  const keys2 = Object.keys(obj);\n  for (let i = 0; i < keys2.length; i++) {\n    const k = keys2[i];\n    map.set(k, obj[k]);\n  }\n  let mapAlreadyChanged = false;\n  let objectAlreadyChanged = false;\n  (0,mobx__WEBPACK_IMPORTED_MODULE_0__.observe)(obj, (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((change) => {\n    if (mapAlreadyChanged) {\n      return;\n    }\n    objectAlreadyChanged = true;\n    try {\n      switch (change.type) {\n        case \"add\":\n        case \"update\": {\n          map.set(change.name, change.newValue);\n          break;\n        }\n        case \"remove\": {\n          map.delete(change.name);\n          break;\n        }\n      }\n    } finally {\n      objectAlreadyChanged = false;\n    }\n  }));\n  (0,mobx__WEBPACK_IMPORTED_MODULE_0__.intercept)(map, (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((change) => {\n    if (mapAlreadyChanged) {\n      return null;\n    }\n    if (objectAlreadyChanged) {\n      return change;\n    }\n    mapAlreadyChanged = true;\n    try {\n      switch (change.type) {\n        case \"add\":\n        case \"update\": {\n          setIfDifferent(obj, change.name, change.newValue);\n          break;\n        }\n        case \"delete\": {\n          (0,mobx__WEBPACK_IMPORTED_MODULE_0__.remove)(obj, change.name);\n          break;\n        }\n      }\n      return change;\n    } finally {\n      mapAlreadyChanged = false;\n    }\n  }));\n  return map;\n});\nconst observableMapBackedByObservableArray = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((array) => {\n  if (inDevMode) {\n    if (!(0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableArray)(array)) {\n      throw failure(\"assertion failed: expected an observable array\");\n    }\n  }\n  let map;\n  if (getMobxVersion() >= 6) {\n    map = mobx__WEBPACK_IMPORTED_MODULE_0__.observable.map(array);\n  } else {\n    map = mobx__WEBPACK_IMPORTED_MODULE_0__.observable.map();\n    array.forEach(([k, v]) => {\n      map.set(k, v);\n    });\n  }\n  map.dataObject = array;\n  if (map.size !== array.length) {\n    throw failure(\"arrays backing a map cannot contain duplicate keys\");\n  }\n  let mapAlreadyChanged = false;\n  let arrayAlreadyChanged = false;\n  (0,mobx__WEBPACK_IMPORTED_MODULE_0__.observe)(array, (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((change) => {\n    if (mapAlreadyChanged) {\n      return;\n    }\n    arrayAlreadyChanged = true;\n    try {\n      switch (change.type) {\n        case \"splice\": {\n          {\n            const removed = change.removed;\n            for (let i = 0; i < removed.length; i++) {\n              map.delete(removed[i][0]);\n            }\n          }\n          {\n            const added = change.added;\n            for (let i = 0; i < added.length; i++) {\n              map.set(added[i][0], added[i][1]);\n            }\n          }\n          break;\n        }\n        case \"update\": {\n          map.delete(change.oldValue[0]);\n          map.set(change.newValue[0], change.newValue[1]);\n          break;\n        }\n      }\n    } finally {\n      arrayAlreadyChanged = false;\n    }\n  }));\n  (0,mobx__WEBPACK_IMPORTED_MODULE_0__.intercept)(map, (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((change) => {\n    if (mapAlreadyChanged) {\n      return null;\n    }\n    if (arrayAlreadyChanged) {\n      return change;\n    }\n    mapAlreadyChanged = true;\n    try {\n      switch (change.type) {\n        case \"update\": {\n          const i = array.findIndex((i2) => i2[0] === change.name);\n          array[i] = [change.name, change.newValue];\n          break;\n        }\n        case \"add\": {\n          array.push([change.name, change.newValue]);\n          break;\n        }\n        case \"delete\": {\n          const i = array.findIndex((i2) => i2[0] === change.name);\n          if (i >= 0) {\n            array.splice(i, 1);\n          }\n          break;\n        }\n      }\n      return change;\n    } finally {\n      mapAlreadyChanged = false;\n    }\n  }));\n  return map;\n});\nconst asMapTag = tag((objOrArray) => {\n  if (isArray(objOrArray)) {\n    assertIsObservableArray(objOrArray, \"objOrArray\");\n    return observableMapBackedByObservableArray(objOrArray);\n  } else {\n    assertIsObservableObject(objOrArray, \"objOrArray\");\n    return observableMapBackedByObservableObject(objOrArray);\n  }\n});\nfunction asMap(objOrArray) {\n  return asMapTag.for(objOrArray);\n}\nfunction mapToObject(map) {\n  assertIsMap(map, \"map\");\n  const dataObject = map.dataObject;\n  if (dataObject && !isArray(dataObject)) {\n    return dataObject;\n  }\n  const obj = {};\n  for (const k of map.keys()) {\n    obj[k] = map.get(k);\n  }\n  return obj;\n}\nfunction mapToArray(map) {\n  assertIsMap(map, \"map\");\n  const dataObject = map.dataObject;\n  if (dataObject && isArray(dataObject)) {\n    return dataObject;\n  }\n  const arr = [];\n  for (const k of map.keys()) {\n    arr.push([k, map.get(k)]);\n  }\n  return arr;\n}\nconst _objectToMapTransform = {\n  transform({ originalValue: obj, cachedTransformedValue: cachedMap }) {\n    return cachedMap != null ? cachedMap : asMap(obj);\n  },\n  untransform({ transformedValue: map }) {\n    const obj = {};\n    for (const k of map.keys()) {\n      obj[k] = map.get(k);\n    }\n    return obj;\n  }\n};\nconst objectToMapTransform = () => _objectToMapTransform;\nconst _arrayToMapTransform = {\n  transform({ originalValue: arr, cachedTransformedValue: cachedMap }) {\n    return cachedMap != null ? cachedMap : asMap(arr);\n  },\n  untransform({ transformedValue: map }) {\n    const arr = [];\n    for (const k of map.keys()) {\n      arr.push([k, map.get(k)]);\n    }\n    return arr;\n  }\n};\nconst arrayToMapTransform = () => _arrayToMapTransform;\nconst observableSetBackedByObservableArray = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((array) => {\n  if (inDevMode) {\n    if (!(0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableArray)(array)) {\n      throw failure(\"assertion failed: expected an observable array\");\n    }\n  }\n  let set2;\n  if (getMobxVersion() >= 6) {\n    set2 = mobx__WEBPACK_IMPORTED_MODULE_0__.observable.set(array);\n  } else {\n    set2 = mobx__WEBPACK_IMPORTED_MODULE_0__.observable.set();\n    array.forEach((item) => {\n      set2.add(item);\n    });\n  }\n  set2.dataObject = array;\n  if (set2.size !== array.length) {\n    throw failure(\"arrays backing a set cannot contain duplicate values\");\n  }\n  let setAlreadyChanged = false;\n  let arrayAlreadyChanged = false;\n  (0,mobx__WEBPACK_IMPORTED_MODULE_0__.observe)(array, (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((change) => {\n    if (setAlreadyChanged) {\n      return;\n    }\n    arrayAlreadyChanged = true;\n    try {\n      switch (change.type) {\n        case \"splice\": {\n          {\n            const removed = change.removed;\n            for (let i = 0; i < removed.length; i++) {\n              set2.delete(removed[i]);\n            }\n          }\n          {\n            const added = change.added;\n            for (let i = 0; i < added.length; i++) {\n              set2.add(added[i]);\n            }\n          }\n          break;\n        }\n        case \"update\": {\n          set2.delete(change.oldValue);\n          set2.add(change.newValue);\n          break;\n        }\n      }\n    } finally {\n      arrayAlreadyChanged = false;\n    }\n  }));\n  (0,mobx__WEBPACK_IMPORTED_MODULE_0__.intercept)(set2, (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)((change) => {\n    if (setAlreadyChanged) {\n      return null;\n    }\n    if (arrayAlreadyChanged) {\n      return change;\n    }\n    setAlreadyChanged = true;\n    try {\n      switch (change.type) {\n        case \"add\": {\n          array.push(change.newValue);\n          break;\n        }\n        case \"delete\": {\n          const i = array.indexOf(change.oldValue);\n          if (i >= 0) {\n            array.splice(i, 1);\n          }\n          break;\n        }\n      }\n      return change;\n    } finally {\n      setAlreadyChanged = false;\n    }\n  }));\n  return set2;\n});\nconst asSetTag = tag((array) => {\n  assertIsObservableArray(array, \"array\");\n  return observableSetBackedByObservableArray(array);\n});\nfunction asSet(array) {\n  return asSetTag.for(array);\n}\nfunction setToArray(set2) {\n  assertIsSet(set2, \"set\");\n  const dataObject = set2.dataObject;\n  if (dataObject) {\n    return dataObject;\n  }\n  return Array.from(set2.values());\n}\nconst _arrayToSetTransform = {\n  transform({ originalValue: arr, cachedTransformedValue: cachedSet }) {\n    return cachedSet != null ? cachedSet : asSet(arr);\n  },\n  untransform({ transformedValue: set2 }) {\n    return Array.from(set2.values());\n  }\n};\nconst arrayToSetTransform = () => _arrayToSetTransform;\nconst _stringToBigIntTransform = {\n  transform({ originalValue, cachedTransformedValue }) {\n    return cachedTransformedValue != null ? cachedTransformedValue : BigInt(originalValue);\n  },\n  untransform({ transformedValue, cacheTransformedValue }) {\n    if (typeof transformedValue === \"bigint\") {\n      cacheTransformedValue();\n    }\n    return transformedValue.toString();\n  }\n};\nconst stringToBigIntTransform = () => _stringToBigIntTransform;\nconst errMessage = \"this Date object is immutable\";\nclass ImmutableDate extends Date {\n  // disable mutable methods\n  setTime() {\n    throw failure(errMessage);\n  }\n  setMilliseconds() {\n    throw failure(errMessage);\n  }\n  setUTCMilliseconds() {\n    throw failure(errMessage);\n  }\n  setSeconds() {\n    throw failure(errMessage);\n  }\n  setUTCSeconds() {\n    throw failure(errMessage);\n  }\n  setMinutes() {\n    throw failure(errMessage);\n  }\n  setUTCMinutes() {\n    throw failure(errMessage);\n  }\n  setHours() {\n    throw failure(errMessage);\n  }\n  setUTCHours() {\n    throw failure(errMessage);\n  }\n  setDate() {\n    throw failure(errMessage);\n  }\n  setUTCDate() {\n    throw failure(errMessage);\n  }\n  setMonth() {\n    throw failure(errMessage);\n  }\n  setUTCMonth() {\n    throw failure(errMessage);\n  }\n  setFullYear() {\n    throw failure(errMessage);\n  }\n  setUTCFullYear() {\n    throw failure(errMessage);\n  }\n}\nconst _timestampToDateTransform = {\n  transform({ originalValue, cachedTransformedValue }) {\n    return cachedTransformedValue != null ? cachedTransformedValue : new ImmutableDate(originalValue);\n  },\n  untransform({ transformedValue, cacheTransformedValue }) {\n    if (transformedValue instanceof ImmutableDate) {\n      cacheTransformedValue();\n    }\n    return +transformedValue;\n  }\n};\nconst timestampToDateTransform = () => _timestampToDateTransform;\nconst _isoStringToDateTransform = {\n  transform({ originalValue, cachedTransformedValue }) {\n    return cachedTransformedValue != null ? cachedTransformedValue : new ImmutableDate(originalValue);\n  },\n  untransform({ transformedValue, cacheTransformedValue }) {\n    if (transformedValue instanceof ImmutableDate) {\n      cacheTransformedValue();\n    }\n    return transformedValue.toISOString();\n  }\n};\nconst isoStringToDateTransform = () => _isoStringToDateTransform;\nclass Draft {\n  /**\n   * Creates an instance of Draft.\n   * Do not use directly, use `draft` instead.\n   *\n   * @param original\n   */\n  constructor(original) {\n    /**\n     * Draft data object.\n     */\n    __publicField(this, \"data\");\n    /**\n     * Original data object.\n     */\n    __publicField(this, \"originalData\");\n    assertTweakedObject(original, \"original\");\n    this.originalData = original;\n    this.data = fromSnapshot(this.originalSnapshot, { generateNewIds: false });\n  }\n  /**\n   * Commits current draft changes to the original object.\n   */\n  commit() {\n    applySnapshot(this.originalData, getSnapshot(this.data));\n  }\n  /**\n   * Partially commits current draft changes to the original object.\n   * If the path cannot be resolved in either the draft or the original object it will throw.\n   * Note that model IDs are checked to be the same when resolving the paths.\n   *\n   * @param path Path to commit.\n   */\n  commitByPath(path) {\n    const draftTarget = resolvePath(this.data, path);\n    if (!draftTarget.resolved) {\n      throw failure(`path ${JSON.stringify(path)} could not be resolved in draft object`);\n    }\n    const draftPathIds = pathToTargetPathIdsIgnoringLast(this.data, path);\n    const originalTarget = resolvePathCheckingIds(this.originalData, path, draftPathIds);\n    if (!originalTarget.resolved) {\n      throw failure(`path ${JSON.stringify(path)} could not be resolved in original object`);\n    }\n    applyPatches(this.originalData, [\n      {\n        path,\n        op: \"replace\",\n        value: getSnapshot(draftTarget.value)\n      }\n    ]);\n  }\n  /**\n   * Resets the draft to be an exact copy of the current state of the original object.\n   */\n  reset() {\n    applySnapshot(this.data, this.originalSnapshot);\n  }\n  /**\n   * Partially resets current draft changes to be the same as the original object.\n   * If the path cannot be resolved in either the draft or the original object it will throw.\n   * Note that model IDs are checked to be the same when resolving the paths.\n   *\n   * @param path Path to reset.\n   */\n  resetByPath(path) {\n    const originalTarget = resolvePath(this.originalData, path);\n    if (!originalTarget.resolved) {\n      throw failure(`path ${JSON.stringify(path)} could not be resolved in original object`);\n    }\n    const originalPathIds = pathToTargetPathIdsIgnoringLast(this.originalData, path);\n    const draftTarget = resolvePathCheckingIds(this.data, path, originalPathIds);\n    if (!draftTarget.resolved) {\n      throw failure(`path ${JSON.stringify(path)} could not be resolved in draft object`);\n    }\n    applyPatches(this.data, [\n      {\n        path,\n        op: \"replace\",\n        value: getSnapshot(originalTarget.value)\n      }\n    ]);\n  }\n  /**\n   * Returns `true` if the draft has changed compared to the original object, `false` otherwise.\n   */\n  get isDirty() {\n    return !deepEquals(getSnapshot(this.data), this.originalSnapshot);\n  }\n  /**\n   * Returns `true` if the value at the given path of the draft has changed compared to the original object.\n   * If the path cannot be resolved in the draft it will throw.\n   * If the path cannot be resolved in the original object it will return `true`.\n   * Note that model IDs are checked to be the same when resolving the paths.\n   *\n   * @param path Path to check.\n   */\n  isDirtyByPath(path) {\n    const draftTarget = resolvePath(this.data, path);\n    if (!draftTarget.resolved) {\n      throw failure(`path ${JSON.stringify(path)} could not be resolved in draft object`);\n    }\n    const draftPathIds = pathToTargetPathIdsIgnoringLast(this.data, path);\n    const originalTarget = resolvePathCheckingIds(this.originalData, path, draftPathIds);\n    if (!originalTarget.resolved) {\n      return true;\n    }\n    return !deepEquals(draftTarget.value, originalTarget.value);\n  }\n  get originalSnapshot() {\n    return getSnapshot(this.originalData);\n  }\n}\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.action\n], Draft.prototype, \"commit\", null);\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.action\n], Draft.prototype, \"commitByPath\", null);\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.action\n], Draft.prototype, \"reset\", null);\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.action\n], Draft.prototype, \"resetByPath\", null);\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.computed\n], Draft.prototype, \"isDirty\", null);\n__decorate([\n  mobx__WEBPACK_IMPORTED_MODULE_0__.computed\n], Draft.prototype, \"originalSnapshot\", null);\nfunction draft(original) {\n  return new Draft(original);\n}\nfunction pathToTargetPathIdsIgnoringLast(root, path) {\n  const pathIds = pathToTargetPathIds(root, path);\n  if (pathIds.length >= 1) {\n    pathIds[pathIds.length - 1] = skipIdChecking;\n  }\n  return pathIds;\n}\nconst sandboxManagerContext = createContext();\nfunction getNodeSandboxManager(node) {\n  return sandboxManagerContext.get(node);\n}\nfunction isSandboxedNode(node) {\n  return !!getNodeSandboxManager(node);\n}\nclass SandboxManager {\n  /**\n   * Creates an instance of `SandboxManager`.\n   * Do not use directly, use `sandbox` instead.\n   *\n   * @param subtreeRoot Subtree root target object.\n   */\n  constructor(subtreeRoot) {\n    __publicField(this, \"subtreeRoot\");\n    /**\n     * The sandbox copy of the original subtree.\n     */\n    __publicField(this, \"subtreeRootClone\");\n    /**\n     * The internal disposer.\n     */\n    __publicField(this, \"disposer\");\n    /**\n     * The internal `withSandbox` patch recorder. If `undefined`, no `withSandbox` call is being\n     * executed.\n     */\n    __publicField(this, \"withSandboxPatchRecorder\");\n    /**\n     * Function from `readonlyMiddleware` that will allow actions to be started inside the provided\n     * code block on a readonly node.\n     */\n    __publicField(this, \"allowWrite\");\n    /**\n     * Whether changes made in the sandbox are currently being committed to the original subtree.\n     */\n    __publicField(this, \"isCommitting\", false);\n    this.subtreeRoot = subtreeRoot;\n    assertTweakedObject(subtreeRoot, \"subtreeRoot\");\n    let previousContextDefault = sandboxManagerContext.getDefault();\n    sandboxManagerContext.setDefault(this);\n    try {\n      this.subtreeRootClone = clone(subtreeRoot, { generateNewIds: false });\n      sandboxManagerContext.set(this.subtreeRootClone, this);\n    } catch (err) {\n      throw err;\n    } finally {\n      sandboxManagerContext.setDefault(previousContextDefault);\n    }\n    let wasRS = false;\n    const disposeReactionRS = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.reaction)(() => fastIsRootStore(subtreeRoot), (isRS) => {\n      if (isRS !== wasRS) {\n        wasRS = isRS;\n        if (isRS) {\n          registerRootStore(this.subtreeRootClone);\n        } else {\n          unregisterRootStore(this.subtreeRootClone);\n        }\n      }\n    }, { fireImmediately: true });\n    const disposeOnPatches = onPatches(subtreeRoot, (patches) => {\n      if (this.withSandboxPatchRecorder) {\n        throw failure(\"original subtree must not change while 'withSandbox' executes\");\n      }\n      if (!this.isCommitting) {\n        this.allowWrite(() => {\n          applyPatches(this.subtreeRootClone, patches);\n        });\n      }\n    });\n    const { allowWrite, dispose: disposeReadonlyMW } = readonlyMiddleware(this.subtreeRootClone);\n    this.allowWrite = allowWrite;\n    this.disposer = () => {\n      disposeReactionRS();\n      disposeOnPatches();\n      disposeReadonlyMW();\n      if (fastIsRootStore(this.subtreeRootClone)) {\n        unregisterRootStore(this.subtreeRootClone);\n      }\n      this.disposer = () => {\n      };\n    };\n  }\n  /**\n   * Executes `fn` with sandbox copies of the elements of `nodes`. The changes made to the sandbox\n   * in `fn` can be accepted, i.e. applied to the original subtree, or rejected.\n   *\n   * @typeparam T Object type.\n   * @typeparam R Return type.\n   * @param nodes Tuple of objects for which to obtain sandbox copies.\n   * @param fn Function that is called with sandbox copies of the elements of `nodes`. Any changes\n   * made to the sandbox are applied to the original subtree when `fn` returns `true` or\n   * `{ commit: true, ... }`. When `fn` returns `false` or `{ commit: false, ... }` the changes made\n   * to the sandbox are rejected.\n   * @returns Value of type `R` when `fn` returns an object of type `{ commit: boolean; return: R }`\n   * or `void` when `fn` returns a boolean.\n   */\n  withSandbox(nodes, fn) {\n    for (let i = 0; i < nodes.length; i++) {\n      assertTweakedObject(nodes[i], `nodes[${i}]`);\n    }\n    assertIsFunction(fn, \"fn\");\n    const { sandboxNodes, applyRecorderChanges } = this.prepareSandboxChanges(nodes);\n    let commit = false;\n    try {\n      const returnValue = this.allowWrite(() => fn(...sandboxNodes));\n      if (typeof returnValue === \"boolean\") {\n        commit = returnValue;\n        return void 0;\n      } else {\n        commit = returnValue.commit;\n        return returnValue.return;\n      }\n    } finally {\n      applyRecorderChanges(commit);\n    }\n  }\n  /**\n   * Disposes of the sandbox.\n   */\n  dispose() {\n    this.disposer();\n  }\n  prepareSandboxChanges(nodes) {\n    const isNestedWithSandboxCall = !!this.withSandboxPatchRecorder;\n    const sandboxNodes = nodes.map((node) => {\n      const path = getParentToChildPath(isNestedWithSandboxCall ? this.subtreeRootClone : this.subtreeRoot, node);\n      if (!path) {\n        throw failure(`node is not a child of subtreeRoot${isNestedWithSandboxCall ? \"Clone\" : \"\"}`);\n      }\n      const sandboxNode = resolvePath(this.subtreeRootClone, path).value;\n      if (!sandboxNode) {\n        throw failure(\"path could not be resolved - sandbox may be out of sync with original tree\");\n      }\n      return sandboxNode;\n    });\n    if (!this.withSandboxPatchRecorder) {\n      this.withSandboxPatchRecorder = patchRecorder(this.subtreeRootClone);\n    }\n    const recorder = this.withSandboxPatchRecorder;\n    const numRecorderEvents = recorder.events.length;\n    const applyRecorderChanges = (commit) => {\n      if (!isNestedWithSandboxCall) {\n        recorder.dispose();\n        this.withSandboxPatchRecorder = void 0;\n      }\n      if (commit) {\n        if (!isNestedWithSandboxCall) {\n          const patches = [];\n          const len = recorder.events.length;\n          for (let i = 0; i < len; i++) {\n            patches.push(...recorder.events[i].patches);\n          }\n          const isCommitting = this.isCommitting;\n          this.isCommitting = true;\n          try {\n            applyPatches(this.subtreeRoot, patches);\n          } finally {\n            this.isCommitting = isCommitting;\n          }\n        }\n      } else {\n        this.allowWrite(() => {\n          (0,mobx__WEBPACK_IMPORTED_MODULE_0__.runInAction)(() => {\n            let i = recorder.events.length;\n            while (i-- > numRecorderEvents) {\n              applyPatches(this.subtreeRootClone, recorder.events[i].inversePatches, true);\n            }\n          });\n        });\n      }\n    };\n    return { sandboxNodes, applyRecorderChanges };\n  }\n}\nfunction sandbox(subtreeRoot) {\n  return new SandboxManager(subtreeRoot);\n}\nfunction typesTuple(...itemTypes) {\n  const typeInfoGen = (t) => new TupleTypeInfo(t, itemTypes.map(resolveStandardType));\n  return lateTypeChecker(() => {\n    const checkers = itemTypes.map(resolveTypeChecker);\n    const getTypeName = (...recursiveTypeCheckers) => {\n      const typeNames = checkers.map((tc) => {\n        if (recursiveTypeCheckers.includes(tc)) {\n          return \"...\";\n        }\n        return tc.getTypeName(...recursiveTypeCheckers, tc);\n      });\n      return \"[\" + typeNames.join(\", \") + \"]\";\n    };\n    const thisTc = new TypeChecker(TypeCheckerBaseType.Array, (array, path, typeCheckedValue) => {\n      if (!isArray(array) || array.length !== itemTypes.length) {\n        return new TypeCheckError(path, getTypeName(thisTc), array, typeCheckedValue);\n      }\n      for (let i = 0; i < array.length; i++) {\n        const itemError = checkers[i].check(array[i], [...path, i], typeCheckedValue);\n        if (itemError) {\n          return itemError;\n        }\n      }\n      return null;\n    }, getTypeName, typeInfoGen, (array) => {\n      if (!isArray(array) || array.length !== itemTypes.length) {\n        return null;\n      }\n      for (let i = 0; i < array.length; i++) {\n        const itemActualChecker = checkers[i].snapshotType(array[i]);\n        if (!itemActualChecker) {\n          return null;\n        }\n      }\n      return thisTc;\n    }, (array) => {\n      return array.map((item, i) => {\n        return checkers[i].fromSnapshotProcessor(item);\n      });\n    }, (array) => {\n      return array.map((item, i) => {\n        return checkers[i].toSnapshotProcessor(item);\n      });\n    });\n    return thisTc;\n  }, typeInfoGen);\n}\nclass TupleTypeInfo extends TypeInfo {\n  constructor(thisType, itemTypes) {\n    super(thisType);\n    __publicField(this, \"itemTypes\");\n    // memoize to always return the same array on the getter\n    __publicField(this, \"_itemTypeInfos\", lazy(() => this.itemTypes.map(getTypeInfo)));\n    this.itemTypes = itemTypes;\n  }\n  get itemTypeInfos() {\n    return this._itemTypeInfos();\n  }\n}\nlet ArraySet = class ArraySet2 extends Model({\n  [modelIdKey]: idProp,\n  items: tProp(typesArray(typesUnchecked()), () => [])\n  // will be properly checked by types.arraySet(subType)\n}) {\n  add(value) {\n    const items = this.items;\n    if (!items.includes(value)) {\n      items.push(value);\n    }\n    return this;\n  }\n  clear() {\n    this.items.length = 0;\n  }\n  delete(value) {\n    const items = this.items;\n    const index = items.findIndex((t) => t === value);\n    if (index >= 0) {\n      items.splice(index, 1);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  forEach(callbackfn, thisArg) {\n    const items = this.items;\n    const len = items.length;\n    for (let i = 0; i < len; i++) {\n      const k = items[i];\n      callbackfn.call(thisArg, k, k, this);\n    }\n  }\n  has(value) {\n    return this.items.includes(value);\n  }\n  get size() {\n    return this.items.length;\n  }\n  keys() {\n    return this.values();\n  }\n  values() {\n    const items = this.items;\n    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.values)(items)[Symbol.iterator]();\n  }\n  entries() {\n    const items = this.items;\n    return items.map((v) => [v, v]).values();\n  }\n  [Symbol.iterator]() {\n    return this.values();\n  }\n  get [Symbol.toStringTag]() {\n    return \"ArraySet\";\n  }\n};\n__decorate([\n  modelAction\n], ArraySet.prototype, \"add\", null);\n__decorate([\n  modelAction\n], ArraySet.prototype, \"clear\", null);\n__decorate([\n  modelAction\n], ArraySet.prototype, \"delete\", null);\nArraySet = __decorate([\n  model(`${namespace$2}/ArraySet`)\n], ArraySet);\nfunction arraySet(values2) {\n  const initialArr = values2 ? values2.slice() : [];\n  return new ArraySet({ items: initialArr });\n}\nfunction typesArraySet(valueType) {\n  const typeInfoGen = (t) => new ArraySetTypeInfo(t, resolveStandardType(valueType));\n  return lateTypeChecker(() => {\n    const modelInfo = modelInfoByClass.get(ArraySet);\n    const valueChecker = resolveTypeChecker(valueType);\n    const getTypeName = (...recursiveTypeCheckers) => `ArraySet<${valueChecker.getTypeName(...recursiveTypeCheckers, valueChecker)}>`;\n    const dataTypeChecker = typesObject(() => ({\n      items: typesArray(valueChecker)\n    }));\n    const thisTc = new TypeChecker(\n      TypeCheckerBaseType.Object,\n      // because it is really a model\n      (obj, path, typeCheckedValue) => {\n        if (!(obj instanceof ArraySet)) {\n          return new TypeCheckError(path, getTypeName(thisTc), obj, typeCheckedValue);\n        }\n        const resolvedTc = resolveTypeChecker(dataTypeChecker);\n        return resolvedTc.check(obj.$, path, typeCheckedValue);\n      },\n      getTypeName,\n      typeInfoGen,\n      (obj) => {\n        if (!isObject(obj)) {\n          return null;\n        }\n        if (obj[modelTypeKey] !== void 0) {\n          return obj[modelTypeKey] === modelInfo.name ? thisTc : null;\n        }\n        const resolvedTc = resolveTypeChecker(dataTypeChecker);\n        return resolvedTc.snapshotType(obj) ? thisTc : null;\n      },\n      (sn) => {\n        return {\n          ...sn,\n          [modelTypeKey]: modelInfo.name,\n          items: sn.items.map((v) => valueChecker.fromSnapshotProcessor(v))\n        };\n      },\n      (sn) => {\n        const snCopy = {\n          ...sn,\n          items: sn.items.map((v) => valueChecker.toSnapshotProcessor(v))\n        };\n        return snCopy;\n      }\n    );\n    return thisTc;\n  }, typeInfoGen);\n}\nclass ArraySetTypeInfo extends TypeInfo {\n  constructor(originalType, valueType) {\n    super(originalType);\n    __publicField(this, \"valueType\");\n    this.valueType = valueType;\n  }\n  get valueTypeInfo() {\n    return getTypeInfo(this.valueType);\n  }\n}\nfunction typesRecord(valueType) {\n  const typeInfoGen = (tc) => new RecordTypeInfo(tc, resolveStandardType(valueType));\n  return lateTypeChecker(() => {\n    const valueChecker = resolveTypeChecker(valueType);\n    const getTypeName = (...recursiveTypeCheckers) => `Record<${valueChecker.getTypeName(...recursiveTypeCheckers, valueChecker)}>`;\n    const applySnapshotProcessor = (obj, mode) => {\n      if (valueChecker.unchecked) {\n        return obj;\n      }\n      const newObj = {};\n      const keys2 = Object.keys(obj);\n      for (let i = 0; i < keys2.length; i++) {\n        const k = keys2[i];\n        const v = mode === \"from\" ? valueChecker.fromSnapshotProcessor(obj[k]) : valueChecker.toSnapshotProcessor(obj[k]);\n        newObj[k] = v;\n      }\n      return newObj;\n    };\n    const thisTc = new TypeChecker(TypeCheckerBaseType.Object, (obj, path, typeCheckedValue) => {\n      if (!isObject(obj)) {\n        return new TypeCheckError(path, getTypeName(thisTc), obj, typeCheckedValue);\n      }\n      if (!valueChecker.unchecked) {\n        const keys2 = Object.keys(obj);\n        for (let i = 0; i < keys2.length; i++) {\n          const k = keys2[i];\n          const v = obj[k];\n          const valueError = valueChecker.check(v, [...path, k], typeCheckedValue);\n          if (valueError) {\n            return valueError;\n          }\n        }\n      }\n      return null;\n    }, getTypeName, typeInfoGen, (obj) => {\n      if (!isObject(obj))\n        return null;\n      if (!valueChecker.unchecked) {\n        const keys2 = Object.keys(obj);\n        for (let i = 0; i < keys2.length; i++) {\n          const k = keys2[i];\n          const v = obj[k];\n          const valueActualChecker = valueChecker.snapshotType(v);\n          if (!valueActualChecker) {\n            return null;\n          }\n        }\n      }\n      return thisTc;\n    }, (obj) => {\n      return applySnapshotProcessor(obj, \"from\");\n    }, (obj) => {\n      return applySnapshotProcessor(obj, \"to\");\n    });\n    return thisTc;\n  }, typeInfoGen);\n}\nclass RecordTypeInfo extends TypeInfo {\n  constructor(thisType, valueType) {\n    super(thisType);\n    __publicField(this, \"valueType\");\n    this.valueType = valueType;\n  }\n  get valueTypeInfo() {\n    return getTypeInfo(this.valueType);\n  }\n}\nlet ObjectMap = class ObjectMap2 extends Model({\n  [modelIdKey]: idProp,\n  items: tProp(typesRecord(typesUnchecked()), () => ({}))\n  // will be properly checked by types.objectMap(subType)\n}) {\n  clear() {\n    const items = this.items;\n    const keys2 = Object.keys(items);\n    const len = keys2.length;\n    for (let i = 0; i < len; i++) {\n      const k = keys2[i];\n      (0,mobx__WEBPACK_IMPORTED_MODULE_0__.remove)(items, k);\n    }\n  }\n  delete(key) {\n    const hasKey = this.has(key);\n    if (hasKey) {\n      (0,mobx__WEBPACK_IMPORTED_MODULE_0__.remove)(this.items, key);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  forEach(callbackfn, thisArg) {\n    const items = this.items;\n    const keys2 = Object.keys(items);\n    const len = keys2.length;\n    for (let i = 0; i < len; i++) {\n      const k = keys2[i];\n      callbackfn.call(thisArg, items[k], k, this);\n    }\n  }\n  get(key) {\n    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.get)(this.items, key);\n  }\n  has(key) {\n    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.has)(this.items, key);\n  }\n  set(key, value) {\n    setIfDifferent(this.items, key, value);\n    return this;\n  }\n  get size() {\n    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.keys)(this.items).length;\n  }\n  keys() {\n    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.keys)(this.items)[Symbol.iterator]();\n  }\n  values() {\n    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.values)(this.items)[Symbol.iterator]();\n  }\n  entries() {\n    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.entries)(this.items)[Symbol.iterator]();\n  }\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n  get [Symbol.toStringTag]() {\n    return \"ObjectMap\";\n  }\n};\n__decorate([\n  modelAction\n], ObjectMap.prototype, \"clear\", null);\n__decorate([\n  modelAction\n], ObjectMap.prototype, \"delete\", null);\n__decorate([\n  modelAction\n], ObjectMap.prototype, \"set\", null);\nObjectMap = __decorate([\n  model(`${namespace$2}/ObjectMap`)\n], ObjectMap);\nfunction objectMap(entries2) {\n  const initialObj = {};\n  if (entries2) {\n    let len = entries2.length;\n    for (let i = 0; i < len; i++) {\n      const entry = entries2[i];\n      initialObj[entry[0]] = entry[1];\n    }\n  }\n  return new ObjectMap({ items: initialObj });\n}\nfunction typesObjectMap(valueType) {\n  const typeInfoGen = (t) => new ObjectMapTypeInfo(t, resolveStandardType(valueType));\n  return lateTypeChecker(() => {\n    const modelInfo = modelInfoByClass.get(ObjectMap);\n    const valueChecker = resolveTypeChecker(valueType);\n    const getTypeName = (...recursiveTypeCheckers) => `ObjectMap<${valueChecker.getTypeName(...recursiveTypeCheckers, valueChecker)}>`;\n    const dataTypeChecker = typesObject(() => ({\n      items: typesRecord(valueChecker)\n    }));\n    const resolvedDataTypeChecker = resolveTypeChecker(dataTypeChecker);\n    const thisTc = new TypeChecker(TypeCheckerBaseType.Object, (obj, path, typeCheckedValue) => {\n      if (!(obj instanceof ObjectMap)) {\n        return new TypeCheckError(path, getTypeName(thisTc), obj, typeCheckedValue);\n      }\n      return resolvedDataTypeChecker.check(obj.$, path, typeCheckedValue);\n    }, getTypeName, typeInfoGen, (obj) => {\n      if (!isObject(obj)) {\n        return null;\n      }\n      if (obj[modelTypeKey] !== void 0) {\n        return obj[modelTypeKey] === modelInfo.name ? thisTc : null;\n      }\n      return resolvedDataTypeChecker.snapshotType(obj) ? thisTc : null;\n    }, (sn) => {\n      const newItems = {};\n      for (const k of Object.keys(sn.items)) {\n        newItems[k] = valueChecker.fromSnapshotProcessor(sn.items[k]);\n      }\n      return {\n        ...sn,\n        [modelTypeKey]: modelInfo.name,\n        items: newItems\n      };\n    }, (sn) => {\n      const newItems = {};\n      for (const k of Object.keys(sn.items)) {\n        newItems[k] = valueChecker.toSnapshotProcessor(sn.items[k]);\n      }\n      const snCopy = {\n        ...sn,\n        items: newItems\n      };\n      return snCopy;\n    });\n    return thisTc;\n  }, typeInfoGen);\n}\nclass ObjectMapTypeInfo extends TypeInfo {\n  constructor(thisType, valueType) {\n    super(thisType);\n    __publicField(this, \"valueType\");\n    this.valueType = valueType;\n  }\n  get valueTypeInfo() {\n    return getTypeInfo(this.valueType);\n  }\n}\nfunction typesRef(refConstructor) {\n  const typeName = \"Ref\";\n  const modelInfo = modelInfoByClass.get(refConstructor.refClass);\n  const refDataTypeChecker = resolveTypeChecker(typesObject(() => ({\n    id: typesString\n  })));\n  const thisTc = new TypeChecker(TypeCheckerBaseType.Object, (value, path, typeCheckedValue) => {\n    if (!(value instanceof Ref)) {\n      return new TypeCheckError(path, typeName, value, typeCheckedValue);\n    }\n    return refDataTypeChecker.check(value.$, path, typeCheckedValue);\n  }, () => typeName, (t) => new RefTypeInfo(t), (obj) => {\n    if (!isObject(obj)) {\n      return null;\n    }\n    if (obj[modelTypeKey] !== void 0) {\n      return obj[modelTypeKey] === modelInfo.name ? thisTc : null;\n    }\n    return refDataTypeChecker.snapshotType(obj) ? thisTc : null;\n  }, (sn) => {\n    if (sn[modelTypeKey]) {\n      return sn;\n    } else {\n      return {\n        ...sn,\n        [modelTypeKey]: modelInfo.name\n      };\n    }\n  }, (sn) => sn);\n  return thisTc;\n}\nclass RefTypeInfo extends TypeInfo {\n}\nfunction enumValues(e) {\n  const vals = [];\n  for (const k of Object.keys(e)) {\n    const v = e[k];\n    if (!vals.includes(v) && (typeof v !== \"string\" && v !== +k || e[v] !== +k)) {\n      vals.push(v);\n    }\n  }\n  return vals;\n}\nfunction typesEnum(enumObject) {\n  assertIsObject(enumObject, \"enumObject\");\n  const literals = enumValues(enumObject).map((e) => typesLiteral(e));\n  return typesOr(...literals);\n}\nfunction typesRefinement(baseType, checkFn, typeName) {\n  const typeInfoGen = (t) => new RefinementTypeInfo(t, resolveStandardType(baseType), checkFn, typeName);\n  return lateTypeChecker(() => {\n    const baseChecker = resolveTypeChecker(baseType);\n    const getTypeName = (...recursiveTypeCheckers) => {\n      const baseTypeName = baseChecker.getTypeName(...recursiveTypeCheckers, baseChecker);\n      const refinementName = typeName || \"refinementOf\";\n      return `${refinementName}<${baseTypeName}>`;\n    };\n    const thisTc = new TypeChecker(\n      baseChecker.baseType,\n      (data, path, typeCheckedValue) => {\n        const baseErr = baseChecker.check(data, path, typeCheckedValue);\n        if (baseErr) {\n          return baseErr;\n        }\n        const refinementErr = checkFn(data);\n        if (refinementErr === true || refinementErr == null) {\n          return null;\n        } else if (refinementErr === false) {\n          return new TypeCheckError(path, getTypeName(thisTc), data, typeCheckedValue);\n        } else {\n          return new TypeCheckError(refinementErr.path, refinementErr.expectedTypeName, refinementErr.actualValue, typeCheckedValue);\n        }\n      },\n      getTypeName,\n      typeInfoGen,\n      // we cannot check refinement here since it checks data instances, not snapshots\n      (sn) => baseChecker.snapshotType(sn),\n      (sn) => baseChecker.fromSnapshotProcessor(sn),\n      (sn) => baseChecker.toSnapshotProcessor(sn)\n    );\n    return thisTc;\n  }, typeInfoGen);\n}\nclass RefinementTypeInfo extends TypeInfo {\n  constructor(thisType, baseType, checkFunction, typeName) {\n    super(thisType);\n    __publicField(this, \"baseType\");\n    __publicField(this, \"checkFunction\");\n    __publicField(this, \"typeName\");\n    this.baseType = baseType;\n    this.checkFunction = checkFunction;\n    this.typeName = typeName;\n  }\n  get baseTypeInfo() {\n    return getTypeInfo(this.baseType);\n  }\n}\nconst typesInteger = typesRefinement(typesNumber, (n) => Number.isInteger(n), \"integer\");\nconst typesNonEmptyString = typesRefinement(typesString, (s) => s !== \"\", \"nonEmpty\");\nfunction typesMaybe(baseType) {\n  return typesOr(baseType, typesUndefined);\n}\nfunction typesMaybeNull(type) {\n  return typesOr(type, typesNull);\n}\nfunction typesTag(baseType, tag2, typeName) {\n  const typeInfoGen = (t) => new TagTypeInfo(t, resolveStandardType(baseType), tag2, typeName);\n  return lateTypeChecker(() => {\n    const baseChecker = resolveTypeChecker(baseType);\n    const getTypeName = (...recursiveTypeCheckers) => {\n      const baseTypeName = baseChecker.getTypeName(...recursiveTypeCheckers, baseChecker);\n      const taggedName = typeName || \"tagged\";\n      return `${taggedName}<${baseTypeName}>`;\n    };\n    const thisTc = new TypeChecker(baseChecker.baseType, (data, path, typeCheckedValue) => baseChecker.check(data, path, typeCheckedValue), getTypeName, typeInfoGen, (sn) => baseChecker.snapshotType(sn), (sn) => baseChecker.fromSnapshotProcessor(sn), (sn) => baseChecker.toSnapshotProcessor(sn));\n    return thisTc;\n  }, typeInfoGen);\n}\nclass TagTypeInfo extends TypeInfo {\n  constructor(thisType, baseType, tag2, typeName) {\n    super(thisType);\n    __publicField(this, \"baseType\");\n    __publicField(this, \"tag\");\n    __publicField(this, \"typeName\");\n    this.baseType = baseType;\n    this.tag = tag2;\n    this.typeName = typeName;\n  }\n  get baseTypeInfo() {\n    return getTypeInfo(this.baseType);\n  }\n}\nconst types = {\n  literal: typesLiteral,\n  undefined: typesUndefined,\n  null: typesNull,\n  boolean: typesBoolean,\n  number: typesNumber,\n  string: typesString,\n  or: typesOr,\n  maybe: typesMaybe,\n  maybeNull: typesMaybeNull,\n  array: typesArray,\n  record: typesRecord,\n  unchecked: typesUnchecked,\n  model: typesModel,\n  dataModelData: typesDataModelData,\n  object: typesObject,\n  ref: typesRef,\n  frozen: typesFrozen,\n  enum: typesEnum,\n  tag: typesTag,\n  refinement: typesRefinement,\n  integer: typesInteger,\n  nonEmptyString: typesNonEmptyString,\n  objectMap: typesObjectMap,\n  arraySet: typesArraySet,\n  tuple: typesTuple,\n  mapArray(valueType) {\n    return typesArray(typesTuple(typesString, valueType));\n  },\n  setArray(valueType) {\n    return typesArray(valueType);\n  },\n  mapObject(valueType) {\n    return typesRecord(valueType);\n  },\n  dateString: typesNonEmptyString,\n  dateTimestamp: typesInteger\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/mobx-keystone/dist/mobx-keystone.esm.mjs\n"));

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.mjs":
/*!******************************************!*\
  !*** ./node_modules/tslib/tslib.es6.mjs ***!
  \******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __addDisposableResource: function() { return /* binding */ __addDisposableResource; },\n/* harmony export */   __assign: function() { return /* binding */ __assign; },\n/* harmony export */   __asyncDelegator: function() { return /* binding */ __asyncDelegator; },\n/* harmony export */   __asyncGenerator: function() { return /* binding */ __asyncGenerator; },\n/* harmony export */   __asyncValues: function() { return /* binding */ __asyncValues; },\n/* harmony export */   __await: function() { return /* binding */ __await; },\n/* harmony export */   __awaiter: function() { return /* binding */ __awaiter; },\n/* harmony export */   __classPrivateFieldGet: function() { return /* binding */ __classPrivateFieldGet; },\n/* harmony export */   __classPrivateFieldIn: function() { return /* binding */ __classPrivateFieldIn; },\n/* harmony export */   __classPrivateFieldSet: function() { return /* binding */ __classPrivateFieldSet; },\n/* harmony export */   __createBinding: function() { return /* binding */ __createBinding; },\n/* harmony export */   __decorate: function() { return /* binding */ __decorate; },\n/* harmony export */   __disposeResources: function() { return /* binding */ __disposeResources; },\n/* harmony export */   __esDecorate: function() { return /* binding */ __esDecorate; },\n/* harmony export */   __exportStar: function() { return /* binding */ __exportStar; },\n/* harmony export */   __extends: function() { return /* binding */ __extends; },\n/* harmony export */   __generator: function() { return /* binding */ __generator; },\n/* harmony export */   __importDefault: function() { return /* binding */ __importDefault; },\n/* harmony export */   __importStar: function() { return /* binding */ __importStar; },\n/* harmony export */   __makeTemplateObject: function() { return /* binding */ __makeTemplateObject; },\n/* harmony export */   __metadata: function() { return /* binding */ __metadata; },\n/* harmony export */   __param: function() { return /* binding */ __param; },\n/* harmony export */   __propKey: function() { return /* binding */ __propKey; },\n/* harmony export */   __read: function() { return /* binding */ __read; },\n/* harmony export */   __rest: function() { return /* binding */ __rest; },\n/* harmony export */   __runInitializers: function() { return /* binding */ __runInitializers; },\n/* harmony export */   __setFunctionName: function() { return /* binding */ __setFunctionName; },\n/* harmony export */   __spread: function() { return /* binding */ __spread; },\n/* harmony export */   __spreadArray: function() { return /* binding */ __spreadArray; },\n/* harmony export */   __spreadArrays: function() { return /* binding */ __spreadArrays; },\n/* harmony export */   __values: function() { return /* binding */ __values; }\n/* harmony export */ });\n/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nfunction __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nfunction __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nfunction __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nfunction __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nfunction __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nfunction __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nfunction __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nfunction __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nfunction __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nfunction __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nfunction __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nfunction __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nfunction __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nfunction __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nfunction __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nfunction __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nfunction __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n        if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n        dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n        if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n        dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nfunction __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tslib/tslib.es6.mjs\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!"), __webpack_exec__("./node_modules/next/dist/client/router.js"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);